{"version":3,"sources":["components/numericInput.tsx","components/identicon/index.tsx","components/tokenIcon/index.tsx","components/currencyInput/index.tsx","utils/currencyPair.tsx","components/labels.tsx","components/pool/address.tsx","components/trade/index.tsx","models/airdrops.ts","models/marketOverrides.ts","context/market.tsx","components/pool/supplyOverview.tsx","components/pool/config.tsx","components/pool/add.tsx","components/slippage/index.tsx","components/settings.tsx","components/pool/remove.tsx","components/pool/view.tsx","components/accountInfo.tsx","components/appBar.tsx","components/exchange.tsx","components/charts/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","utils/accounts.tsx","components/explorerLink.tsx","utils/eventEmitter.ts","utils/utils.ts","utils/connection.tsx","models/tokenSwap.ts","utils/ids.tsx","utils/pools.tsx","utils/notifications.tsx","utils/wallet.tsx","models/index.ts"],"names":["NumericInput","onChange","e","value","target","isNaN","test","props","onBlur","valueTemp","charAt","length","slice","replace","this","maxLength","React","Component","Identicon","address","style","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","width","parseInt","bs58","decode","toString","className","TokenIcon","env","useConnectionConfig","icon","getTokenIcon","mintAddress","alt","key","height","src","marginRight","marginTop","borderRadius","backgroundColor","backgroundClip","PoolIcon","display","mintA","mintB","Option","Select","CurrencyInput","userAccounts","useUserAccounts","pools","useCachedPool","mint","useMint","tokens","PopularTokens","renderPopularTokens","map","item","name","tokenSymbol","title","alignItems","grouppedUserAccounts","sort","a","b","info","amount","toNumber","reduce","acc","toBase58","isKnownMint","pool","find","p","pubkeys","set","get","concat","account","Map","additionalAccounts","keys","findIndex","t","has","push","renderAdditionalTokens","list","getPoolName","sorted","holdingMints","getTokenName","userUiBalance","currentAccount","Math","pow","decimals","bodyStyle","padding","onClick","onInputChange","toFixed","val","fontSize","boxShadow","borderColor","outline","placeholder","size","showSearch","minWidth","onMintChange","filterOption","input","option","toLowerCase","indexOf","CurrencyPairContext","createContext","CurrencyPairProvider","children","connection","useConnection","useState","amountA","setAmountA","amountB","setAmountB","history","useHistory","location","useLocation","mintAddressA","setMintAddressA","mintAddressB","setMintAddressB","lastTypedAccount","setLastTypedAccount","accountA","useAccountByMint","accountB","usePoolForBasket","PoolOperation","Add","poolOperation","setPoolOperation","base","quote","pathname","search","defaultBase","defaultQuote","nameToToken","pair","URLSearchParams","items","split","isValidAddress","getDefaultTokens","calculateDependent","useCallback","independent","setDependent","parseFloat","calculateDependentAmount","result","undefined","Number","isFinite","convertAmount","Provider","A","setAmount","setMint","sufficientBalance","convert","B","useCurrencyPairState","useContext","INSUFFICIENT_FUNDS_LABEL","tokenName","generateActionLabel","action","connected","ignoreToBalance","PoolAddress","showLabel","span","code","type","shape","CopyOutlined","marginLeft","navigator","clipboard","writeText","antIcon","LoadingOutlined","spin","TradeEntry","tokenA","tokenB","useWallet","wallet","pendingTx","setPendingTx","slippage","useSlippageConfig","handleSwap","components","swap","notify","description","message","SwapGivenInput","tempMint","tempAmount","op","SwapGivenProceeds","connect","disabled","indicator","POOLS_WITH_AIRDROP","PublicKey","airdrops","MINT_TO_MARKET","INITAL_LIQUIDITY_DATE","Date","MarketsContext","marketEmitter","EventEmitter","MarketProvider","endpoint","accountsToObserve","useMemo","Connection","marketByMint","Set","flat","values","SERUM_TOKEN","TOKEN_MINTS","marketAddress","marketName","marketInfo","MARKETS","m","timer","updateData","refreshAccounts","raiseMarketUpdated","window","setTimeout","reverseSerumMarketCache","forEach","allMarkets","getMultipleAccounts","filter","cache","then","array","index","market","programId","id","add","decoded","Market","getLayout","data","details","pubkey","registerParser","baseMint","MintParser","quoteMint","bids","OrderBookParser","asks","toQuery","initalQuery","clearTimeout","midPriceInUSD","getMidPrice","subscribeToMarket","bid","ask","delete","useEnrichedPools","context","enriched","setEnriched","marketsByMint","subscriptions","update","TODAY","mints","indexA","indexB","getAccount","holdingAccounts","getMint","baseReserveUSD","quoteReserveUSD","poolMint","supply","eqn","volume","fees","apy","airdropYield","poolWithAirdrop","drop","equals","midPrice","calculateAirdropYield","feeAccount","ownedPct","baseVolume","quoteVolume","daysSinceInception","floor","getTime","apy0","apy1","max","lpMint","link","names","liquidityA","liquidityAinUsd","liquidityB","liquidityBinUsd","liquidity","raw","createEnrichedPools","dispose","onMarket","Orderbook","LAYOUT","STABLE_COINS","decodedMarket","baseMintDecimals","quoteMintDecimals","bidsBook","accountFlags","slab","asksBook","bestBid","getL2","bestAsk","SupplyOverview","chartDiv","div","instance","echarts","getInstanceByDom","init","setOption","tooltip","trigger","formatter","params","formatUSD","format","series","top","bottom","left","right","label","show","color","itemStyle","normal","FeeInput","numerator","denominator","setValue","border","x","PoolConfigCard","options","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","setOptions","defaultValue","curveType","AddToLiquidity","executeAction","addLiquidity","catch","console","log","hasSufficientBalance","createPoolButton","SWAP_PROGRAM_OWNER_FEE_ADDRESS","Button","overlay","content","marginBottom","Slippage","setSlippage","slippagePct","margin","flexDirection","newValue","Settings","providerUrl","setProvider","setEndpoint","onSelect","ENDPOINTS","WALLET_PROVIDERS","url","RemoveLiquidity","onRemove","liquidityAmount","removeLiquidity","PoolItem","poolContribution","contributionInUSD","poolDetails","feesInUSD","isFeeAccount","PoolAccounts","useOwnedPools","userPools","renderEmpty","image","Empty","PRESENTED_IMAGE_SIMPLE","AccountInfo","useNativeAccount","publicKey","lamports","LAMPORTS_PER_SOL","shortenAddress","AppBar","mode","selectedKeys","Item","to","href","rel","placement","disconnect","ExchangeView","tabStyle","tabList","tab","render","activeTab","setActiveTab","SettingOutlined","headStyle","tabProps","tabBarGutter","activeTabKey","onTabChange","Search","Input","FlashText","activeClass","setActiveClass","text","ChartsView","memo","searchRegex","setSearch","totals","setTotals","echartsRef","usePools","RegExp","updateChart","animation","breadcrumb","row","path","columns","dataIndex","record","textAlign","sorter","defaultSortOrder","formatPct","fontFamily","onSearch","dataSource","pagination","pageSize","Routes","basename","exact","component","App","data-color-scheme","data-icon","data-size","data-show-count","aria-label","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","AccountsContext","accountEmitter","pendingMintCalls","mintCache","pendingAccountCalls","accountsCache","pendingCalls","genericCache","getAccountInfo","pubKey","Error","tokenAccountFactory","getMintInfo","Buffer","from","deserializeMint","buffer","keyToAccountParser","query","parser","obj","deserialize","queryAccount","addAccount","queryMint","addMint","getCachedAccount","predicate","deserializeAccount","wrapNativeAccount","WRAPPED_SOL_MINT","owner","u64","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","PRECACHED_OWNERS","precacheUserTokenAccounts","getTokenAccountsByOwner","programIds","token","AccountsProvider","tokenAccounts","setTokenAccounts","setUserAccounts","nativeAccount","setNativeAccount","onAccountChange","UseNativeAccount","selectUserAccounts","SWAP_HOST_FEE_ADDRESS","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","raiseAccountUpdated","MintLayout","removeProgramAccountChangeListener","commitment","Promise","all","chunks","chunk","getMultipleAccountsCore","rest","args","_buildArgs","_rpcRequest","unsafeRes","err","onAccount","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","mintInfo","mintAuthorityOption","mintAuthority","freezeAuthorityOption","freezeAuthority","ExplorerLink","Text","AccountUpdateEvent","MarketUpdateEvent","ids","emitter","Emitter","callback","on","removeListener","emit","AddressToToken","Object","knownMints","useLocalStorageState","defaultState","storedState","localStorage","getItem","JSON","parse","setState","setLocalStorageState","newState","removeItem","setItem","stringify","chars","shorten","knownSymbol","substring","join","Array","apply","ceil","_","rate","precision","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","clusterApiUrl","DEFAULT","ConnectionContext","sendConnection","ConnectionProvider","end","setProgramIds","Account","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","regex","exec","lastIndex","sendTransaction","instructions","signers","awaitConfirmation","transaction","Transaction","instruction","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","rawTransaction","serialize","skipPreflight","sendRawTransaction","status","property","BufferLayout","uint64","TokenSwapLayoutLegacyV0","TokenSwapLayout","createInitSwapInstruction","tokenSwapAccount","authority","tokenAccountA","tokenAccountB","tokenPool","tokenAccountPool","tokenProgramId","swapProgramId","nonce","isSigner","isWritable","commandDataLayout","alloc","encodeLength","encode","TransactionInstruction","depositInstruction","tokenSwap","sourceA","sourceB","intoA","intoB","poolToken","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","dataLayout","Numberu64","toBuffer","withdrawInstruction","sourcePoolAccount","fromA","fromB","userAccountA","userAccountB","minimumTokenA","minimumTokenB","swapInstruction","userSource","poolSource","poolDestination","userDestination","amountIn","minimumAmountOut","programOwner","SWAP_PROGRAM_ID","SWAP_PROGRAM_LEGACY_IDS","TOKEN_PROGRAM_ID","process","REACT_APP_SWAP_HOST_FEE_ADDRESS","debug","PROGRAM_IDS","legacy","envName","swap_legacy","minAmount0","minAmount1","cleanupInstructions","getMinimumBalanceForRentExemption","accountRentExempt","findOrCreateAccountByMint","toAccounts","Token","createApproveInstruction","program","SLIPPAGE","minAmountOut","holdingA","holdingB","fromAccount","getWrappedAccount","toAccount","hostFeeAccount","_addLiquidityNewPool","_addLiquidityExistingPool","getHoldings","accounts","toPoolInfo","setPools","queryPools","swapId","isLegacy","poolsArray","getProgramAccounts","holdings","h","leg","subID","updated","filtered","i","setPool","sortedMints","matchingPool","every","reserve0","reserve1","amount0","amount1","min","fromKeyA","fromKeyB","payer","excluded","accountToFind","isWrappedSol","newToAccount","createSplAccount","createCloseAccountInstruction","estimateProceedsFromInput","inputQuantityInPool","proceedsQuantityInPool","inputAmount","estimateInputFromProceeds","proceedsAmount","isFirstIndependent","depPrecision","indPrecision","indAdjustedAmount","indBasketQuantity","depBasketQuantity","depAdjustedAmount","some","c","liquidityTokenAccount","SystemProgram","fromPubkey","newAccountPubkey","space","createAccount","findProgramAddress","createInitMintInstruction","mintPublicKey","depositorAccount","createTransferInstruction","toCheck","createInitAccountInstruction","notification","opacity","WalletContext","WalletProvider","setProviderUrl","Wallet","setConnected","walletPublicKey","keyToDisplay","providerName"],"mappings":"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","file":"static/js/main.38796a76.chunk.js","sourcesContent":["import React from \"react\";\nimport { Input } from \"antd\";\n\nexport class NumericInput extends React.Component<any, any> {\n  onChange = (e: any) => {\n    const { value } = e.target;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n    if ((!isNaN(value) && reg.test(value)) || value === \"\" || value === \"-\") {\n      this.props.onChange(value);\n    }\n  };\n\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    let valueTemp = value;\n    if (value.charAt(value.length - 1) === \".\" || value === \"-\") {\n      valueTemp = value.slice(0, -1);\n    }\n    onChange(valueTemp.replace(/0*(\\d+)/, \"$1\"));\n    if (onBlur) {\n      onBlur();\n    }\n  };\n\n  render() {\n    return (\n      <Input\n        {...this.props}\n        onChange={this.onChange}\n        onBlur={this.onBlur}\n        maxLength={25}\n      />\n    );\n  }\n}\n","import React, { useEffect, useRef } from \"react\";\n\nimport Jazzicon from \"jazzicon\";\nimport bs58 from 'bs58';\nimport \"./style.less\";\n\nexport const Identicon = (props: {\n  address?: string;\n  style?: React.CSSProperties;\n}) => {\n  const { address, style } = props;\n  const ref = useRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(style?.width || 16, parseInt(bs58.decode(address).toString('hex').slice(5, 15), 16))\n      );\n    }\n  }, [address, style]);\n\n  return (\n    <div className=\"identicon-wrapper\" ref={ref as any} style={props.style} />\n  );\n};\n","import { Identicon } from \"./../identicon\";\nimport React from \"react\";\nimport { getTokenIcon } from \"../../utils/utils\";\nimport { useConnectionConfig } from \"../../utils/connection\";\n\nexport const TokenIcon = (props: {\n  mintAddress: string;\n  style?: React.CSSProperties;\n}) => {\n  const { env } = useConnectionConfig();\n  const icon = getTokenIcon(env, props.mintAddress);\n\n  if (icon) {\n    return (\n      <img\n        alt=\"Token icon\"\n        key={props.mintAddress}\n        width=\"20\"\n        height=\"20\"\n        src={icon}\n        style={{\n          marginRight: \"0.5rem\",\n          marginTop: \"0.11rem\",\n          borderRadius: \"1rem\",\n          backgroundColor: \"white\",\n          backgroundClip: \"padding-box\",\n          ...props.style,\n        }}\n      />\n    );\n  }\n\n  return (\n    <Identicon\n      address={props.mintAddress}\n      style={{\n        marginRight: \"0.5rem\",\n        width: 20,\n        height: 20,\n        marginTop: 2,\n        ...props.style,\n      }}\n    />\n  );\n};\n\nexport const PoolIcon = (props: {\n  mintA: string;\n  mintB: string;\n  style?: React.CSSProperties;\n}) => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      <TokenIcon\n        mintAddress={props.mintA}\n        style={{ marginRight: \"-0.5rem\", ...props.style }}\n      />\n      <TokenIcon mintAddress={props.mintB} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport {\n  getPoolName,\n  getTokenName,\n  isKnownMint,\n  KnownToken,\n} from \"../../utils/utils\";\nimport { useUserAccounts, useMint, useCachedPool } from \"../../utils/accounts\";\nimport \"./styles.less\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { PoolIcon, TokenIcon } from \"../tokenIcon\";\nimport PopularTokens from \"../../utils/token-list.json\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\n\nconst { Option } = Select;\n\nexport const CurrencyInput = (props: {\n  mint?: string;\n  amount?: string;\n  title?: string;\n  onInputChange?: (val: number) => void;\n  onMintChange?: (account: string) => void;\n}) => {\n  const { userAccounts } = useUserAccounts();\n  const { pools } = useCachedPool();\n  const mint = useMint(props.mint);\n\n  const { env } = useConnectionConfig();\n\n  const tokens = PopularTokens[env] as KnownToken[];\n\n  const renderPopularTokens = tokens.map((item) => {\n    return (\n      <Option\n        key={item.mintAddress}\n        value={item.mintAddress}\n        name={item.tokenSymbol}\n        title={item.mintAddress}\n      >\n        <div\n          key={item.mintAddress}\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <TokenIcon mintAddress={item.mintAddress} />\n          {item.tokenSymbol}\n        </div>\n      </Option>\n    );\n  });\n\n  // TODO: expand nested pool names ...?\n\n  // group accounts by mint and use one with biggest balance\n  const grouppedUserAccounts = userAccounts\n    .sort((a, b) => {\n      return b.info.amount.toNumber() - a.info.amount.toNumber();\n    })\n    .reduce((map, acc) => {\n      const mint = acc.info.mint.toBase58();\n      if (isKnownMint(env, mint)) {\n        return map;\n      }\n\n      const pool = pools.find((p) => p && p.pubkeys.mint.toBase58() === mint);\n\n      map.set(mint, (map.get(mint) || []).concat([{ account: acc, pool }]));\n\n      return map;\n    }, new Map<string, { account: TokenAccount; pool: PoolInfo | undefined }[]>());\n\n  const additionalAccounts = [...grouppedUserAccounts.keys()];\n  if (tokens.findIndex((t) => t.mintAddress === props.mint) < 0 && props.mint && !grouppedUserAccounts.has(props?.mint)) {\n    additionalAccounts.push(props.mint);\n  }\n\n  const renderAdditionalTokens = additionalAccounts.map(\n    (mint) => {\n      let pool: PoolInfo | undefined;\n      const list = grouppedUserAccounts.get(mint);\n      if (list && list.length > 0) {\n        // TODO: group multple accounts of same time and select one with max amount\n        const account = list[0];\n        pool = account.pool;\n      }\n\n      let name: string;\n      let icon: JSX.Element;\n      if (pool) {\n        name = getPoolName(env, pool);\n\n        const sorted = pool.pubkeys.holdingMints\n          .map((a: PublicKey) => a.toBase58())\n          .sort();\n        icon = <PoolIcon mintA={sorted[0]} mintB={sorted[1]} />;\n      } else {\n        name = getTokenName(env, mint);\n        icon = <TokenIcon mintAddress={mint} />;\n      }\n\n      return (\n        <Option\n          key={mint}\n          value={mint}\n          name={name}\n          title={mint}\n        >\n          <div key={mint} style={{ display: \"flex\", alignItems: \"center\" }}>\n            {icon}\n            {name}\n          </div>\n        </Option>\n      );\n    }\n  );\n\n  const userUiBalance = () => {\n    const currentAccount = userAccounts?.find(\n      (a) => a.info.mint.toBase58() === props.mint\n    );\n    if (currentAccount && mint) {\n      return (\n        currentAccount.info.amount.toNumber() / Math.pow(10, mint.decimals)\n      );\n    }\n\n    return 0;\n  };\n\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"ccy-input-header\">\n        <div className=\"ccy-input-header-left\">{props.title}</div>\n\n        <div\n          className=\"ccy-input-header-right\"\n          onClick={(e) =>\n            props.onInputChange && props.onInputChange(userUiBalance())\n          }\n        >\n          Balance: {userUiBalance().toFixed(6)}\n        </div>\n      </div>\n      <div className=\"ccy-input-header\" style={{ padding: \"0px 10px 5px 7px\" }}>\n        <NumericInput\n          value={props.amount}\n          onChange={(val: any) => {\n            if (props.onInputChange) {\n              props.onInputChange(val);\n            }\n          }}\n          style={{\n            fontSize: 20,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          placeholder=\"0.00\"\n        />\n\n        <div className=\"ccy-input-header-right\" style={{ display: \"felx\" }}>\n          <Select\n            size=\"large\"\n            showSearch\n            style={{ minWidth: 120 }}\n            placeholder=\"CCY\"\n            value={props.mint}\n            onChange={(item) => {\n              if (props.onMintChange) {\n                props.onMintChange(item);\n              }\n            }}\n            filterOption={(input, option) =>\n              option?.name?.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {[...renderPopularTokens, ...renderAdditionalTokens]}\n          </Select>\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  calculateDependentAmount,\n  usePoolForBasket,\n  PoolOperation,\n} from \"./pools\";\nimport { useMint, useAccountByMint } from \"./accounts\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { ENV, useConnection, useConnectionConfig } from \"./connection\";\nimport { TokenAccount } from \"../models\";\nimport { convert } from \"./utils\";\nimport PopularTokens from \"../utils/token-list.json\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport bs58 from 'bs58';\n\nexport interface CurrencyContextState {\n  mintAddress: string;\n  account?: TokenAccount;\n  mint?: MintInfo;\n  amount: string;\n  setAmount: (val: string) => void;\n  setMint: (mintAddress: string) => void;\n  convertAmount: () => number;\n  sufficientBalance: () => boolean;\n}\n\nexport interface CurrencyPairContextState {\n  A: CurrencyContextState;\n  B: CurrencyContextState;\n  setLastTypedAccount: (mintAddress: string) => void;\n  setPoolOperation: (swapDirection: PoolOperation) => void;\n}\n\nconst CurrencyPairContext = React.createContext<CurrencyPairContextState | null>(\n  null\n);\n\nexport function CurrencyPairProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { env } = useConnectionConfig();\n  const [amountA, setAmountA] = useState(\"\");\n  const [amountB, setAmountB] = useState(\"\");\n  const history = useHistory();\n  const location = useLocation();\n  const [mintAddressA, setMintAddressA] = useState(\"\");\n  const [mintAddressB, setMintAddressB] = useState(\"\");\n  const [lastTypedAccount, setLastTypedAccount] = useState(\"\");\n  const accountA = useAccountByMint(mintAddressA);\n  const accountB = useAccountByMint(mintAddressB);\n  const mintA = useMint(mintAddressA);\n  const mintB = useMint(mintAddressB);\n  const pool = usePoolForBasket([mintAddressA, mintAddressB]);\n  const [poolOperation, setPoolOperation] = useState<PoolOperation>(\n    PoolOperation.Add\n  );\n\n  // updates browser history on token changes\n  useEffect(() => {\n    // set history\n    const base =\n      PopularTokens[env].find((t) => t.mintAddress === mintAddressA)\n        ?.tokenSymbol || mintAddressA;\n    const quote =\n      PopularTokens[env].find((t) => t.mintAddress === mintAddressB)\n        ?.tokenSymbol || mintAddressB;\n\n    if (base && quote && location.pathname.indexOf(\"info\") < 0) {\n      history.push({\n        search: `?pair=${base}-${quote}`,\n      });\n    } else {\n      if (mintAddressA && mintAddressB) {\n        history.push({\n          search: ``,\n        });\n      } else {\n        return;\n      }\n    }\n  }, [mintAddressA, mintAddressB]);\n\n  // Updates tokens on location change\n  useEffect(() => {\n    if (!location.search && mintAddressA && mintAddressB) {\n      return;\n    }\n\n    let { defaultBase, defaultQuote } = getDefaultTokens(env, location.search);\n    if (!defaultBase || !defaultQuote) {\n      return;\n    }\n    setMintAddressA(\n      PopularTokens[env].find((t) => t.tokenSymbol === defaultBase)\n        ?.mintAddress ||\n      defaultBase ||\n      \"\"\n    );\n    setMintAddressB(\n      PopularTokens[env].find((t) => t.tokenSymbol === defaultQuote)\n        ?.mintAddress ||\n      defaultQuote ||\n      \"\"\n    );\n  }, [location, location.search, setMintAddressA, setMintAddressB]);\n\n  const calculateDependent = useCallback(async () => {\n    if (pool && mintAddressA && mintAddressB) {\n      let setDependent;\n      let amount;\n      let independent;\n      if (lastTypedAccount === mintAddressA) {\n        independent = mintAddressA;\n        setDependent = setAmountB;\n        amount = parseFloat(amountA);\n      } else {\n        independent = mintAddressB;\n        setDependent = setAmountA;\n        amount = parseFloat(amountB);\n      }\n\n      const result = await calculateDependentAmount(\n        connection,\n        independent,\n        amount,\n        pool,\n        poolOperation\n      );\n      if (typeof result === \"string\") {\n        setDependent(result);\n      } else if (result !== undefined && Number.isFinite(result)) {\n        setDependent(result.toFixed(6));\n      } else {\n        setDependent(\"\");\n      }\n    }\n  }, [\n    pool,\n    mintAddressA,\n    mintAddressB,\n    setAmountA,\n    setAmountB,\n    amountA,\n    amountB,\n    connection,\n    lastTypedAccount,\n  ]);\n\n  useEffect(() => {\n    calculateDependent();\n  }, [amountB, amountA, lastTypedAccount, calculateDependent]);\n\n  const convertAmount = (amount: string, mint?: MintInfo) => {\n    return parseFloat(amount) * Math.pow(10, mint?.decimals || 0);\n  };\n\n  return (\n    <CurrencyPairContext.Provider\n      value={{\n        A: {\n          mintAddress: mintAddressA,\n          account: accountA,\n          mint: mintA,\n          amount: amountA,\n          setAmount: setAmountA,\n          setMint: setMintAddressA,\n          convertAmount: () => convertAmount(amountA, mintA),\n          sufficientBalance: () =>\n            accountA !== undefined &&\n            convert(accountA, mintA) >= parseFloat(amountA),\n        },\n        B: {\n          mintAddress: mintAddressB,\n          account: accountB,\n          mint: mintB,\n          amount: amountB,\n          setAmount: setAmountB,\n          setMint: setMintAddressB,\n          convertAmount: () => convertAmount(amountB, mintB),\n          sufficientBalance: () =>\n            accountB !== undefined &&\n            convert(accountB, mintB) >= parseFloat(amountB),\n        },\n        setLastTypedAccount,\n        setPoolOperation,\n      }}\n    >\n      {children}\n    </CurrencyPairContext.Provider>\n  );\n}\n\nexport const useCurrencyPairState = () => {\n  const context = useContext(CurrencyPairContext);\n  return context as CurrencyPairContextState;\n};\n\nconst isValidAddress = (address: string) => {\n  const decoded = bs58.decode(address);\n  return decoded.length === 32;\n};\n\nfunction getDefaultTokens(env: ENV, search: string) {\n  let defaultBase = \"SOL\";\n  let defaultQuote = \"USDC\";\n\n  const nameToToken = (PopularTokens[env] as any[]).reduce((map, item) => {\n    map.set(item.tokenSymbol, item);\n    return map;\n  }, new Map<string, any>());\n\n  if (search) {\n    const urlParams = new URLSearchParams(search);\n    const pair = urlParams.get(\"pair\");\n    if (pair) {\n      let items = pair.split(\"-\");\n\n      if (items.length > 1) {\n        if (nameToToken.has(items[0]) || isValidAddress(items[0])) {\n          defaultBase = items[0];\n        }\n\n        if (nameToToken.has(items[1]) || isValidAddress(items[1])) {\n          defaultQuote = items[1];\n        }\n      }\n    }\n  }\n  return { defaultBase, defaultQuote };\n}\n","import { ENV } from \"../utils/connection\";\nimport { CurrencyContextState } from \"../utils/currencyPair\";\nimport { getTokenName } from \"../utils/utils\";\n\nexport const CREATE_POOL_LABEL = \"Create Liquidity Pool\";\nexport const INSUFFICIENT_FUNDS_LABEL = (tokenName: string) =>\n  `Insufficient ${tokenName} funds`;\nexport const POOL_NOT_AVAILABLE = (tokenA: string, tokenB: string) =>\n  `Pool ${tokenA}/${tokenB} doesn't exsist`;\nexport const ADD_LIQUIDITY_LABEL = \"Provide Liquidity\";\nexport const SWAP_LABEL = \"Swap\";\nexport const CONNECT_LABEL = \"Connect Wallet\";\nexport const SELECT_TOKEN_LABEL = \"Select a token\";\nexport const ENTER_AMOUNT_LABEL = \"Enter an amount\";\n\nexport const generateActionLabel = (\n  action: string,\n  connected: boolean,\n  env: ENV,\n  A: CurrencyContextState,\n  B: CurrencyContextState,\n  ignoreToBalance: boolean = false\n) => {\n  return !connected\n    ? CONNECT_LABEL\n    : !A.mintAddress\n    ? SELECT_TOKEN_LABEL\n    : !A.amount\n    ? ENTER_AMOUNT_LABEL\n    : !B.mintAddress\n    ? SELECT_TOKEN_LABEL\n    : !B.amount\n    ? ENTER_AMOUNT_LABEL\n    : !A.sufficientBalance()\n    ? INSUFFICIENT_FUNDS_LABEL(getTokenName(env, A.mintAddress))\n    : ignoreToBalance || B.sufficientBalance()\n    ? action\n    : INSUFFICIENT_FUNDS_LABEL(getTokenName(env, B.mintAddress));\n};\n","import React from \"react\";\nimport { Button, Col, Row } from \"antd\";\nimport { PoolInfo } from \"../../models\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { ExplorerLink } from \"./../explorerLink\";\n\nexport const PoolAddress = (props: {\n  pool?: PoolInfo;\n  style?: React.CSSProperties;\n  showLabel?: boolean;\n}) => {\n  const { pool } = props;\n\n  if (!pool?.pubkeys.account) {\n    return null;\n  }\n\n  return (\n    <Row style={{ width: \"100%\", ...props.style }}>\n      {props.showLabel && <Col span={6}>Address:</Col>}\n      <Col span={15}>\n        <ExplorerLink\n          address={pool.pubkeys.account.toBase58()}\n          code={true}\n          type=\"address\"\n        />\n      </Col>\n      <Col span={3} style={{ display: \"flex\" }}>\n        <Button\n          shape=\"round\"\n          icon={<CopyOutlined />}\n          size={\"small\"}\n          style={{ marginLeft: \"auto\", marginRight: 0 }}\n          onClick={() =>\n            navigator.clipboard.writeText(pool.pubkeys.account.toBase58())\n          }\n        />\n      </Col>\n    </Row>\n  );\n};\n","import { Button, Spin } from \"antd\";\nimport React, { useState } from \"react\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { swap, usePoolForBasket, PoolOperation } from \"../../utils/pools\";\nimport { notify } from \"../../utils/notifications\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport { generateActionLabel, POOL_NOT_AVAILABLE, SWAP_LABEL } from \"../labels\";\nimport \"./trade.less\";\nimport { getTokenName } from \"../../utils/utils\";\nimport { PoolAddress } from \"../pool/address\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\n// TODO:\n// Compute price breakdown with/without fee\n// Show slippage\n// Show fee information\n\nexport const TradeEntry = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { env } = useConnectionConfig();\n\n  const swapAccounts = () => {\n    const tempMint = A.mintAddress;\n    const tempAmount = A.amount;\n    A.setMint(B.mintAddress);\n    A.setAmount(B.amount);\n    B.setMint(tempMint);\n    B.setAmount(tempAmount);\n    // @ts-ignore\n    setPoolOperation((op: PoolOperation) => {\n      switch (+op) {\n        case PoolOperation.SwapGivenInput:\n          return PoolOperation.SwapGivenProceeds;\n        case PoolOperation.SwapGivenProceeds:\n          return PoolOperation.SwapGivenInput;\n        case PoolOperation.Add:\n          return PoolOperation.SwapGivenInput;\n      }\n    });\n  };\n\n  const handleSwap = async () => {\n    if (A.account && B.mintAddress) {\n      try {\n        setPendingTx(true);\n\n        const components = [\n          {\n            account: A.account,\n            mintAddress: A.mintAddress,\n            amount: A.convertAmount(),\n          },\n          {\n            mintAddress: B.mintAddress,\n            amount: B.convertAmount(),\n          },\n        ];\n\n        await swap(connection, wallet, components, slippage, pool);\n      } catch {\n        notify({\n          description:\n            \"Please try again and approve transactions from your wallet\",\n          message: \"Swap trade cancelled.\",\n          type: \"error\",\n        });\n      } finally {\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"input-card\">\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenInput);\n            if (A.amount !== val) {\n              setLastTypedAccount(A.mintAddress);\n            }\n\n            A.setAmount(val);\n          }}\n          amount={A.amount}\n          mint={A.mintAddress}\n          onMintChange={(item) => {\n            A.setMint(item);\n          }}\n        />\n        <Button type=\"primary\" className=\"swap-button\" onClick={swapAccounts}>\n          ⇅\n        </Button>\n        <CurrencyInput\n          title=\"To (Estimate)\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenProceeds);\n            if (B.amount !== val) {\n              setLastTypedAccount(B.mintAddress);\n            }\n\n            B.setAmount(val);\n          }}\n          amount={B.amount}\n          mint={B.mintAddress}\n          onMintChange={(item) => {\n            B.setMint(item);\n          }}\n        />\n        <PoolAddress pool={pool} showLabel={true} />\n      </div>\n      <Button\n        className=\"trade-button\"\n        type=\"primary\"\n        size=\"large\"\n        onClick={connected ? handleSwap : wallet.connect}\n        style={{ width: \"100%\" }}\n        disabled={\n          connected &&\n          (pendingTx ||\n            !A.account ||\n            !B.mintAddress ||\n            A.account === B.account ||\n            !A.sufficientBalance() ||\n            !pool)\n        }\n      >\n        {generateActionLabel(\n          !pool\n            ? POOL_NOT_AVAILABLE(\n                getTokenName(env, A.mintAddress),\n                getTokenName(env, B.mintAddress)\n              )\n            : SWAP_LABEL,\n          connected,\n          env,\n          A,\n          B,\n          true\n        )}\n        {pendingTx && <Spin indicator={antIcon} className=\"trade-spinner\" />}\n      </Button>\n    </>\n  );\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const POOLS_WITH_AIRDROP = [\n  // FRONT\n  {\n    pool: new PublicKey(\"ALNzhDhhB1VRuCk5ieofHqdk2wtLGjMfDjaP5t3LGCpv\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // SUSHI\n  {\n    pool: new PublicKey(\"BrMQFZkL1ffHBsiURjmBTd4JDz4ddbTSVi7qfYCkYkNi\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // LINK\n  {\n    pool: new PublicKey(\"Gjp8DQoZSCnAbUGRpLUwe1Tgg4iKG6Hjan2EW4ZPoddo\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // YFI\n  {\n    pool: new PublicKey(\"6P5wDE2KjzTPu9RE2jZKWLxviqfMkVcnMBv6tQFaf4oB\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // BTC\n  {\n    pool: new PublicKey(\"CWuypwJdDi8pxNZ1k4HMUVzk8rtkrBnzqfnmc6y1pci3\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // USDT\n  {\n    pool: new PublicKey(\"2gJPRt8a9PNfjU4vFGtq4aH3ud1XY44tk9HvQVyF4eio\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // USDC\n  {\n    pool: new PublicKey(\"GfnWGHHfVqvGAF9ovNfqTn9PgV1XL33YSFXjTCZbJS97\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // ETH\n  {\n    pool: new PublicKey(\"CibFicoaEmw6CLocb1iDA9Vo6uMDwt75P1rAvUky2dq6\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // SRM\n  {\n    pool: new PublicKey(\"tSiGXxfdHisArSPCf3zDRaQGGixYbeUojeNAVQmP1gg\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // FTT\n  {\n    pool: new PublicKey(\"AVqsLVPtzNDZyDi2aV5n6tXitQM1wYZu5NDfAHJ9gDwW\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n    ],\n  },\n  // TOMO\n  {\n    pool: new PublicKey(\"9jYRpq99v6Gy5VMq5fv6fXN1ZK37kEpqq8P3tEy37y7Z\"),\n    airdrops: [\n      {\n        mint: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n        amount: 100_000,\n      },\n      {\n        mint: new PublicKey(\"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\"),\n        amount: 100_000,\n      },\n    ],\n  },\n];\n","// use to override serum market to use specifc mint\nexport const MINT_TO_MARKET: { [key: string]: string } = {};\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { POOLS_WITH_AIRDROP } from \"./../models/airdrops\";\nimport { MINT_TO_MARKET } from \"./../models/marketOverrides\";\nimport {\n  convert,\n  getPoolName,\n  getTokenName,\n  STABLE_COINS,\n} from \"./../utils/utils\";\nimport { ENV, useConnectionConfig } from \"./../utils/connection\";\nimport {\n  cache,\n  getMultipleAccounts,\n  MintParser,\n  ParsedAccountBase,\n  useCachedPool,\n} from \"./../utils/accounts\";\nimport { Market, MARKETS, Orderbook, TOKEN_MINTS } from \"@project-serum/serum\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\nimport { PoolInfo } from \"../models\";\nimport { EventEmitter } from \"./../utils/eventEmitter\";\n\nexport interface MarketsContextState {\n  midPriceInUSD: (mint: string) => number;\n  marketEmitter: EventEmitter;\n  accountsToObserve: Map<string, number>;\n  marketByMint: Map<string, SerumMarket>;\n\n  subscribeToMarket: (mint: string) => () => void;\n}\n\nconst INITAL_LIQUIDITY_DATE = new Date(\"2020-10-27\");\nconst REFRESH_INTERVAL = 30_000;\n\nconst MarketsContext = React.createContext<MarketsContextState | null>(null);\n\nconst marketEmitter = new EventEmitter();\n\nexport function MarketProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const { pools } = useCachedPool();\n  const accountsToObserve = useMemo(() => new Map<string, number>(), []);\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const marketByMint = useMemo(() => {\n    return [\n      ...new Set(pools.map((p) => p.pubkeys.holdingMints).flat()).values(),\n    ].reduce((acc, key) => {\n      const mintAddress = key.toBase58();\n\n      const SERUM_TOKEN = TOKEN_MINTS.find(\n        (a) => a.address.toBase58() === mintAddress\n      );\n\n      const marketAddress = MINT_TO_MARKET[mintAddress];\n      const marketName = `${SERUM_TOKEN?.name}/USDC`;\n      const marketInfo = MARKETS.find(\n        (m) => m.name === marketName || m.address.toBase58() === marketAddress\n      );\n\n      if (marketInfo) {\n        acc.set(mintAddress, {\n          marketInfo,\n        });\n      }\n\n      return acc;\n    }, new Map<string, SerumMarket>()) as Map<string, SerumMarket>;\n  }, [pools]);\n\n  useEffect(() => {\n    let timer = 0;\n\n    const updateData = async () => {\n      await refreshAccounts(connection, [...accountsToObserve.keys()]);\n\n      // TODO: only raise mints that changed\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      timer = window.setTimeout(() => updateData(), REFRESH_INTERVAL);\n    };\n\n    const initalQuery = async () => {\n      const reverseSerumMarketCache = new Map<string, string>();\n      [...marketByMint.keys()].forEach((mint) => {\n        const m = marketByMint.get(mint);\n        if (m) {\n          reverseSerumMarketCache.set(m.marketInfo.address.toBase58(), mint);\n        }\n      });\n\n      const allMarkets = [...marketByMint.values()].map((m) => {\n        return m.marketInfo.address.toBase58();\n      });\n\n      await getMultipleAccounts(\n        connection,\n        // only query for markets that are not in cahce\n        allMarkets.filter((a) => cache.get(a) === undefined),\n        \"single\"\n      ).then(({ keys, array }) => {\n        allMarkets.forEach(() => { });\n\n        return array.map((item, index) => {\n          const marketAddress = keys[index];\n          const mintAddress = reverseSerumMarketCache.get(marketAddress);\n          if (mintAddress) {\n            const market = marketByMint.get(mintAddress);\n\n            if (market) {\n              const programId = market.marketInfo.programId;\n              const id = market.marketInfo.address;\n              cache.add(id, item, (id, acc) => {\n                const decoded = Market.getLayout(programId).decode(acc.data);\n\n                const details = {\n                  pubkey: id,\n                  account: {\n                    ...acc,\n                  },\n                  info: decoded,\n                } as ParsedAccountBase;\n\n                cache.registerParser(details.info.baseMint, MintParser);\n                cache.registerParser(details.info.quoteMint, MintParser);\n                cache.registerParser(details.info.bids, OrderBookParser);\n                cache.registerParser(details.info.asks, OrderBookParser);\n\n                return details;\n              });\n            }\n          }\n\n          return item;\n        });\n      });\n\n      const toQuery = new Set<string>();\n      allMarkets.forEach((m) => {\n        const market = cache.get(m);\n        if (!market) {\n          return;\n        }\n\n        const decoded = market;\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.baseMint.toBase58());\n        }\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.quoteMint.toBase58());\n        }\n\n        toQuery.add(decoded.info.bids.toBase58());\n        toQuery.add(decoded.info.asks.toBase58());\n\n        // TODO: only update when someone listnes to it\n      });\n\n      await refreshAccounts(connection, [...toQuery.keys()]);\n\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      // start update loop\n      updateData();\n    };\n\n    initalQuery();\n\n    return () => {\n      window.clearTimeout(timer);\n    };\n  }, [pools, marketByMint]);\n\n  const midPriceInUSD = useCallback(\n    (mintAddress: string) => {\n      return getMidPrice(\n        marketByMint.get(mintAddress)?.marketInfo.address.toBase58(),\n        mintAddress\n      );\n    },\n    [marketByMint]\n  );\n\n  const subscribeToMarket = useCallback(\n    (mintAddress: string) => {\n      const info = marketByMint.get(mintAddress);\n      const market = cache.get(info?.marketInfo.address.toBase58() || \"\");\n      if (!market) {\n        return () => { };\n      }\n\n      const bid = market.info.bids.toBase58();\n      const ask = market.info.asks.toBase58();\n      accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) + 1);\n      accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) + 1);\n\n      // TODO: add event queue to query for last trade\n\n      return () => {\n        accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) - 1);\n        accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) - 1);\n\n        // cleanup\n        [...accountsToObserve.keys()].forEach((key) => {\n          if ((accountsToObserve.get(key) || 0) <= 0) {\n            accountsToObserve.delete(key);\n          }\n        });\n      };\n    },\n    [marketByMint]\n  );\n\n  return (\n    <MarketsContext.Provider\n      value={{\n        midPriceInUSD,\n        marketEmitter,\n        accountsToObserve,\n        marketByMint,\n        subscribeToMarket,\n      }}\n    >\n      {children}\n    </MarketsContext.Provider>\n  );\n}\n\nexport const useMarkets = () => {\n  const context = useContext(MarketsContext);\n  return context as MarketsContextState;\n};\n\nexport const useMidPriceInUSD = (mint: string) => {\n  const { midPriceInUSD, subscribeToMarket, marketEmitter } = useContext(\n    MarketsContext\n  ) as MarketsContextState;\n  const [price, setPrice] = useState<number>(0);\n\n  useEffect(() => {\n    let subscription = subscribeToMarket(mint);\n    const update = () => {\n      if (midPriceInUSD) {\n        setPrice(midPriceInUSD(mint));\n      }\n    };\n\n    update();\n    const dispose = marketEmitter.onMarket(update);\n\n    return () => {\n      subscription();\n      dispose();\n    };\n  }, [midPriceInUSD, mint]);\n\n  return { price, isBase: price === 1.0 };\n};\n\nexport const useEnrichedPools = (pools: PoolInfo[]) => {\n  const context = useContext(MarketsContext);\n  const { env } = useConnectionConfig();\n  const [enriched, setEnriched] = useState<any[]>([]);\n\n  const marketsByMint = context?.marketByMint;\n\n  useEffect(() => {\n    const mints = [...new Set([...marketsByMint?.keys()]).keys()];\n\n    const subscriptions = mints.map((m) => context?.subscribeToMarket(m));\n\n    const update = () => {\n      setEnriched(createEnrichedPools(pools, marketsByMint, env));\n    };\n\n    const dispose = context?.marketEmitter.onMarket(update);\n\n    update();\n\n    return () => {\n      dispose && dispose();\n      subscriptions.forEach((dispose) => dispose && dispose());\n    };\n  }, [env, pools, marketsByMint]);\n\n  return enriched;\n};\n\n// TODO:\n// 1. useEnrichedPools\n//      combines market and pools and user info\n// 2. ADD useMidPrice with event to refresh price\n// that could subscribe to multiple markets and trigger refresh of those markets only when there is active subscription\n\nfunction createEnrichedPools(\n  pools: PoolInfo[],\n  marketByMint: Map<string, SerumMarket> | undefined,\n  env: ENV\n) {\n  const TODAY = new Date();\n\n  if (!marketByMint) {\n    return [];\n  }\n\n  const result = pools\n    .filter((p) => p.pubkeys.holdingMints && p.pubkeys.holdingMints.length > 1)\n    .map((p, index) => {\n      const mints = (p.pubkeys.holdingMints || [])\n        .map((a) => a.toBase58())\n        .sort();\n      const indexA = mints[0] === p.pubkeys.holdingMints[0]?.toBase58() ? 0 : 1;\n      const indexB = indexA === 0 ? 1 : 0;\n      const accountA = cache.getAccount(p.pubkeys.holdingAccounts[indexA]);\n      const mintA = cache.getMint(mints[0]);\n      const accountB = cache.getAccount(p.pubkeys.holdingAccounts[indexB]);\n      const mintB = cache.getMint(mints[1]);\n\n      const baseReserveUSD =\n        getMidPrice(\n          marketByMint.get(mints[0])?.marketInfo.address.toBase58() || \"\",\n          mints[0]\n        ) * convert(accountA, mintA);\n      const quoteReserveUSD =\n        getMidPrice(\n          marketByMint.get(mints[1])?.marketInfo.address.toBase58() || \"\",\n          mints[1]\n        ) * convert(accountB, mintB);\n\n      const poolMint = cache.getMint(p.pubkeys.mint);\n      if (poolMint?.supply.eqn(0)) {\n        return;\n      }\n\n      let airdropYield = calculateAirdropYield(\n        p,\n        marketByMint,\n        baseReserveUSD,\n        quoteReserveUSD\n      );\n\n      let volume = 0;\n      let fees = 0;\n      let apy = airdropYield;\n      if (p.pubkeys.feeAccount) {\n        const feeAccount = cache.getAccount(p.pubkeys.feeAccount);\n\n        if (\n          poolMint &&\n          feeAccount &&\n          feeAccount.info.mint.toBase58() === p.pubkeys.mint.toBase58()\n        ) {\n          const feeBalance = feeAccount?.info.amount.toNumber();\n          const supply = poolMint?.supply.toNumber();\n\n          const ownedPct = feeBalance / supply;\n\n          const poolOwnerFees =\n            ownedPct * baseReserveUSD + ownedPct * quoteReserveUSD;\n          volume = poolOwnerFees / 0.0004;\n          fees = volume * 0.003;\n\n          if (fees !== 0) {\n            const baseVolume = (ownedPct * baseReserveUSD) / 0.0004;\n            const quoteVolume = (ownedPct * quoteReserveUSD) / 0.0004;\n\n            // Aproximation not true for all pools we need to fine a better way\n            const daysSinceInception = Math.floor(\n              (TODAY.getTime() - INITAL_LIQUIDITY_DATE.getTime()) /\n              (24 * 3600 * 1000)\n            );\n            const apy0 =\n              parseFloat(\n                ((baseVolume / daysSinceInception) * 0.003 * 356) as any\n              ) / baseReserveUSD;\n            const apy1 =\n              parseFloat(\n                ((quoteVolume / daysSinceInception) * 0.003 * 356) as any\n              ) / quoteReserveUSD;\n\n            apy = apy + Math.max(apy0, apy1);\n          }\n        }\n      }\n\n      const lpMint = cache.getMint(p.pubkeys.mint);\n\n      const name = getPoolName(env, p);\n      const link = `#/?pair=${getPoolName(env, p, false).replace(\"/\", \"-\")}`;\n\n      return {\n        key: p.pubkeys.account.toBase58(),\n        id: index,\n        name,\n        names: mints.map((m) => getTokenName(env, m)),\n        address: p.pubkeys.mint.toBase58(),\n        link,\n        mints,\n        liquidityA: convert(accountA, mintA),\n        liquidityAinUsd: baseReserveUSD,\n        liquidityB: convert(accountB, mintB),\n        liquidityBinUsd: quoteReserveUSD,\n        supply:\n          lpMint &&\n          (\n            lpMint?.supply.toNumber() / Math.pow(10, lpMint?.decimals || 0)\n          ).toFixed(9),\n        fees,\n        liquidity: baseReserveUSD + quoteReserveUSD,\n        volume,\n        apy: Number.isFinite(apy) ? apy : 0,\n        raw: p,\n      };\n    })\n    .filter((p) => p !== undefined);\n  return result;\n}\n\nfunction calculateAirdropYield(\n  p: PoolInfo,\n  marketByMint: Map<string, SerumMarket>,\n  baseReserveUSD: number,\n  quoteReserveUSD: number\n) {\n  let airdropYield = 0;\n  let poolWithAirdrop = POOLS_WITH_AIRDROP.find((drop) =>\n    drop.pool.equals(p.pubkeys.mint)\n  );\n  if (poolWithAirdrop) {\n    airdropYield = poolWithAirdrop.airdrops.reduce((acc, item) => {\n      const market = marketByMint.get(item.mint.toBase58())?.marketInfo.address;\n      if (market) {\n        const midPrice = getMidPrice(market?.toBase58(), item.mint.toBase58());\n\n        acc =\n          acc +\n          // airdrop yield\n          ((item.amount * midPrice) / (baseReserveUSD + quoteReserveUSD)) *\n          (365 / 30);\n      }\n\n      return acc;\n    }, 0);\n  }\n  return airdropYield;\n}\n\nconst OrderBookParser = (id: PublicKey, acc: AccountInfo<Buffer>) => {\n  const decoded = Orderbook.LAYOUT.decode(acc.data);\n\n  const details = {\n    pubkey: id,\n    account: {\n      ...acc,\n    },\n    info: decoded,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nconst getMidPrice = (marketAddress?: string, mintAddress?: string) => {\n  const SERUM_TOKEN = TOKEN_MINTS.find(\n    (a) => a.address.toBase58() === mintAddress\n  );\n\n  if (STABLE_COINS.has(SERUM_TOKEN?.name || \"\")) {\n    return 1.0;\n  }\n\n  if (!marketAddress) {\n    return 0.0;\n  }\n\n  const marketInfo = cache.get(marketAddress);\n  if (!marketInfo) {\n    return 0.0;\n  }\n\n  const decodedMarket = marketInfo.info;\n\n  const baseMintDecimals =\n    cache.get(decodedMarket.baseMint)?.info.decimals || 0;\n  const quoteMintDecimals =\n    cache.get(decodedMarket.quoteMint)?.info.decimals || 0;\n\n  const market = new Market(\n    decodedMarket,\n    baseMintDecimals,\n    quoteMintDecimals,\n    undefined,\n    decodedMarket.programId\n  );\n\n  const bids = cache.get(decodedMarket.bids)?.info;\n  const asks = cache.get(decodedMarket.asks)?.info;\n\n  if (bids && asks) {\n    const bidsBook = new Orderbook(market, bids.accountFlags, bids.slab);\n    const asksBook = new Orderbook(market, asks.accountFlags, asks.slab);\n\n    const bestBid = bidsBook.getL2(1);\n    const bestAsk = asksBook.getL2(1);\n\n    if (bestBid.length > 0 && bestAsk.length > 0) {\n      return (bestBid[0][0] + bestAsk[0][0]) / 2.0;\n    }\n  }\n\n  return 0;\n};\n\nconst refreshAccounts = async (connection: Connection, keys: string[]) => {\n  if (keys.length === 0) {\n    return [];\n  }\n\n  return getMultipleAccounts(connection, keys, \"single\").then(\n    ({ keys, array }) => {\n      return array.map((item, index) => {\n        const address = keys[index];\n        return cache.add(new PublicKey(address), item);\n      });\n    }\n  );\n};\n\ninterface SerumMarket {\n  marketInfo: {\n    address: PublicKey;\n    name: string;\n    programId: PublicKey;\n    deprecated: boolean;\n  };\n\n  // 1st query\n  marketAccount?: AccountInfo<Buffer>;\n\n  // 2nd query\n  mintBase?: AccountInfo<Buffer>;\n  mintQuote?: AccountInfo<Buffer>;\n  bidAccount?: AccountInfo<Buffer>;\n  askAccount?: AccountInfo<Buffer>;\n  eventQueue?: AccountInfo<Buffer>;\n\n  midPrice?: (mint?: PublicKey) => number;\n}\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport { PoolInfo } from \"../../models\";\nimport { useEnrichedPools } from \"./../../context/market\";\nimport echarts from \"echarts\";\nimport { formatUSD } from \"../../utils/utils\";\n\nexport const SupplyOverview = (props: {\n  mintAddress: string[];\n  pool?: PoolInfo;\n}) => {\n  const { pool } = props;\n  const pools = useMemo(() => (pool ? [pool] : []), [pool]);\n  const enriched = useEnrichedPools(pools);\n  const chartDiv = useRef<HTMLDivElement>(null);\n\n  // dispose chart\n  useEffect(() => {\n    const div = chartDiv.current;\n    return () => {\n      let instance = div && echarts.getInstanceByDom(div);\n      instance && instance.dispose();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!chartDiv.current || enriched.length === 0) {\n      return;\n    }\n\n    let instance = echarts.getInstanceByDom(chartDiv.current);\n    if (!instance) {\n      instance = echarts.init(chartDiv.current as any);\n    }\n\n    const data = [\n      {\n        name: enriched[0].names[0],\n        value: enriched[0].liquidityAinUsd,\n      },\n      {\n        name: enriched[0].names[1],\n        value: enriched[0].liquidityBinUsd,\n      },\n    ];\n\n    instance.setOption({\n      tooltip: {\n        trigger: \"item\",\n        formatter: function (params: any) {\n          var val = formatUSD.format(params.value);\n          return `${params.name}: \\n${val}`;\n        },\n      },\n      series: [\n        {\n          name: \"Liquidity\",\n          type: \"pie\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          label: {\n            fontSize: 14,\n            show: true,\n            formatter: function (params: any) {\n              var val = formatUSD.format(params.value);\n              return `${params.name}\\n${val}`;\n            },\n            color: \"rgba(255, 255, 255, 0.5)\",\n          },\n          itemStyle: {\n            normal: {\n              borderColor: \"#000\",\n            },\n          },\n          data,\n        },\n      ],\n    });\n  }, [enriched]);\n\n  if (enriched.length === 0) {\n    return null;\n  }\n\n  return <div ref={chartDiv} style={{ height: 150, width: \"100%\" }} />;\n};\n","import React, { useState } from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport \"./add.less\";\nimport { PoolConfig } from \"../../models\";\n\nconst Option = Select.Option;\n\nexport const DEFAULT_DENOMINATOR = 10_000;\n\nconst FeeInput = (props: {\n  numerator: number;\n  denominator: number;\n  set: (numerator: number, denominator: number) => void;\n}) => {\n  const [value, setValue] = useState(\n    ((props.numerator / props.denominator) * 100).toString()\n  );\n\n  return (\n    <div style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}>\n      <NumericInput\n        className=\"slippage-input\"\n        size=\"small\"\n        value={value}\n        style={{\n          width: 50,\n          fontSize: 14,\n          boxShadow: \"none\",\n          borderColor: \"transparent\",\n          outline: \"transpaernt\",\n        }}\n        onChange={(x: any) => {\n          setValue(x);\n\n          const val = parseFloat(x);\n          if (Number.isFinite(val)) {\n            const numerator = (val * DEFAULT_DENOMINATOR) / 100;\n            props.set(numerator, DEFAULT_DENOMINATOR);\n          }\n        }}\n      />\n      %\n    </div>\n  );\n};\n\n// sets fee in the pool to 0.3%\n// see for fees details: https://uniswap.org/docs/v2/advanced-topics/fees/\nexport const PoolConfigCard = (props: {\n  options: PoolConfig;\n  setOptions: (config: PoolConfig) => void;\n}) => {\n  const {\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n  } = props.options;\n\n  return (\n    <Card title=\"Pool configuration\">\n      <div className=\"pool-settings-grid\">\n        <>\n          <span>LPs Trading Fee:</span>\n          <FeeInput\n            numerator={tradeFeeNumerator}\n            denominator={tradeFeeDenominator}\n            set={(numerator, denominator) =>\n              props.setOptions({\n                ...props.options,\n                tradeFeeNumerator: numerator,\n                tradeFeeDenominator: denominator,\n              })\n            }\n          />\n        </>\n        <>\n          <span>Owner Trading Fee:</span>\n          <FeeInput\n            numerator={ownerTradeFeeNumerator}\n            denominator={ownerTradeFeeDenominator}\n            set={(numerator, denominator) =>\n              props.setOptions({\n                ...props.options,\n                ownerTradeFeeNumerator: numerator,\n                ownerTradeFeeDenominator: denominator,\n              })\n            }\n          />\n        </>\n        <>\n          <span>Withdraw Fee:</span>\n          <FeeInput\n            numerator={ownerWithdrawFeeNumerator}\n            denominator={ownerWithdrawFeeDenominator}\n            set={(numerator, denominator) =>\n              props.setOptions({\n                ...props.options,\n                ownerWithdrawFeeNumerator: numerator,\n                ownerWithdrawFeeDenominator: denominator,\n              })\n            }\n          />\n        </>\n        <>\n          <span>Curve Type:</span>\n          <Select\n            defaultValue=\"0\"\n            style={{ width: 200 }}\n            onChange={(val) =>\n              props.setOptions({\n                ...props.options,\n                curveType: parseInt(val) as any,\n              })\n            }\n          >\n            <Option value=\"0\">Constant Product</Option>\n            <Option value=\"1\">Flat</Option>\n          </Select>\n        </>\n      </div>\n    </Card>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  addLiquidity,\n  usePoolForBasket,\n  PoolOperation,\n} from \"../../utils/pools\";\nimport { Button, Dropdown, Popover } from \"antd\";\nimport { useWallet } from \"../../utils/wallet\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { notify } from \"../../utils/notifications\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { DEFAULT_DENOMINATOR, PoolConfigCard } from \"./config\";\nimport \"./add.less\";\nimport { PoolConfig } from \"../../models\";\nimport { SWAP_PROGRAM_OWNER_FEE_ADDRESS } from \"../../utils/ids\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport {\n  CREATE_POOL_LABEL,\n  ADD_LIQUIDITY_LABEL,\n  generateActionLabel,\n} from \"../labels\";\nimport { PoolAddress } from \"./address\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const AddToLiquidity = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { env } = useConnectionConfig();\n  const [options, setOptions] = useState<PoolConfig>({\n    curveType: 0,\n    tradeFeeNumerator: 25,\n    tradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerTradeFeeNumerator: 5,\n    ownerTradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerWithdrawFeeNumerator: 0,\n    ownerWithdrawFeeDenominator: DEFAULT_DENOMINATOR,\n  });\n\n  const executeAction = !connected\n    ? wallet.connect\n    : async () => {\n        if (A.account && B.account && A.mint && B.mint) {\n          setPendingTx(true);\n          const components = [\n            {\n              account: A.account,\n              mintAddress: A.mintAddress,\n              amount: A.convertAmount(),\n            },\n            {\n              account: B.account,\n              mintAddress: B.mintAddress,\n              amount: B.convertAmount(),\n            },\n          ];\n\n          addLiquidity(connection, wallet, components, slippage, pool, options)\n            .then(() => {\n              setPendingTx(false);\n            })\n            .catch((e) => {\n              console.log(\"Transaction failed\", e);\n              notify({\n                description:\n                  \"Please try again and approve transactions from your wallet\",\n                message: \"Adding liquidity cancelled.\",\n                type: \"error\",\n              });\n              setPendingTx(false);\n            });\n        }\n      };\n\n  const hasSufficientBalance = A.sufficientBalance() && B.sufficientBalance();\n\n  const createPoolButton = SWAP_PROGRAM_OWNER_FEE_ADDRESS ? (\n    <Button\n      className=\"add-button\"\n      onClick={executeAction}\n      disabled={\n        connected &&\n        (pendingTx || !A.account || !B.account || A.account === B.account)\n      }\n      type=\"primary\"\n      size=\"large\"\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Button>\n  ) : (\n    <Dropdown.Button\n      className=\"add-button\"\n      onClick={executeAction}\n      disabled={\n        connected &&\n        (pendingTx || !A.account || !B.account || A.account === B.account)\n      }\n      type=\"primary\"\n      size=\"large\"\n      overlay={<PoolConfigCard options={options} setOptions={setOptions} />}\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Dropdown.Button>\n  );\n\n  return (\n    <>\n      <div className=\"input-card\">\n        <Popover\n          trigger=\"hover\"\n          content={\n            <div style={{ width: 300 }}>\n              Liquidity providers earn a fixed percentage fee on all trades\n              proportional to their share of the pool. Fees are added to the\n              pool, accrue in real time and can be claimed by withdrawing your\n              liquidity.\n            </div>\n          }\n        >\n          <Button type=\"text\">Read more about providing liquidity.</Button>\n        </Popover>\n\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.Add);\n            if (A.amount !== val) {\n              setLastTypedAccount(A.mintAddress);\n            }\n            A.setAmount(val);\n          }}\n          amount={A.amount}\n          mint={A.mintAddress}\n          onMintChange={(item) => {\n            A.setMint(item);\n          }}\n        />\n        <div>+</div>\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.Add);\n            if (B.amount !== val) {\n              setLastTypedAccount(B.mintAddress);\n            }\n            B.setAmount(val);\n          }}\n          amount={B.amount}\n          mint={B.mintAddress}\n          onMintChange={(item) => {\n            B.setMint(item);\n          }}\n        />\n        <SupplyOverview\n          mintAddress={[A.mintAddress, B.mintAddress]}\n          pool={pool}\n        />\n        <PoolAddress\n          pool={pool}\n          style={{ marginBottom: 10 }}\n          showLabel={true}\n        />\n      </div>\n      {pool && (\n        <Button\n          className=\"add-button\"\n          type=\"primary\"\n          size=\"large\"\n          onClick={executeAction}\n          disabled={\n            connected &&\n            (pendingTx ||\n              !A.account ||\n              !B.account ||\n              A.account === B.account ||\n              !hasSufficientBalance)\n          }\n        >\n          {generateActionLabel(ADD_LIQUIDITY_LABEL, connected, env, A, B)}\n          {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n        </Button>\n      )}\n      {!pool && createPoolButton}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { useSlippageConfig } from \"./../../utils/connection\";\nimport { NumericInput } from \"./../numericInput\";\n\nexport const Slippage = () => {\n  const { slippage, setSlippage } = useSlippageConfig();\n  const slippagePct = slippage * 100;\n  const [value, setValue] = useState(slippagePct.toString());\n\n  useEffect(() => {\n    setValue(slippagePct.toString());\n  }, [slippage, slippagePct]);\n\n  const isSelected = (val: number) => {\n    return val === slippagePct ? \"primary\" : \"default\";\n  };\n\n  const itemStyle: React.CSSProperties = {\n    margin: 5,\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      {[0.1, 0.5, 1.0].map((item) => {\n        return (\n          <Button\n            key={item.toString()}\n            style={itemStyle}\n            type={isSelected(item)}\n            onClick={() => setSlippage(item / 100.0)}\n          >\n            {item}%\n          </Button>\n        );\n      })}\n      <div style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}>\n        <NumericInput\n          className=\"slippage-input\"\n          size=\"small\"\n          placeholder={value}\n          value={value}\n          style={{\n            width: 50,\n            fontSize: 14,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          onChange={(x: any) => {\n            setValue(x);\n            const newValue = parseFloat(x) / 100.0;\n            if (Number.isFinite(newValue)) {\n              setSlippage(newValue);\n            }\n          }}\n        />\n        %\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport { ENDPOINTS, useConnectionConfig } from \"../utils/connection\";\nimport { useWallet, WALLET_PROVIDERS } from \"../utils/wallet\";\nimport { Slippage } from \"./slippage\";\n\nexport const Settings = () => {\n  const { providerUrl, setProvider } = useWallet();\n  const { endpoint, setEndpoint } = useConnectionConfig();\n\n  return (\n    <>\n      <div>\n        Transactions: Settings:\n        <div>\n          Slippage:\n          <Slippage />\n        </div>\n      </div>\n      <div style={{ display: \"grid\" }}>\n        Network:{\" \"}\n        <Select\n          onSelect={setEndpoint}\n          value={endpoint}\n          style={{ marginRight: 8 }}\n        >\n          {ENDPOINTS.map(({ name, endpoint }) => (\n            <Select.Option value={endpoint} key={endpoint}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n      </div>\n      <div style={{ display: \"grid\" }}>\n        Wallet:{\" \"}\n        <Select onSelect={setProvider} value={providerUrl}>\n          {WALLET_PROVIDERS.map(({ name, url }) => (\n            <Select.Option value={url} key={url}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Button } from \"antd\";\n\nimport { removeLiquidity } from \"../../utils/pools\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { useConnection } from \"../../utils/connection\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport { notify } from \"../../utils/notifications\";\n\nexport const RemoveLiquidity = (props: {\n  instance: { account: TokenAccount; pool: PoolInfo };\n}) => {\n  const { account, pool } = props.instance;\n  const [pendingTx, setPendingTx] = useState(false);\n  const { wallet } = useWallet();\n  const connection = useConnection();\n\n  const onRemove = async () => {\n    try {\n      setPendingTx(true);\n      // TODO: calculate percentage based on user input\n      let liquidityAmount = account.info.amount.toNumber();\n      await removeLiquidity(connection, wallet, liquidityAmount, account, pool);\n    } catch {\n      notify({\n        description:\n          \"Please try again and approve transactions from your wallet\",\n        message: \"Removing liquidity cancelled.\",\n        type: \"error\",\n      });\n    } finally {\n      setPendingTx(false);\n      // TODO: force refresh of pool accounts?\n    }\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={onRemove} disabled={pendingTx}>\n        Remove\n      </Button>\n    </>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { ConfigProvider, Empty } from \"antd\";\nimport { useOwnedPools } from \"../../utils/pools\";\nimport { RemoveLiquidity } from \"./remove\";\nimport { useMint } from \"../../utils/accounts\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport \"./view.less\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { formatUSD } from \"../../utils/utils\";\n\nconst PoolItem = (props: {\n  item: { pool: PoolInfo; isFeeAccount: boolean; account: TokenAccount };\n  poolDetails: any;\n}) => {\n  const { A, B } = useCurrencyPairState();\n  const item = props.item;\n  const mint = useMint(item.account.info.mint.toBase58());\n  const amount =\n    item.account.info.amount.toNumber() / Math.pow(10, mint?.decimals || 0);\n\n  const supply = mint?.supply.toNumber() || 0;\n  const poolContribution = item.account.info.amount.toNumber() / supply;\n  const contributionInUSD = poolContribution * props.poolDetails?.liquidity;\n  const feesInUSD = poolContribution * props.poolDetails?.fees;\n\n  // amount / supply * liquidity\n\n  if (!amount) {\n    return null;\n  }\n\n  const setPair = () => {\n    A.setMint(props.item.pool.pubkeys.holdingMints[0]?.toBase58());\n    B.setMint(props.item.pool.pubkeys.holdingMints[1]?.toBase58());\n  };\n\n  const sorted = item.pool.pubkeys.holdingMints.map((a) => a.toBase58()).sort();\n\n  if (item) {\n    return (\n      <div\n        className=\"pool-item-row\"\n        onClick={setPair}\n        title={`LP Token: ${props.item.pool.pubkeys.mint.toBase58()}`}\n      >\n        <PoolIcon\n          mintA={sorted[0]}\n          mintB={sorted[1]}\n          style={{ marginLeft: \"0.5rem\" }}\n        />\n        <div className=\"pool-item-name\">{props.poolDetails?.name}</div>\n        <div className=\"pool-item-amount\">\n          {formatUSD.format(contributionInUSD)}\n        </div>\n        <div className=\"pool-item-amount\">{formatUSD.format(feesInUSD)}</div>\n        <div className=\"pool-item-type\" title=\"Fee account\">\n          {item.isFeeAccount ? \" (F) \" : \" \"}\n        </div>\n        <RemoveLiquidity instance={item} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport const PoolAccounts = () => {\n  const pools = useOwnedPools();\n  const userPools = useMemo(() => {\n    return pools.map((p) => p.pool);\n  }, [pools]);\n\n  const enriched = useEnrichedPools(userPools);\n\n  return (\n    <>\n      <div>Your Liquidity</div>\n      <ConfigProvider\n        renderEmpty={() => (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description=\"No liquidity found.\"\n          />\n        )}\n      >\n        <div className=\"pools-grid\">\n          <div className=\"pool-item-header\">\n            <div style={{ width: 48 }} />\n            <div className=\"pool-item-name\">Pool</div>\n            <div className=\"pool-item-amount\">Liquidity</div>\n            <div className=\"pool-item-amount\">Fees</div>\n            <div className=\"pool-item-type\" />\n            <div />\n          </div>\n          {pools.map((p) => (\n            <PoolItem\n              key={p?.account.pubkey.toBase58()}\n              item={p as any}\n              poolDetails={enriched.find((e) => e.raw === p.pool)}\n            />\n          ))}\n        </div>\n      </ConfigProvider>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useWallet } from \"./../utils/wallet\";\nimport { shortenAddress } from \"./../utils/utils\";\nimport { Identicon } from \"./identicon\";\nimport { useNativeAccount } from \"./../utils/accounts\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nexport const AccountInfo = (props: {}) => {\n  const { wallet } = useWallet();\n  const { account } = useNativeAccount();\n\n  if (!wallet || !wallet.publicKey) {\n    return null;\n  }\n\n  return (\n    <div className=\"wallet-wrapper\">\n      <span>\n        {((account?.lamports || 0) / LAMPORTS_PER_SOL).toFixed(6)} SOL\n      </span>\n      <div className=\"wallet-key\">\n        {shortenAddress(`${wallet.publicKey}`)}\n        <Identicon\n          address={wallet.publicKey.toBase58()}\n          style={{ marginLeft: \"0.5rem\" }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Button, Menu, Popover } from \"antd\";\nimport { PoolAccounts } from \"./pool/view\";\nimport { useWallet } from \"../utils/wallet\";\nimport { AccountInfo } from \"./accountInfo\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nexport const AppBar = (props: { left?: JSX.Element; right?: JSX.Element }) => {\n  const { connected, wallet } = useWallet();\n  const location = useLocation();\n\n  const TopBar = (\n    <div className=\"App-Bar\">\n      <div className=\"App-Bar-left\">\n        <div className=\"App-logo\" />\n        <Menu mode=\"horizontal\" selectedKeys={[location.pathname]}>\n          <Menu.Item key=\"/\">\n            <Link\n              to={{\n                pathname: \"/\",\n              }}\n            >\n              Swap\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/info\">\n            <Link\n              to={{\n                pathname: \"/info\",\n              }}\n            >\n              Charts\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"trade\">\n            <a\n              href={\"https://dex.projectserum.com\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Trade\n              <sup>↗</sup>\n            </a>\n          </Menu.Item>\n          <Menu.Item key=\"help\">\n            <a\n              href={\"https://serum-academy.com/en/serum-swap/\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Help\n              <sup>↗</sup>\n            </a>\n          </Menu.Item>\n        </Menu>\n        {props.left}\n      </div>\n      <div className=\"App-Bar-right\">\n        <AccountInfo />\n        {connected && (\n          <Popover\n            placement=\"bottomRight\"\n            content={<PoolAccounts />}\n            trigger=\"click\"\n          >\n            <Button type=\"text\">My Pools</Button>\n          </Popover>\n        )}\n        <div>\n          {!connected && (\n            <Button\n              type=\"text\"\n              size=\"large\"\n              onClick={connected ? wallet.disconnect : wallet.connect}\n              style={{ color: \"#2abdd2\" }}\n            >\n              Connect\n            </Button>\n          )}\n          {connected && (\n            <Popover\n              placement=\"bottomRight\"\n              title=\"Wallet public key\"\n              trigger=\"click\"\n            ></Popover>\n          )}\n        </div>\n        {props.right}\n      </div>\n    </div>\n  );\n\n  return TopBar;\n};\n","import React, { useState } from \"react\";\nimport { Button, Card, Popover } from \"antd\";\nimport { TradeEntry } from \"./trade\";\nimport { AddToLiquidity } from \"./pool/add\";\nimport { Settings } from \"./settings\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { AppBar } from \"./appBar\";\n\nexport const ExchangeView = (props: {}) => {\n  const tabStyle: React.CSSProperties = { width: 120 };\n  const tabList = [\n    {\n      key: \"trade\",\n      tab: <div style={tabStyle}>Trade</div>,\n      render: () => {\n        return <TradeEntry />;\n      },\n    },\n    {\n      key: \"pool\",\n      tab: <div style={tabStyle}>Pool</div>,\n      render: () => {\n        return <AddToLiquidity />;\n      },\n    },\n  ];\n\n  const [activeTab, setActiveTab] = useState(tabList[0].key);\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <Card\n        className=\"exchange-card\"\n        headStyle={{ padding: 0 }}\n        tabList={tabList}\n        tabProps={{\n          tabBarGutter: 0,\n        }}\n        activeTabKey={activeTab}\n        onTabChange={(key) => {\n          setActiveTab(key);\n        }}\n      >\n        {tabList.find((t) => t.key === activeTab)?.render()}\n      </Card>\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Button, Popover, Table } from \"antd\";\nimport { AppBar } from \"./../appBar\";\nimport { Settings } from \"../settings\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { Input } from \"antd\";\nimport \"./styles.less\";\nimport echarts from \"echarts\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { usePools } from \"../../utils/pools\";\nimport { formatPct, formatUSD } from \"../../utils/utils\";\nimport { PoolAddress } from \"../pool/address\";\n\nconst { Search } = Input;\n\nconst FlashText = (props: { text: string; val: number }) => {\n  const [activeClass, setActiveClass] = useState(\"\");\n  const [value] = useState(props.val);\n  useEffect(() => {\n    if (props.val !== value) {\n      setActiveClass(props.val > value ? \"flash-positive\" : \"flash-negative\");\n\n      setTimeout(() => setActiveClass(\"\"), 200);\n    }\n  }, [props.text, props.val, value]);\n\n  return <span className={activeClass}>{props.text}</span>;\n};\n\ninterface Totals {\n  liquidity: number;\n  volume: number;\n  fees: number;\n}\n\nexport const ChartsView = React.memo(() => {\n  const [search, setSearch] = useState<string>(\"\");\n  const [totals, setTotals] = useState<Totals>(() => ({\n    liquidity: 0,\n    volume: 0,\n    fees: 0,\n  }));\n  const chartDiv = useRef<HTMLDivElement>(null);\n  const echartsRef = useRef<any>(null);\n  const { pools } = usePools();\n  const enriched = useEnrichedPools(pools);\n  // separate connection for market updates\n\n  useEffect(() => {\n    if (chartDiv.current) {\n      echartsRef.current = echarts.init(chartDiv.current);\n    }\n\n    return () => {\n      echartsRef.current.dispose();\n    };\n  }, []);\n\n  // TODO: display user percent in the pool\n  // const { ownedPools } = useOwnedPools();\n\n  // TODO: create cache object with layout type, get, query, add\n\n  let searchRegex: RegExp;\n  try {\n    searchRegex = new RegExp(search, \"i\");\n  } catch {\n    // ignore bad regex typed by user\n  }\n\n  const updateChart = useCallback(() => {\n    if (echartsRef.current) {\n      echartsRef.current.setOption({\n        series: [\n          {\n            name: \"Liquidity\",\n            type: \"treemap\",\n            top: 0,\n            bottom: 10,\n            left: 30,\n            right: 30,\n            animation: false,\n            // visibleMin: 300,\n            label: {\n              show: true,\n              formatter: \"{b}\",\n            },\n            itemStyle: {\n              normal: {\n                borderColor: \"#000\",\n              },\n            },\n            breadcrumb: {\n              show: false,\n            },\n            data: enriched\n              .filter(\n                (row) => !search || !searchRegex || searchRegex.test(row.name)\n              )\n              .map((row) => {\n                return {\n                  value: row.liquidity,\n                  name: row.name,\n                  path: `Liquidity/${row.name}`,\n                  data: row,\n                };\n              }),\n          },\n        ],\n      });\n    }\n  }, [enriched, echartsRef.current, search]);\n\n  // Updates total values\n  useEffect(() => {\n    setTotals(\n      enriched.reduce(\n        (acc, item) => {\n          acc.liquidity = acc.liquidity + item.liquidity;\n          acc.volume = acc.volume + item.volume;\n          acc.fees = acc.fees + item.fees;\n          return acc;\n        },\n        { liquidity: 0, volume: 0, fees: 0 } as Totals\n      )\n    );\n\n    updateChart();\n  }, [enriched, updateChart, search]);\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: {},\n          },\n          children: (\n            <div style={{ display: \"flex\" }}>\n              <PoolIcon mintA={record.mints[0]} mintB={record.mints[1]} />\n              <a href={record.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                {text}\n              </a>\n            </div>\n          ),\n        };\n      },\n    },\n    {\n      title: \"Liquidity\",\n      dataIndex: \"liquidity\",\n      key: \"liquidity\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <FlashText\n              text={formatUSD.format(record.liquidity)}\n              val={record.liquidity}\n            />\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.liquidity - b.liquidity,\n      defaultSortOrder: \"descend\" as any,\n    },\n    {\n      title: \"Supply\",\n      dataIndex: \"supply\",\n      key: \"supply\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: <FlashText text={text} val={record.supply} />,\n        };\n      },\n      sorter: (a: any, b: any) => a.supply - b.supply,\n    },\n    {\n      title: \"Volume\",\n      dataIndex: \"volume\",\n      key: \"volume\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <FlashText\n              text={formatUSD.format(record.volume)}\n              val={record.volume}\n            />\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.volume - b.volume,\n    },\n    {\n      title: \"Fees\",\n      dataIndex: \"fees\",\n      key: \"fees\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <FlashText text={formatUSD.format(record.fees)} val={record.fees} />\n          ),\n        };\n      },\n    },\n    {\n      title: \"APY\",\n      dataIndex: \"apy\",\n      key: \"apy\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: formatPct.format(record.apy),\n        };\n      },\n      sorter: (a: any, b: any) => a.apy - b.apy,\n    },\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      key: \"address\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { fontFamily: \"monospace\" } as React.CSSProperties,\n          },\n          children: <PoolAddress pool={record.raw} />,\n        };\n      },\n    },\n  ];\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <div className=\"info-header\">\n        <h1>Liquidity: {formatUSD.format(totals.liquidity)}</h1>\n        <h1>Volume: {formatUSD.format(totals.volume)}</h1>\n        <Search\n          className=\"search-input\"\n          placeholder=\"Filter\"\n          type=\"search\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          onSearch={(value) => setSearch(value)}\n          style={{ width: 200 }}\n        />\n      </div>\n      <div ref={chartDiv} style={{ height: \"250px\", width: \"100%\" }} />\n      <Table\n        dataSource={enriched.filter(\n          (row) => !search || !searchRegex || searchRegex.test(row.name)\n        )}\n        columns={columns}\n        size=\"small\"\n        pagination={{ pageSize: 10 }}\n      />\n    </>\n  );\n});\n","import { HashRouter, Route } from \"react-router-dom\";\nimport React from \"react\";\nimport { ExchangeView } from \"./components/exchange\";\nimport { ChartsView } from \"./components/charts\";\n\nimport { WalletProvider } from \"./utils/wallet\";\nimport { ConnectionProvider } from \"./utils/connection\";\nimport { AccountsProvider } from \"./utils/accounts\";\nimport { CurrencyPairProvider } from \"./utils/currencyPair\";\nimport { MarketProvider } from \"./context/market\";\n\nexport function Routes() {\n  return (\n    <>\n      <HashRouter basename={\"/\"}>\n        <ConnectionProvider>\n          <WalletProvider>\n            <AccountsProvider>\n              <MarketProvider>\n                <CurrencyPairProvider>\n                  <Route exact path=\"/\" component={ExchangeView} />\n                  <Route exact path=\"/info\" component={() => <ChartsView />} />\n                </CurrencyPairProvider>\n              </MarketProvider>\n            </AccountsProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </HashRouter>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.less\";\nimport GitHubButton from \"react-github-btn\";\nimport { Routes } from \"./routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Banner\">\n        <div className=\"Banner-description\">\n          Swap is unaudited software. Use at your own risk.\n        </div>\n      </div>\n      <Routes />\n      <div className=\"social-buttons\">\n        <GitHubButton\n          href=\"https://github.com/project-serum/oyster-swap\"\n          data-color-scheme=\"no-preference: light; light: light; dark: light;\"\n          data-icon=\"octicon-star\"\n          data-size=\"large\"\n          data-show-count={true}\n          aria-label=\"Star solana-labs/oyster-swap on GitHub\"\n        >\n          Star\n        </GitHubButton>\n        <GitHubButton\n          href=\"https://github.com/project-serum/oyster-swap/fork\"\n          data-color-scheme=\"no-preference: light; light: light; dark: light;\"\n          data-size=\"large\"\n          aria-label=\"Fork project-serum/oyster-swap on GitHub\"\n        >\n          Fork\n        </GitHubButton>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useConnection } from \"./connection\";\nimport { useWallet } from \"./wallet\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { programIds, SWAP_HOST_FEE_ADDRESS, WRAPPED_SOL_MINT } from \"./ids\";\nimport { AccountLayout, u64, MintInfo, MintLayout } from \"@solana/spl-token\";\nimport { usePools } from \"./pools\";\nimport { TokenAccount, PoolInfo } from \"./../models\";\nimport { notify } from \"./notifications\";\nimport { chunks } from \"./utils\";\nimport { EventEmitter } from \"./eventEmitter\";\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst accountEmitter = new EventEmitter();\n\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\nconst pendingAccountCalls = new Map<string, Promise<TokenAccount>>();\nconst accountsCache = new Map<string, TokenAccount>();\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\n\nconst getAccountInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n\n  return tokenAccountFactory(pubKey, info);\n};\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport interface ParsedAccountBase {\n  pubkey: PublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unkown\n}\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nexport type AccountParser = (\n  pubkey: PublicKey,\n  data: AccountInfo<Buffer>\n) => ParsedAccountBase;\nexport const MintParser = (pubKey: PublicKey, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = tokenAccountFactory;\n\nexport const GenericAccountParser = (\n  pubKey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = connection.getAccountInfo(id).then((data) => {\n      if (!data) {\n        throw new Error(\"Account not found\");\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (id: PublicKey, obj: AccountInfo<Buffer>, parser?: AccountParser) => {\n    const address = id.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        \"Deserializer needs to be registered or passed as a parameter\"\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(id, obj);\n    genericCache.set(address, account);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  registerParser: (pubkey: PublicKey, parser: AccountParser) => {\n    keyToAccountParser.set(pubkey.toBase58(), parser);\n  },\n\n  queryAccount: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = accountsCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingAccountCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getAccountInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n      accountsCache.set(address, data);\n      return data;\n    }) as Promise<TokenAccount>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  addAccount: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const account = tokenAccountFactory(pubKey, obj);\n    accountsCache.set(account.pubkey.toBase58(), account);\n    return account;\n  },\n  getAccount: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return accountsCache.get(key);\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    mintCache.set(pubKey.toBase58(), mint);\n    return mint;\n  },\n};\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean\n) => {\n  for (const account of accountsCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nfunction tokenAccountFactory(pubKey: PublicKey, info: AccountInfo<Buffer>) {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeAccount(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as TokenAccount;\n\n  return details;\n}\n\nfunction wrapNativeAccount(\n  pubkey: PublicKey,\n  account?: AccountInfo<Buffer>\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      mint: WRAPPED_SOL_MINT,\n      owner: pubkey,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { wallet } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n  useEffect(() => {\n    if (!connection || !wallet?.publicKey) {\n      return;\n    }\n\n    connection.getAccountInfo(wallet.publicKey).then((acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n    connection.onAccountChange(wallet.publicKey, (acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n  }, [setNativeAccount, wallet, wallet.publicKey, connection]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are update via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n  accounts.value\n    .map((info) => {\n      const data = deserializeAccount(info.account.data);\n      // need to query for mint to get decimals\n\n      // TODO: move to web3.js for decoding on the client side... maybe with callback\n      const details = {\n        pubkey: info.pubkey,\n        account: {\n          ...info.account,\n        },\n        info: data,\n      } as TokenAccount;\n\n      return details;\n    })\n    .forEach((acc) => {\n      accountsCache.set(acc.pubkey.toBase58(), acc);\n    });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const { pools } = usePools();\n\n  const selectUserAccounts = useCallback(() => {\n    return [...accountsCache.values()].filter(\n      (a) => a.info.owner.toBase58() === wallet.publicKey.toBase58()\n    );\n  }, [wallet]);\n\n  useEffect(() => {\n    setUserAccounts(\n      [\n        wrapNativeAccount(wallet.publicKey, nativeAccount),\n        ...tokenAccounts,\n      ].filter((a) => a !== undefined) as TokenAccount[]\n    );\n  }, [nativeAccount, wallet, tokenAccounts]);\n\n  useEffect(() => {\n    if (!connection || !wallet || !wallet.publicKey) {\n      setTokenAccounts([]);\n    } else {\n      // cache host accounts to avoid query during swap\n      precacheUserTokenAccounts(connection, SWAP_HOST_FEE_ADDRESS);\n\n      precacheUserTokenAccounts(connection, wallet.publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter. discuss filter syntax\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        (info) => {\n          // TODO: fix type in web3.js\n          const id = (info.accountId as unknown) as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n            // TODO: move to web3.js for decoding on the client side... maybe with callback\n            const details = {\n              pubkey: new PublicKey((info.accountId as unknown) as string),\n              account: {\n                ...info.accountInfo,\n              },\n              info: data,\n            } as TokenAccount;\n\n            if (\n              PRECACHED_OWNERS.has(details.info.owner.toBase58()) ||\n              accountsCache.has(id)\n            ) {\n              accountsCache.set(id, details);\n              setTokenAccounts(selectUserAccounts());\n              accountEmitter.raiseAccountUpdated(id);\n            }\n          } else if (info.accountInfo.data.length === MintLayout.span) {\n            if (mintCache.has(id)) {\n              const data = Buffer.from(info.accountInfo.data);\n              const mint = deserializeMint(data);\n              mintCache.set(id, mint);\n              accountEmitter.raiseAccountUpdated(id);\n            }\n\n            accountEmitter.raiseAccountUpdated(id);\n          }\n\n          if (genericCache.has(id)) {\n            cache.add(new PublicKey(id), info.accountInfo);\n          }\n        },\n        \"singleGossip\"\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, connected, wallet?.publicKey]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        pools,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map((chunk) =>\n      getMultipleAccountsCore(connection, chunk, commitment)\n    )\n  );\n\n  const array = result\n    .map(\n      (a) =>\n        a.array.map((acc) => {\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], \"base64\"),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[]\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const args = connection._buildArgs([keys], commitment, \"base64\");\n\n  const unsafeRes = await connection._rpcRequest(\"getMultipleAccounts\", args);\n  if (unsafeRes.error) {\n    throw new Error(\n      \"failed to get info about account \" + unsafeRes.error.message\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(id?: string) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .queryMint(connection, id)\n      .then(setMint)\n      .catch((err) =>\n        notify({\n          message: err.message,\n          type: \"error\",\n        })\n      );\n\n    const dispose = accountEmitter.onAccount((e) => {\n      const event = e;\n      if (event.id === id) {\n        cache.queryMint(connection, id).then(setMint);\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useUserAccounts() {\n  const context = useContext(AccountsContext);\n  return {\n    userAccounts: context.userAccounts as TokenAccount[],\n  };\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache.queryAccount(connection, key).catch((err) =>\n          notify({\n            message: err.message,\n            type: \"error\",\n          })\n        );\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = accountEmitter.onAccount((e) => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\nexport function useCachedPool() {\n  const context = useContext(AccountsContext);\n  return {\n    pools: context.pools as PoolInfo[],\n  };\n}\n\nexport const useSelectedAccount = (account: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.pubkey.toBase58() === account\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\nexport const useAccountByMint = (mint: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.info.mint.toBase58() === mint\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\n// TODO: expose in spl package\nconst deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nconst deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error(\"Not a valid Mint\");\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { shortenAddress } from \"./../utils/utils\";\n\nexport const ExplorerLink = (props: {\n  address: string;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n}) => {\n  const { address, type, code } = props;\n\n  if (!address) {\n    return null;\n  }\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      // eslint-disable-next-line react/jsx-no-target-blank\n      target=\"_blank\"\n      title={address}\n    >\n      {code ? (\n        <Typography.Text code>{shortenAddress(address, 9)}</Typography.Text>\n      ) : (\n          shortenAddress(address, 9)\n        )}\n    </a>\n  );\n};\n","import { EventEmitter as Emitter } from \"eventemitter3\";\n\nexport class AccountUpdateEvent {\n  static type = \"AccountUpdate\";\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = \"MarketUpdate\";\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onAccount(callback: (args: AccountUpdateEvent) => void) {\n    this.emitter.on(AccountUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(AccountUpdateEvent.type, callback);\n  }\n\n  raiseAccountUpdated(id: string) {\n    this.emitter.emit(AccountUpdateEvent.type, new AccountUpdateEvent(id));\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n}\n","import { useCallback, useState } from \"react\";\nimport { MintInfo } from \"@solana/spl-token\";\n\nimport PopularTokens from \"./token-list.json\";\nimport { ENV } from \"./connection\";\nimport { PoolInfo, TokenAccount } from \"./../models\";\n\nexport interface KnownToken {\n  tokenSymbol: string;\n  tokenName: string;\n  icon: string;\n  mintAddress: string;\n}\n\nconst AddressToToken = Object.keys(PopularTokens).reduce((map, key) => {\n  const tokens = PopularTokens[key as ENV] as KnownToken[];\n  const knownMints = tokens.reduce((map, item) => {\n    map.set(item.mintAddress, item);\n    return map;\n  }, new Map<string, KnownToken>());\n\n  map.set(key as ENV, knownMints);\n\n  return map;\n}, new Map<ENV, Map<string, KnownToken>>());\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    (newState) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newState));\n      }\n    },\n    [state, key]\n  );\n\n  return [state, setLocalStorageState];\n}\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  env: ENV,\n  mintAddress: string,\n  shorten = true\n): string {\n  const knownSymbol = AddressToToken.get(env)?.get(mintAddress)?.tokenSymbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenIcon(\n  env: ENV,\n  mintAddress: string\n): string | undefined {\n  return AddressToToken.get(env)?.get(mintAddress)?.icon;\n}\n\nexport function getPoolName(env: ENV, pool: PoolInfo, shorten = true) {\n  const sorted = pool.pubkeys.holdingMints.map((a) => a.toBase58()).sort();\n  return sorted.map((item) => getTokenName(env, item, shorten)).join(\"/\");\n}\n\nexport function isKnownMint(env: ENV, mintAddress: string) {\n  return !!AddressToToken.get(env)?.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set([\"USDC\", \"wUSDC\", \"USDT\"]);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function convert(\n  account?: TokenAccount,\n  mint?: MintInfo,\n  rate: number = 1.0\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return (account.info.amount?.toNumber() / precision) * rate;\n}\n\nvar SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nconst format = (val: number, precision: number, abbr: boolean) =>\n  abbr ? abbreviateNumber(val, precision) : val.toFixed(precision);\n\nexport function formatTokenAmount(\n  account?: TokenAccount,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = \"\",\n  suffix = \"\",\n  precision = 6,\n  abbr = false\n): string {\n  if (!account) {\n    return \"\";\n  }\n\n  return `${[prefix]}${format(\n    convert(account, mint, rate),\n    precision,\n    abbr\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\nexport const formatPct = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n","import { useLocalStorageState } from \"./utils\";\nimport {\n  Account,\n  clusterApiUrl,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { setProgramIds } from \"./ids\";\nimport { notify } from \"./notifications\";\nimport { ExplorerLink } from \"../components/explorerLink\";\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://solana-api.projectserum.com/\",\n  },\n  { name: \"testnet\" as ENV, endpoint: clusterApiUrl(\"testnet\") },\n  { name: \"devnet\" as ENV, endpoint: clusterApiUrl(\"devnet\") },\n  { name: \"localnet\" as ENV, endpoint: \"http://127.0.0.1:8899\" },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\nconst DEFAULT_SLIPPAGE = 0.25;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  slippage: number;\n  setSlippage: (val: number) => void;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  slippage: DEFAULT_SLIPPAGE,\n  setSlippage: (val: number) => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpts\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const [slippage, setSlippage] = useLocalStorageState(\n    \"slippage\",\n    DEFAULT_SLIPPAGE.toString()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        slippage: parseFloat(slippage),\n        setSlippage: (val) => setSlippage(val.toString()),\n        connection,\n        sendConnection,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n  };\n}\n\nexport function useSlippageConfig() {\n  const { slippage, setSlippage } = useContext(ConnectionContext);\n  return { slippage, setSlippage };\n}\n\nconst getErrorForTransaction = async (connection: Connection, txid: string) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Account[],\n  awaitConfirmation = true\n) => {\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  transaction.setSigners(\n    // fee payied by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey)\n  );\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment: \"singleGossip\",\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n\n  if (awaitConfirmation) {\n    const status = (\n      await connection.confirmTransaction(\n        txid,\n        options && (options.commitment as any)\n      )\n    ).value;\n\n    if (status?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(\n        `Raw transaction ${txid} failed (${JSON.stringify(status)})`\n      );\n    }\n  }\n\n  return txid;\n};\n","import { Numberu64 } from \"@solana/spl-token-swap\";\nimport { PublicKey, Account, TransactionInstruction } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\n\nexport { TokenSwap } from \"@solana/spl-token-swap\";\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = \"publicKey\"): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = \"uint64\"): Object => {\n  return BufferLayout.blob(8, property);\n};\n\nexport const TokenSwapLayoutLegacyV0 = BufferLayout.struct([\n  BufferLayout.u8(\"isInitialized\"),\n  BufferLayout.u8(\"nonce\"),\n  publicKey(\"tokenAccountA\"),\n  publicKey(\"tokenAccountB\"),\n  publicKey(\"tokenPool\"),\n  uint64(\"feesNumerator\"),\n  uint64(\"feesDenominator\"),\n]);\n\nexport const TokenSwapLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"isInitialized\"),\n    BufferLayout.u8(\"nonce\"),\n    publicKey(\"tokenProgramId\"),\n    publicKey(\"tokenAccountA\"),\n    publicKey(\"tokenAccountB\"),\n    publicKey(\"tokenPool\"),\n    publicKey(\"mintA\"),\n    publicKey(\"mintB\"),\n    publicKey(\"feeAccount\"),\n    BufferLayout.u8(\"curveType\"),\n    uint64(\"tradeFeeNumerator\"),\n    uint64(\"tradeFeeDenominator\"),\n    uint64(\"ownerTradeFeeNumerator\"),\n    uint64(\"ownerTradeFeeDenominator\"),\n    uint64(\"ownerWithdrawFeeNumerator\"),\n    uint64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.blob(16, \"padding\"),\n  ]\n);\n\nexport const createInitSwapInstruction = (\n  tokenSwapAccount: Account,\n  authority: PublicKey,\n  tokenAccountA: PublicKey,\n  tokenAccountB: PublicKey,\n  tokenPool: PublicKey,\n  feeAccount: PublicKey,\n  tokenAccountPool: PublicKey,\n  tokenProgramId: PublicKey,\n  swapProgramId: PublicKey,\n  nonce: number,\n  curveType: number,\n  tradeFeeNumerator: number,\n  tradeFeeDenominator: number,\n  ownerTradeFeeNumerator: number,\n  ownerTradeFeeDenominator: number,\n  ownerWithdrawFeeNumerator: number,\n  ownerWithdrawFeeDenominator: number\n): TransactionInstruction => {\n  const keys = [\n    { pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountA, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountB, isSigner: false, isWritable: false },\n    { pubkey: tokenPool, isSigner: false, isWritable: true },\n    { pubkey: feeAccount, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountPool, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n\n  const commandDataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    BufferLayout.u8(\"nonce\"),\n    BufferLayout.u8(\"curveType\"),\n    BufferLayout.nu64(\"tradeFeeNumerator\"),\n    BufferLayout.nu64(\"tradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n    BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.blob(16, \"padding\"),\n  ]);\n  let data = Buffer.alloc(1024);\n  {\n    const encodeLength = commandDataLayout.encode(\n      {\n        instruction: 0, // InitializeSwap instruction\n        nonce,\n        curveType,\n        tradeFeeNumerator,\n        tradeFeeDenominator,\n        ownerTradeFeeNumerator,\n        ownerTradeFeeDenominator,\n        ownerWithdrawFeeNumerator,\n        ownerWithdrawFeeDenominator,\n      },\n      data\n    );\n    data = data.slice(0, encodeLength);\n  }\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const depositInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  sourceA: PublicKey,\n  sourceB: PublicKey,\n  intoA: PublicKey,\n  intoB: PublicKey,\n  poolToken: PublicKey,\n  poolAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  maximumTokenA: number | Numberu64,\n  maximumTokenB: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"maximumTokenA\"),\n    uint64(\"maximumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 2, // Deposit instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n      maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: sourceA, isSigner: false, isWritable: true },\n    { pubkey: sourceB, isSigner: false, isWritable: true },\n    { pubkey: intoA, isSigner: false, isWritable: true },\n    { pubkey: intoB, isSigner: false, isWritable: true },\n    { pubkey: poolToken, isSigner: false, isWritable: true },\n    { pubkey: poolAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const withdrawInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey | undefined,\n  sourcePoolAccount: PublicKey,\n  fromA: PublicKey,\n  fromB: PublicKey,\n  userAccountA: PublicKey,\n  userAccountB: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  minimumTokenA: number | Numberu64,\n  minimumTokenB: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"minimumTokenA\"),\n    uint64(\"minimumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 3, // Withdraw instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n      minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n    { pubkey: fromA, isSigner: false, isWritable: true },\n    { pubkey: fromB, isSigner: false, isWritable: true },\n    { pubkey: userAccountA, isSigner: false, isWritable: true },\n    { pubkey: userAccountB, isSigner: false, isWritable: true },\n  ];\n\n  if (feeAccount) {\n    keys.push({ pubkey: feeAccount, isSigner: false, isWritable: true });\n  }\n  keys.push({ pubkey: tokenProgramId, isSigner: false, isWritable: false });\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const swapInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  userSource: PublicKey,\n  poolSource: PublicKey,\n  poolDestination: PublicKey,\n  userDestination: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  amountIn: number | Numberu64,\n  minimumAmountOut: number | Numberu64,\n  programOwner?: PublicKey\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"amountIn\"),\n    uint64(\"minimumAmountOut\"),\n  ]);\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: userSource, isSigner: false, isWritable: true },\n    { pubkey: poolSource, isSigner: false, isWritable: true },\n    { pubkey: poolDestination, isSigner: false, isWritable: true },\n    { pubkey: userDestination, isSigner: false, isWritable: true },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: feeAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n\n  // optional depending on the build of token-swap program\n  if (programOwner) {\n    keys.push({ pubkey: programOwner, isSigner: false, isWritable: true });\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 1, // Swap instruction\n      amountIn: new Numberu64(amountIn).toBuffer(),\n      minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n    },\n    data\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nlet TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nlet SWAP_PROGRAM_ID: PublicKey;\nlet SWAP_PROGRAM_LEGACY_IDS: PublicKey[];\n\nexport const SWAP_HOST_FEE_ADDRESS = process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS\n  ? new PublicKey(`${process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS}`)\n  : undefined;\nexport const SWAP_PROGRAM_OWNER_FEE_ADDRESS = new PublicKey(\n  \"HfoTxFR1Tm6kGmWgYWD6J7YHVy1UwqSULUGVLXkJqaKN\"\n);\n\nconsole.debug(`Host address: ${SWAP_HOST_FEE_ADDRESS?.toBase58()}`);\nconsole.debug(`Owner address: ${SWAP_PROGRAM_OWNER_FEE_ADDRESS?.toBase58()}`);\n\n// legacy pools are used to show users contributions in those pools to allow for withdrawals of funds\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n    swap: () => ({\n      current: new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\"),\n      legacy: [],\n    }),\n  },\n  {\n    name: \"testnet\",\n    swap: () => ({\n      current: new PublicKey(\"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\"),\n      legacy: [\n        new PublicKey(\"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\"),\n        new PublicKey(\"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\"),\n      ],\n    }),\n  },\n  {\n    name: \"devnet\",\n    swap: () => ({\n      current: new PublicKey(\"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\"),\n      legacy: [\n        new PublicKey(\"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\"),\n        new PublicKey(\"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\"),\n        new PublicKey(\"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\"),\n      ],\n    }),\n  },\n  {\n    name: \"localnet\",\n    swap: () => ({\n      current: new PublicKey(\"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\"),\n      legacy: [],\n    }),\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n\n  let swap = instance.swap();\n\n  SWAP_PROGRAM_ID = swap.current;\n  SWAP_PROGRAM_LEGACY_IDS = swap.legacy;\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    swap: SWAP_PROGRAM_ID,\n    swap_legacy: SWAP_PROGRAM_LEGACY_IDS,\n  };\n};\n","import {\n  Account,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { sendTransaction, useConnection } from \"./connection\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Token, MintLayout, AccountLayout } from \"@solana/spl-token\";\nimport { notify } from \"./notifications\";\nimport {\n  cache,\n  getCachedAccount,\n  useUserAccounts,\n  useCachedPool,\n  getMultipleAccounts,\n} from \"./accounts\";\nimport {\n  programIds,\n  SWAP_HOST_FEE_ADDRESS,\n  SWAP_PROGRAM_OWNER_FEE_ADDRESS,\n  WRAPPED_SOL_MINT,\n} from \"./ids\";\nimport {\n  LiquidityComponent,\n  PoolInfo,\n  TokenAccount,\n  createInitSwapInstruction,\n  TokenSwapLayout,\n  depositInstruction,\n  withdrawInstruction,\n  TokenSwapLayoutLegacyV0,\n  swapInstruction,\n  PoolConfig,\n} from \"./../models\";\n\nconst LIQUIDITY_TOKEN_PRECISION = 8;\n\nexport const removeLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  liquidityAmount: number,\n  account: TokenAccount,\n  pool?: PoolInfo\n) => {\n  if (!pool) {\n    return;\n  }\n\n  notify({\n    message: \"Removing Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  // TODO get min amounts based on total supply and liquidity\n  const minAmount0 = 0;\n  const minAmount1 = 0;\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const signers: Account[] = [];\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  // TODO: check if one of to accounts needs to be native sol ... if yes unwrap it ...\n  const toAccounts: PublicKey[] = [\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountA.info.mint,\n      signers\n    ),\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountB.info.mint,\n      signers\n    ),\n  ];\n\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      account.pubkey,\n      authority,\n      wallet.publicKey,\n      [],\n      liquidityAmount\n    )\n  );\n\n  // withdraw\n  instructions.push(\n    withdrawInstruction(\n      pool.pubkeys.account,\n      authority,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      account.pubkey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      toAccounts[0],\n      toAccounts[1],\n      pool.pubkeys.program,\n      programIds().token,\n      liquidityAmount,\n      minAmount0,\n      minAmount1\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Liquidity Returned. Thank you for your support.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n};\n\nexport const swap = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  SLIPPAGE: number,\n  pool?: PoolInfo\n) => {\n  if (!pool || !components[0].account) {\n    notify({\n      type: \"error\",\n      message: `Pool doesn't exsist.`,\n      description: `Swap trade cancelled`,\n    });\n    return;\n  }\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amountIn = components[0].amount; // these two should include slippage\n  const minAmountOut = components[1].amount * (1 - SLIPPAGE);\n  const holdingA =\n    pool.pubkeys.holdingMints[0]?.toBase58() ===\n    components[0].account.info.mint.toBase58()\n      ? pool.pubkeys.holdingAccounts[0]\n      : pool.pubkeys.holdingAccounts[1];\n  const holdingB =\n    holdingA === pool.pubkeys.holdingAccounts[0]\n      ? pool.pubkeys.holdingAccounts[1]\n      : pool.pubkeys.holdingAccounts[0];\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority || !pool.pubkeys.feeAccount) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const fromAccount = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    components[0].account,\n    wallet.publicKey,\n    amountIn + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    cleanupInstructions,\n    accountRentExempt,\n    new PublicKey(components[1].mintAddress),\n    signers\n  );\n\n  // create approval for transfer transactions\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromAccount,\n      authority,\n      wallet.publicKey,\n      [],\n      amountIn\n    )\n  );\n\n  let hostFeeAccount = SWAP_HOST_FEE_ADDRESS\n    ? findOrCreateAccountByMint(\n        wallet.publicKey,\n        SWAP_HOST_FEE_ADDRESS,\n        instructions,\n        cleanupInstructions,\n        accountRentExempt,\n        pool.pubkeys.mint,\n        signers\n      )\n    : undefined;\n\n  // swap\n  instructions.push(\n    swapInstruction(\n      pool.pubkeys.account,\n      authority,\n      fromAccount,\n      holdingA,\n      holdingB,\n      toAccount,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      amountIn,\n      minAmountOut,\n      hostFeeAccount\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Trade executed.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n};\n\nexport const addLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  slippage: number,\n  pool?: PoolInfo,\n  options?: PoolConfig\n) => {\n  if (!pool) {\n    if (!options) {\n      throw new Error(\"Options are required to create new pool.\");\n    }\n\n    await _addLiquidityNewPool(wallet, connection, components, options);\n  } else {\n    await _addLiquidityExistingPool(pool, components, connection, wallet);\n  }\n};\n\nconst getHoldings = (connection: Connection, accounts: string[]) => {\n  return accounts.map((acc) =>\n    cache.queryAccount(connection, new PublicKey(acc))\n  );\n};\n\nconst toPoolInfo = (item: any, program: PublicKey) => {\n  const mint = new PublicKey(item.data.tokenPool);\n  return {\n    pubkeys: {\n      account: item.pubkey,\n      program: program,\n      mint,\n      holdingMints: [] as PublicKey[],\n      holdingAccounts: [item.data.tokenAccountA, item.data.tokenAccountB].map(\n        (a) => new PublicKey(a)\n      ),\n    },\n    legacy: false,\n    raw: item,\n  } as PoolInfo;\n};\n\nexport const usePools = () => {\n  const connection = useConnection();\n  const [pools, setPools] = useState<PoolInfo[]>([]);\n\n  // initial query\n  useEffect(() => {\n    setPools([]);\n\n    const queryPools = async (swapId: PublicKey, isLegacy = false) => {\n      let poolsArray: PoolInfo[] = [];\n      (await connection.getProgramAccounts(swapId))\n        .filter(\n          (item) =>\n            item.account.data.length === TokenSwapLayout.span ||\n            item.account.data.length === TokenSwapLayoutLegacyV0.span\n        )\n        .map((item) => {\n          let result = {\n            data: undefined as any,\n            account: item.account,\n            pubkey: item.pubkey,\n            init: async () => {},\n          };\n\n          // handling of legacy layout can be removed soon...\n          if (item.account.data.length === TokenSwapLayoutLegacyV0.span) {\n            result.data = TokenSwapLayoutLegacyV0.decode(item.account.data);\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            poolsArray.push(pool as PoolInfo);\n\n            result.init = async () => {\n              try {\n                // TODO: this is not great\n                // Ideally SwapLayout stores hash of all the mints to make finding of pool for a pair easier\n                const holdings = await Promise.all(\n                  getHoldings(connection, [\n                    result.data.tokenAccountA,\n                    result.data.tokenAccountB,\n                  ])\n                );\n\n                pool.pubkeys.holdingMints = [\n                  holdings[0].info.mint,\n                  holdings[1].info.mint,\n                ] as PublicKey[];\n              } catch (err) {\n                console.log(err);\n              }\n            };\n          } else {\n            result.data = TokenSwapLayout.decode(item.account.data);\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            pool.pubkeys.feeAccount = new PublicKey(result.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(result.data.mintA),\n              new PublicKey(result.data.mintB),\n            ] as PublicKey[];\n\n            poolsArray.push(pool as PoolInfo);\n          }\n\n          return result;\n        });\n\n      const toQuery = poolsArray\n        .map(\n          (p) =>\n            [\n              ...p.pubkeys.holdingAccounts.map((h) => h.toBase58()),\n              ...p.pubkeys.holdingMints.map((h) => h.toBase58()),\n              p.pubkeys.feeAccount?.toBase58(), // used to calculate volume aproximation\n              p.pubkeys.mint.toBase58(),\n            ].filter((p) => p) as string[]\n        )\n        .flat();\n\n      // This will pre-cache all accounts used by pools\n      // All those accounts are updated whenever there is a change\n      await getMultipleAccounts(connection, toQuery, \"single\").then(\n        ({ keys, array }) => {\n          return array.map((obj, index) => {\n            const pubKey = new PublicKey(keys[index]);\n            if (obj.data.length === AccountLayout.span) {\n              return cache.addAccount(pubKey, obj);\n            } else if (obj.data.length === MintLayout.span) {\n              return cache.addMint(pubKey, obj);\n            }\n\n            return obj;\n          }) as any[];\n        }\n      );\n\n      return poolsArray;\n    };\n\n    Promise.all([\n      queryPools(programIds().swap),\n      ...programIds().swap_legacy.map((leg) => queryPools(leg, true)),\n    ]).then((all) => {\n      setPools(all.flat());\n    });\n  }, [connection]);\n\n  useEffect(() => {\n    const subID = connection.onProgramAccountChange(\n      programIds().swap,\n      async (info) => {\n        const id = (info.accountId as unknown) as string;\n        if (info.accountInfo.data.length === TokenSwapLayout.span) {\n          const account = info.accountInfo;\n          const updated = {\n            data: TokenSwapLayout.decode(account.data),\n            account: account,\n            pubkey: new PublicKey(id),\n          };\n\n          const index =\n            pools &&\n            pools.findIndex((p) => p.pubkeys.account.toBase58() === id);\n          if (index && index >= 0 && pools) {\n            // TODO: check if account is empty?\n\n            const filtered = pools.filter((p, i) => i !== index);\n            setPools([...filtered, toPoolInfo(updated, programIds().swap)]);\n          } else {\n            let pool = toPoolInfo(updated, programIds().swap);\n\n            pool.pubkeys.feeAccount = new PublicKey(updated.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(updated.data.mintA),\n              new PublicKey(updated.data.mintB),\n            ] as PublicKey[];\n\n            setPools([...pools, pool]);\n          }\n        }\n      },\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeProgramAccountChangeListener(subID);\n    };\n  }, [connection, pools]);\n\n  return { pools };\n};\n\nexport const usePoolForBasket = (mints: (string | undefined)[]) => {\n  const connection = useConnection();\n  const { pools } = useCachedPool();\n  const [pool, setPool] = useState<PoolInfo>();\n  const sortedMints = useMemo(() => [...mints].sort(), [...mints]);\n  useEffect(() => {\n    (async () => {\n      // reset pool during query\n      setPool(undefined);\n\n      let matchingPool = pools\n        .filter((p) => !p.legacy)\n        .filter((p) =>\n          p.pubkeys.holdingMints\n            .map((a) => a.toBase58())\n            .sort()\n            .every((address, i) => address === sortedMints[i])\n        );\n\n      for (let i = 0; i < matchingPool.length; i++) {\n        const p = matchingPool[i];\n\n        const account = await cache.queryAccount(\n          connection,\n          p.pubkeys.holdingAccounts[0]\n        );\n\n        if (!account.info.amount.eqn(0)) {\n          setPool(p);\n          return;\n        }\n      }\n    })();\n  }, [connection, sortedMints, pools]);\n\n  return pool;\n};\n\nexport const useOwnedPools = () => {\n  const { pools } = useCachedPool();\n  const { userAccounts } = useUserAccounts();\n\n  const ownedPools = useMemo(() => {\n    const map = userAccounts.reduce((acc, item) => {\n      const key = item.info.mint.toBase58();\n      acc.set(key, [...(acc.get(key) || []), item]);\n      return acc;\n    }, new Map<string, TokenAccount[]>());\n\n    return pools\n      .filter((p) => map.has(p.pubkeys.mint.toBase58()))\n      .map((item) => {\n        let feeAccount = item.pubkeys.feeAccount?.toBase58();\n        return map.get(item.pubkeys.mint.toBase58())?.map((a) => {\n          return {\n            account: a as TokenAccount,\n            isFeeAccount: feeAccount === a.pubkey.toBase58(),\n            pool: item,\n          };\n        }) as {\n          account: TokenAccount;\n          isFeeAccount: boolean;\n          pool: PoolInfo;\n        }[];\n      })\n      .flat();\n  }, [pools, userAccounts]);\n\n  return ownedPools;\n};\n\n// Allow for this much price movement in the pool before adding liquidity to the pool aborts\nconst SLIPPAGE = 0.005;\n\nasync function _addLiquidityExistingPool(\n  pool: PoolInfo,\n  components: LiquidityComponent[],\n  connection: Connection,\n  wallet: any\n) {\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (!pool.pubkeys.feeAccount) {\n    throw new Error(\"Invald fee account\");\n  }\n\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n\n  const reserve0 = accountA.info.amount.toNumber();\n  const reserve1 = accountB.info.amount.toNumber();\n  const fromA =\n    accountA.info.mint.toBase58() === components[0].mintAddress\n      ? components[0]\n      : components[1];\n  const fromB = fromA === components[0] ? components[1] : components[0];\n\n  if (!fromA.account || !fromB.account) {\n    throw new Error(\"Missing account info.\");\n  }\n\n  const supply = poolMint.supply.toNumber();\n  const authority = poolMint.mintAuthority;\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amount0 = fromA.amount;\n  const amount1 = fromB.amount;\n\n  const liquidity = Math.min(\n    (amount0 * (1 - SLIPPAGE) * supply) / reserve0,\n    (amount1 * (1 - SLIPPAGE) * supply) / reserve1\n  );\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const fromKeyA = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromA.account,\n    wallet.publicKey,\n    amount0 + accountRentExempt,\n    signers\n  );\n  const fromKeyB = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromB.account,\n    wallet.publicKey,\n    amount1 + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    [],\n    accountRentExempt,\n    pool.pubkeys.mint,\n    signers,\n    new Set<string>([pool.pubkeys.feeAccount.toBase58()])\n  );\n\n  // create approval for transfer transactions\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromKeyA,\n      authority,\n      wallet.publicKey,\n      [],\n      amount0\n    )\n  );\n\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromKeyB,\n      authority,\n      wallet.publicKey,\n      [],\n      amount1\n    )\n  );\n\n  // depoist\n  instructions.push(\n    depositInstruction(\n      pool.pubkeys.account,\n      authority,\n      fromKeyA,\n      fromKeyB,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      pool.pubkeys.mint,\n      toAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      liquidity,\n      amount0,\n      amount1\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction findOrCreateAccountByMint(\n  payer: PublicKey,\n  owner: PublicKey,\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  accountRentExempt: number,\n  mint: PublicKey, // use to identify same type\n  signers: Account[],\n  excluded?: Set<string>\n): PublicKey {\n  const accountToFind = mint.toBase58();\n  const account = getCachedAccount(\n    (acc) =>\n      acc.info.mint.toBase58() === accountToFind &&\n      acc.info.owner.toBase58() === owner.toBase58() &&\n      (excluded === undefined || !excluded.has(acc.pubkey.toBase58()))\n  );\n  const isWrappedSol = accountToFind === WRAPPED_SOL_MINT.toBase58();\n\n  let toAccount: PublicKey;\n  if (account && !isWrappedSol) {\n    toAccount = account.pubkey;\n  } else {\n    // creating depositor pool account\n    const newToAccount = createSplAccount(\n      instructions,\n      payer,\n      accountRentExempt,\n      mint,\n      owner,\n      AccountLayout.span\n    );\n\n    toAccount = newToAccount.publicKey;\n    signers.push(newToAccount);\n\n    if (isWrappedSol) {\n      cleanupInstructions.push(\n        Token.createCloseAccountInstruction(\n          programIds().token,\n          toAccount,\n          payer,\n          payer,\n          []\n        )\n      );\n    }\n  }\n\n  return toAccount;\n}\n\nfunction estimateProceedsFromInput(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  inputAmount: number\n): number {\n  return (\n    (proceedsQuantityInPool * inputAmount) / (inputQuantityInPool + inputAmount)\n  );\n}\n\nfunction estimateInputFromProceeds(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  proceedsAmount: number\n): number | string {\n  if (proceedsAmount >= proceedsQuantityInPool) {\n    return \"Not possible\";\n  }\n\n  return (\n    (inputQuantityInPool * proceedsAmount) /\n    (proceedsQuantityInPool - proceedsAmount)\n  );\n}\n\nexport enum PoolOperation {\n  Add,\n  SwapGivenInput,\n  SwapGivenProceeds,\n}\n\nexport async function calculateDependentAmount(\n  connection: Connection,\n  independent: string,\n  amount: number,\n  pool: PoolInfo,\n  op: PoolOperation\n): Promise<number | string | undefined> {\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (poolMint.supply.eqn(0)) {\n    return;\n  }\n\n  const mintA = await cache.queryMint(connection, accountA.info.mint);\n  const mintB = await cache.queryMint(connection, accountB.info.mint);\n\n  if (!mintA || !mintB) {\n    return;\n  }\n\n  const isFirstIndependent = accountA.info.mint.toBase58() === independent;\n  const depPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintB.decimals : mintA.decimals\n  );\n  const indPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintA.decimals : mintB.decimals\n  );\n  const indAdjustedAmount = amount * indPrecision;\n\n  let indBasketQuantity = (isFirstIndependent\n    ? accountA\n    : accountB\n  ).info.amount.toNumber();\n  let depBasketQuantity = (isFirstIndependent\n    ? accountB\n    : accountA\n  ).info.amount.toNumber();\n\n  var depAdjustedAmount;\n  switch (+op) {\n    case PoolOperation.Add:\n      {\n        depAdjustedAmount =\n          (depBasketQuantity / indBasketQuantity) * indAdjustedAmount;\n      }\n      break;\n    case PoolOperation.SwapGivenProceeds:\n      {\n        depAdjustedAmount = estimateInputFromProceeds(\n          depBasketQuantity,\n          indBasketQuantity,\n          indAdjustedAmount\n        );\n      }\n      break;\n    case PoolOperation.SwapGivenInput:\n      {\n        depAdjustedAmount = estimateProceedsFromInput(\n          indBasketQuantity,\n          depBasketQuantity,\n          indAdjustedAmount\n        );\n      }\n      break;\n  }\n  if (typeof depAdjustedAmount === \"string\") {\n    return depAdjustedAmount;\n  }\n  if (depAdjustedAmount === undefined) {\n    return undefined;\n  }\n  return depAdjustedAmount / depPrecision;\n}\n\n// TODO: add ui to customize curve type\nasync function _addLiquidityNewPool(\n  wallet: any,\n  connection: Connection,\n  components: LiquidityComponent[],\n  options: PoolConfig\n) {\n  notify({\n    message: \"Creating new pool...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  if (components.some((c) => !c.account)) {\n    notify({\n      message: \"You need to have balance for all legs in the basket...\",\n      description: \"Please review inputs.\",\n      type: \"error\",\n    });\n    return;\n  }\n\n  let instructions: TransactionInstruction[] = [];\n  let cleanupInstructions: TransactionInstruction[] = [];\n\n  const liquidityTokenAccount = new Account();\n  // Create account for pool liquidity token\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: liquidityTokenAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      ),\n      space: MintLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  const tokenSwapAccount = new Account();\n\n  const [authority, nonce] = await PublicKey.findProgramAddress(\n    [tokenSwapAccount.publicKey.toBuffer()],\n    programIds().swap\n  );\n\n  // create mint for pool liquidity token\n  instructions.push(\n    Token.createInitMintInstruction(\n      programIds().token,\n      liquidityTokenAccount.publicKey,\n      LIQUIDITY_TOKEN_PRECISION,\n      // pass control of liquidity mint to swap program\n      authority,\n      // swap program can freeze liquidity token mint\n      null\n    )\n  );\n\n  // Create holding accounts for\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const holdingAccounts: Account[] = [];\n  let signers: Account[] = [];\n\n  components.forEach((leg) => {\n    if (!leg.account) {\n      return;\n    }\n\n    const mintPublicKey = leg.account.info.mint;\n    // component account to store tokens I of N in liquidity poll\n    holdingAccounts.push(\n      createSplAccount(\n        instructions,\n        wallet.publicKey,\n        accountRentExempt,\n        mintPublicKey,\n        authority,\n        AccountLayout.span\n      )\n    );\n  });\n\n  // creating depositor pool account\n  const depositorAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenAccount.publicKey,\n    wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // creating fee pool account its set from env variable or to creater of the pool\n  // creater of the pool is not allowed in some versions of token-swap program\n  const feeAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenAccount.publicKey,\n    SWAP_PROGRAM_OWNER_FEE_ADDRESS || wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // create all accounts in one transaction\n  let tx = await sendTransaction(connection, wallet, instructions, [\n    liquidityTokenAccount,\n    depositorAccount,\n    feeAccount,\n    ...holdingAccounts,\n    ...signers,\n  ]);\n\n  notify({\n    message: \"Accounts created\",\n    description: `Transaction ${tx}`,\n    type: \"success\",\n  });\n\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  signers = [];\n  instructions = [];\n  cleanupInstructions = [];\n\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: tokenSwapAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        TokenSwapLayout.span\n      ),\n      space: TokenSwapLayout.span,\n      programId: programIds().swap,\n    })\n  );\n\n  components.forEach((leg, i) => {\n    if (!leg.account) {\n      return;\n    }\n\n    // create temporary account for wrapped sol to perform transfer\n    const from = getWrappedAccount(\n      instructions,\n      cleanupInstructions,\n      leg.account,\n      wallet.publicKey,\n      leg.amount + accountRentExempt,\n      signers\n    );\n\n    instructions.push(\n      Token.createTransferInstruction(\n        programIds().token,\n        from,\n        holdingAccounts[i].publicKey,\n        wallet.publicKey,\n        [],\n        leg.amount\n      )\n    );\n  });\n\n  instructions.push(\n    createInitSwapInstruction(\n      tokenSwapAccount,\n      authority,\n      holdingAccounts[0].publicKey,\n      holdingAccounts[1].publicKey,\n      liquidityTokenAccount.publicKey,\n      feeAccount.publicKey,\n      depositorAccount.publicKey,\n      programIds().token,\n      programIds().swap,\n      nonce,\n      options.curveType,\n      options.tradeFeeNumerator,\n      options.tradeFeeDenominator,\n      options.ownerTradeFeeNumerator,\n      options.ownerTradeFeeDenominator,\n      options.ownerWithdrawFeeNumerator,\n      options.ownerWithdrawFeeDenominator\n    )\n  );\n\n  // All instructions didn't fit in single transaction\n  // initialize and provide inital liquidity to swap in 2nd (this prevents loss of funds)\n  tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    [tokenSwapAccount, ...signers]\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction getWrappedAccount(\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  toCheck: TokenAccount,\n  payer: PublicKey,\n  amount: number,\n  signers: Account[]\n) {\n  if (!toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: AccountLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      WRAPPED_SOL_MINT,\n      account.publicKey,\n      payer\n    )\n  );\n\n  cleanupInstructions.push(\n    Token.createCloseAccountInstruction(\n      programIds().token,\n      account.publicKey,\n      payer,\n      payer,\n      []\n    )\n  );\n\n  signers.push(account);\n\n  return account.publicKey;\n}\n\nfunction createSplAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  accountRentExempt: number,\n  mint: PublicKey,\n  owner: PublicKey,\n  space: number\n) {\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: accountRentExempt,\n      space,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      mint,\n      account.publicKey,\n      owner\n    )\n  );\n\n  return account;\n}\n","import React from \"react\";\nimport { notification } from \"antd\";\n// import Link from '../components/Link';\n\nexport function notify({\n  message = \"\",\n  description = undefined as any,\n  txid = \"\",\n  type = \"info\",\n  placement = \"bottomLeft\",\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: \"black\" }}>{message}</span>,\n    description: (\n      <span style={{ color: \"black\", opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: \"white\",\n    },\n  });\n}\n","import React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { notify } from \"./notifications\";\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./utils\";\n\nexport const WALLET_PROVIDERS = [\n  { name: \"sollet.io\", url: \"https://www.sollet.io\" },\n  { name: \"solflare.com\", url: \"https://solflare.com/access-wallet\" },\n];\n\nconst WalletContext = React.createContext<any>(null);\n\nexport function WalletProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\n    \"walletProvider\",\n    \"https://www.sollet.io\"\n  );\n  const wallet = useMemo(() => new Wallet(providerUrl, endpoint), [\n    providerUrl,\n    endpoint,\n  ]);\n\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    console.log(\"trying to connect\");\n    wallet.on(\"connect\", () => {\n      console.log(\"connected\");\n      setConnected(true);\n      let walletPublicKey = wallet.publicKey.toBase58();\n      let keyToDisplay =\n        walletPublicKey.length > 20\n          ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\n              walletPublicKey.length - 7,\n              walletPublicKey.length\n            )}`\n          : walletPublicKey;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    });\n    wallet.on(\"disconnect\", () => {\n      setConnected(false);\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    });\n    return () => {\n      wallet.disconnect();\n      setConnected(false);\n    };\n  }, [wallet]);\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        providerUrl,\n        setProviderUrl,\n        providerName:\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\n          providerUrl,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  return {\n    connected: context.connected,\n    wallet: context.wallet,\n    providerUrl: context.providerUrl,\n    setProvider: context.setProviderUrl,\n    providerName: context.providerName,\n  };\n}\n","export * from \"./pool\";\nexport * from \"./account\";\nexport * from \"./tokenSwap\";\n"],"sourceRoot":""}