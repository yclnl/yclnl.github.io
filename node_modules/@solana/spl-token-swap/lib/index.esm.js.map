{"version":3,"file":"index.esm.js","sources":["../client/layout.js","../client/util/send-and-confirm-transaction.js","../client/token-swap.js"],"sourcesContent":["// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string'): Object => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n","// @flow\n\nimport {sendAndConfirmTransaction as realSendAndConfirmTransaction} from '@solana/web3.js';\nimport type {\n  Account,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nexport function sendAndConfirmTransaction(\n  title: string,\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return realSendAndConfirmTransaction(connection, transaction, signers, {\n    skipPreflight: false,\n    commitment: 'recent',\n    preflightCommitment: 'recent',\n  });\n}\n","/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\nimport type {Connection, TransactionSignature} from '@solana/web3.js';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nimport * as Layout from './layout';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\n\n/**\n * Some amount of tokens\n */\nexport class Numberu64 extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): typeof Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'Numberu64 too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n  static fromBuffer(buffer: typeof Buffer): Numberu64 {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\n/**\n * Information about a token swap\n */\ntype TokenSwapInfo = {|\n  /**\n   * Nonce. Used to generate the valid program address in the program\n   */\n  nonce: number,\n\n  /**\n   * Token A. The Liquidity token is issued against this value.\n   */\n  tokenAccountA: PublicKey,\n\n  /**\n   * Token B\n   */\n  tokenAccountB: PublicKey,\n  /**\n   * Pool tokens are issued when A or B tokens are deposited\n   * Pool tokens can be withdrawn back to the original A or B token\n   */\n  tokenPool: PublicKey,\n\n  /**\n   * Fee numerator\n   */\n  feesNumerator: Numberu64,\n\n  /**\n   * Fee denominator\n   */\n  feesDenominator: Numberu64,\n\n  /**\n   * Fee ratio applied to the input token amount prior to output calculation\n   */\n  feeRatio: number,\n|};\n\n/**\n * @private\n */\nexport const TokenSwapLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8('isInitialized'),\n    BufferLayout.u8('nonce'),\n    Layout.publicKey('tokenAccountA'),\n    Layout.publicKey('tokenAccountB'),\n    Layout.publicKey('tokenPool'),\n    Layout.uint64('feesNumerator'),\n    Layout.uint64('feesDenominator'),\n  ],\n);\n\n/**\n * An ERC20-like Token\n */\nexport class TokenSwap {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * The public key identifying this token\n   */\n  tokenSwap: PublicKey;\n\n  /**\n   * Program Identifier for the Token Swap program\n   */\n  programId: PublicKey;\n\n  /**\n   * Fee payer\n   */\n  payer: Account;\n\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param token Public key of the token\n   * @param programId Optional token programId, uses the system programId by default\n   * @param payer Payer of fees\n   */\n  constructor(\n    connection: Connection,\n    tokenSwap: PublicKey,\n    programId: PublicKey,\n    payer: Account,\n  ) {\n    Object.assign(this, {connection, tokenSwap, programId, payer});\n  }\n\n  /**\n   * Get the minimum balance for the token swap account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptTokenSwap(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(\n      TokenSwapLayout.span,\n    );\n  }\n\n  static createInitSwapInstruction(\n    tokenSwapAccount: Account,\n    authority: PublicKey,\n    nonce: number,\n    tokenAccountA: PublicKey,\n    tokenAccountB: PublicKey,\n    tokenPool: PublicKey,\n    tokenAccountPool: PublicKey,\n    tokenProgramId: PublicKey,\n    swapProgramId: PublicKey,\n    feeNumerator: number,\n    feeDenominator: number,\n  ): TransactionInstruction {\n    const keys = [\n      {pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountA, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountB, isSigner: false, isWritable: false},\n      {pubkey: tokenPool, isSigner: false, isWritable: true},\n      {pubkey: tokenAccountPool, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.nu64('feeNumerator'),\n      BufferLayout.nu64('feeDenominator'),\n      BufferLayout.u8('nonce'),\n    ]);\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 0, // InitializeSwap instruction\n          feeNumerator,\n          feeDenominator,\n          nonce,\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Create a new Token Swap\n   *\n   * @param connection The connection to use\n   * @param payer Pays for the transaction\n   * @param tokenSwapAccount The token swap account\n   * @param authority The authority over the swap and accounts\n   * @param tokenAccountA: The Swap's Token A account\n   * @param tokenAccountB: The Swap's Token B account\n   * @param tokenPool The pool token\n   * @param tokenAccountPool The pool token account\n   * @param tokenProgramId The program id of the token program\n   * @param feeNumerator Numerator of the fee ratio\n   * @param feeDenominator Denominator of the fee ratio\n   * @param swapProgramId Program ID of the token-swap program\n   * @return Token object for the newly minted token, Public key of the account holding the total supply of new tokens\n   */\n  static async createTokenSwap(\n    connection: Connection,\n    payer: Account,\n    tokenSwapAccount: Account,\n    authority: PublicKey,\n    tokenAccountA: PublicKey,\n    tokenAccountB: PublicKey,\n    tokenPool: PublicKey,\n    tokenAccountPool: PublicKey,\n    tokenProgramId: PublicKey,\n    nonce: number,\n    feeNumerator: number,\n    feeDenominator: number,\n    swapProgramId: PublicKey,\n  ): Promise<TokenSwap> {\n    let transaction;\n    const tokenSwap = new TokenSwap(\n      connection,\n      tokenSwapAccount.publicKey,\n      swapProgramId,\n      payer,\n    );\n\n    // Allocate memory for the account\n    const balanceNeeded = await TokenSwap.getMinBalanceRentForExemptTokenSwap(\n      connection,\n    );\n    transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: tokenSwapAccount.publicKey,\n        lamports: balanceNeeded,\n        space: TokenSwapLayout.span,\n        programId: swapProgramId,\n      }),\n    );\n\n    const instruction = TokenSwap.createInitSwapInstruction(\n      tokenSwapAccount,\n      authority,\n      nonce,\n      tokenAccountA,\n      tokenAccountB,\n      tokenPool,\n      tokenAccountPool,\n      tokenProgramId,\n      swapProgramId,\n      feeNumerator,\n      feeDenominator,\n    );\n\n    transaction.add(instruction);\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeSwap',\n      connection,\n      transaction,\n      payer,\n      tokenSwapAccount,\n    );\n\n    return tokenSwap;\n  }\n\n  /**\n   * Retrieve tokenSwap information\n   */\n  async getInfo(): Promise<TokenSwapInfo> {\n    const accountInfo = await this.connection.getAccountInfo(this.tokenSwap);\n    if (accountInfo === null) {\n      throw new Error('Failed to find token swap account');\n    }\n    if (!accountInfo.owner.equals(this.programId)) {\n      throw new Error(\n        `Invalid token swap owner: ${JSON.stringify(accountInfo.owner)}`,\n      );\n    }\n\n    const data = Buffer.from(accountInfo.data);\n    const tokenSwapInfo = TokenSwapLayout.decode(data);\n    if (!tokenSwapInfo.isInitialized) {\n      throw new Error(`Invalid token swap state`);\n    }\n    // already properly filled in\n    // tokenSwapInfo.nonce = tokenSwapInfo.nonce;\n    tokenSwapInfo.tokenAccountA = new PublicKey(tokenSwapInfo.tokenAccountA);\n    tokenSwapInfo.tokenAccountB = new PublicKey(tokenSwapInfo.tokenAccountB);\n    tokenSwapInfo.tokenPool = new PublicKey(tokenSwapInfo.tokenPool);\n    tokenSwapInfo.feesNumerator = Numberu64.fromBuffer(\n      tokenSwapInfo.feesNumerator,\n    );\n    tokenSwapInfo.feesDenominator = Numberu64.fromBuffer(\n      tokenSwapInfo.feesDenominator,\n    );\n    tokenSwapInfo.feeRatio =\n      tokenSwapInfo.feesNumerator.toNumber() /\n      tokenSwapInfo.feesDenominator.toNumber();\n\n    return tokenSwapInfo;\n  }\n\n  /**\n   * Swap the tokens in the pool\n   *\n   * @param authority Authority\n   * @param source Source account\n   * @param swapSource Base account to swap into, must be a source token\n   * @param swapDestination Base account to swap from, must be a destination token\n   * @param destination Destination token account\n   * @param tokenProgramId Token program id\n   * @param amount Amount to transfer from source account\n   */\n  async swap(\n    authority: PublicKey,\n    source: PublicKey,\n    swapSource: PublicKey,\n    swapDestination: PublicKey,\n    destination: PublicKey,\n    tokenProgramId: PublicKey,\n    amountIn: number | Numberu64,\n    minimumAmountOut: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'swap',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.swapInstruction(\n          this.tokenSwap,\n          authority,\n          source,\n          swapSource,\n          swapDestination,\n          destination,\n          this.programId,\n          tokenProgramId,\n          amountIn,\n          minimumAmountOut,\n        ),\n      ),\n      this.payer,\n    );\n  }\n\n  static swapInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    source: PublicKey,\n    swapSource: PublicKey,\n    swapDestination: PublicKey,\n    destination: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    amountIn: number | Numberu64,\n    minimumAmountOut: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amountIn'),\n      Layout.uint64('minimumAmountOut'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // Swap instruction\n        amountIn: new Numberu64(amountIn).toBuffer(),\n        minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: source, isSigner: false, isWritable: true},\n      {pubkey: swapSource, isSigner: false, isWritable: true},\n      {pubkey: swapDestination, isSigner: false, isWritable: true},\n      {pubkey: destination, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Deposit some tokens into the pool\n   *\n   * @param authority Authority\n   * @param sourceA Source account A\n   * @param sourceB Source account B\n   * @param intoA Base account A to deposit into\n   * @param intoB Base account B to deposit into\n   * @param poolToken Pool token\n   * @param poolAccount Pool account to deposit the generated tokens\n   * @param tokenProgramId Token program id\n   * @param amount Amount of pool token to deposit, token A and B amount are set by the exchange rate relative to the total pool token supply\n   */\n  async deposit(\n    authority: PublicKey,\n    sourceA: PublicKey,\n    sourceB: PublicKey,\n    intoA: PublicKey,\n    intoB: PublicKey,\n    poolToken: PublicKey,\n    poolAccount: PublicKey,\n    tokenProgramId: PublicKey,\n    poolTokenAmount: number | Numberu64,\n    maximumTokenA: number | Numberu64,\n    maximumTokenB: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'deposit',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.depositInstruction(\n          this.tokenSwap,\n          authority,\n          sourceA,\n          sourceB,\n          intoA,\n          intoB,\n          poolToken,\n          poolAccount,\n          this.programId,\n          tokenProgramId,\n          poolTokenAmount,\n          maximumTokenA,\n          maximumTokenB,\n        ),\n      ),\n      this.payer,\n    );\n  }\n\n  static depositInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    sourceA: PublicKey,\n    sourceB: PublicKey,\n    intoA: PublicKey,\n    intoB: PublicKey,\n    poolToken: PublicKey,\n    poolAccount: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    poolTokenAmount: number | Numberu64,\n    maximumTokenA: number | Numberu64,\n    maximumTokenB: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('poolTokenAmount'),\n      Layout.uint64('maximumTokenA'),\n      Layout.uint64('maximumTokenB'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // Deposit instruction\n        poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n        maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n        maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: sourceA, isSigner: false, isWritable: true},\n      {pubkey: sourceB, isSigner: false, isWritable: true},\n      {pubkey: intoA, isSigner: false, isWritable: true},\n      {pubkey: intoB, isSigner: false, isWritable: true},\n      {pubkey: poolToken, isSigner: false, isWritable: true},\n      {pubkey: poolAccount, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Withdraw the token from the pool at the current ratio\n   *\n   * @param authority Authority\n   * @param sourcePoolAccount Source pool account\n   * @param poolToken Pool token\n   * @param fromA Base account A to withdraw from\n   * @param fromB Base account B to withdraw from\n   * @param userAccountA Token A user account\n   * @param userAccountB token B user account\n   * @param tokenProgramId Token program id\n   * @param amount Amount of pool token to withdraw, token A and B amount are set by the exchange rate relative to the total pool token supply\n   */\n  async withdraw(\n    authority: PublicKey,\n    poolMint: PublicKey,\n    sourcePoolAccount: PublicKey,\n    fromA: PublicKey,\n    fromB: PublicKey,\n    userAccountA: PublicKey,\n    userAccountB: PublicKey,\n    tokenProgramId: PublicKey,\n    poolTokenAmount: number | Numberu64,\n    minimumTokenA: number | Numberu64,\n    minimumTokenB: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'withdraw',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.withdrawInstruction(\n          this.tokenSwap,\n          authority,\n          poolMint,\n          sourcePoolAccount,\n          fromA,\n          fromB,\n          userAccountA,\n          userAccountB,\n          this.programId,\n          tokenProgramId,\n          poolTokenAmount,\n          minimumTokenA,\n          minimumTokenB,\n        ),\n      ),\n      this.payer,\n    );\n  }\n\n  static withdrawInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    poolMint: PublicKey,\n    sourcePoolAccount: PublicKey,\n    fromA: PublicKey,\n    fromB: PublicKey,\n    userAccountA: PublicKey,\n    userAccountB: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    poolTokenAmount: number | Numberu64,\n    minimumTokenA: number | Numberu64,\n    minimumTokenB: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('poolTokenAmount'),\n      Layout.uint64('minimumTokenA'),\n      Layout.uint64('minimumTokenB'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3, // Withdraw instruction\n        poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n        minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n        minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: poolMint, isSigner: false, isWritable: true},\n      {pubkey: sourcePoolAccount, isSigner: false, isWritable: true},\n      {pubkey: fromA, isSigner: false, isWritable: true},\n      {pubkey: fromB, isSigner: false, isWritable: true},\n      {pubkey: userAccountA, isSigner: false, isWritable: true},\n      {pubkey: userAccountB, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n}\n"],"names":["publicKey","property","BufferLayout","uint64","sendAndConfirmTransaction","title","connection","transaction","signers","realSendAndConfirmTransaction","skipPreflight","commitment","preflightCommitment","Numberu64","BN","toBuffer","a","toArray","reverse","b","Buffer","from","length","assert","zeroPad","alloc","copy","fromBuffer","buffer","map","i","toString","slice","join","TokenSwapLayout","Layout","TokenSwap","constructor","tokenSwap","programId","payer","Object","assign","getMinBalanceRentForExemptTokenSwap","getMinimumBalanceForRentExemption","span","createInitSwapInstruction","tokenSwapAccount","authority","nonce","tokenAccountA","tokenAccountB","tokenPool","tokenAccountPool","tokenProgramId","swapProgramId","feeNumerator","feeDenominator","keys","pubkey","isSigner","isWritable","commandDataLayout","data","encodeLength","encode","instruction","TransactionInstruction","createTokenSwap","balanceNeeded","Transaction","add","SystemProgram","createAccount","fromPubkey","newAccountPubkey","lamports","space","getInfo","accountInfo","getAccountInfo","Error","owner","equals","JSON","stringify","tokenSwapInfo","decode","isInitialized","PublicKey","feesNumerator","feesDenominator","feeRatio","toNumber","swap","source","swapSource","swapDestination","destination","amountIn","minimumAmountOut","swapInstruction","dataLayout","deposit","sourceA","sourceB","intoA","intoB","poolToken","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","depositInstruction","withdraw","poolMint","sourcePoolAccount","fromA","fromB","userAccountA","userAccountB","minimumTokenA","minimumTokenB","withdrawInstruction"],"mappings":"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"}