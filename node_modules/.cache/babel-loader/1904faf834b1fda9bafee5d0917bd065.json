{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/components/pool/remove.tsx\";\nimport React, { useState } from \"react\";\nimport { Button } from \"antd\";\nimport { removeLiquidity } from \"../../utils/pools\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { useConnection } from \"../../utils/connection\";\nimport { notify } from \"../../utils/notifications\";\nexport const RemoveLiquidity = props => {\n  const {\n    account,\n    pool\n  } = props.instance;\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    wallet\n  } = useWallet();\n  const connection = useConnection();\n\n  const onRemove = async () => {\n    try {\n      setPendingTx(true); // TODO: calculate percentage based on user input\n\n      let liquidityAmount = account.info.amount.toNumber();\n      await removeLiquidity(connection, wallet, liquidityAmount, account, pool);\n    } catch {\n      notify({\n        description: \"Please try again and approve transactions from your wallet\",\n        message: \"Removing liquidity cancelled.\",\n        type: \"error\"\n      });\n    } finally {\n      setPendingTx(false); // TODO: force refresh of pool accounts?\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    onClick: onRemove,\n    disabled: pendingTx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"Remove\"));\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/pool/remove.tsx"],"names":["React","useState","Button","removeLiquidity","useWallet","useConnection","notify","RemoveLiquidity","props","account","pool","instance","pendingTx","setPendingTx","wallet","connection","onRemove","liquidityAmount","info","amount","toNumber","description","message","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,MAAvB;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,SAASC,MAAT,QAAuB,2BAAvB;AAEA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAEzB;AACJ,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,KAAK,CAACG,QAAhC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAaV,SAAS,EAA5B;AACA,QAAMW,UAAU,GAAGV,aAAa,EAAhC;;AAEA,QAAMW,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACFH,MAAAA,YAAY,CAAC,IAAD,CAAZ,CADE,CAEF;;AACA,UAAII,eAAe,GAAGR,OAAO,CAACS,IAAR,CAAaC,MAAb,CAAoBC,QAApB,EAAtB;AACA,YAAMjB,eAAe,CAACY,UAAD,EAAaD,MAAb,EAAqBG,eAArB,EAAsCR,OAAtC,EAA+CC,IAA/C,CAArB;AACD,KALD,CAKE,MAAM;AACNJ,MAAAA,MAAM,CAAC;AACLe,QAAAA,WAAW,EACT,4DAFG;AAGLC,QAAAA,OAAO,EAAE,+BAHJ;AAILC,QAAAA,IAAI,EAAE;AAJD,OAAD,CAAN;AAMD,KAZD,SAYU;AACRV,MAAAA,YAAY,CAAC,KAAD,CAAZ,CADQ,CAER;AACD;AACF,GAjBD;;AAmBA,sBACE,uDACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAEG,QAAhC;AAA0C,IAAA,QAAQ,EAAEJ,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADF;AAOD,CAlCM","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"antd\";\n\nimport { removeLiquidity } from \"../../utils/pools\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { useConnection } from \"../../utils/connection\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport { notify } from \"../../utils/notifications\";\n\nexport const RemoveLiquidity = (props: {\n  instance: { account: TokenAccount; pool: PoolInfo };\n}) => {\n  const { account, pool } = props.instance;\n  const [pendingTx, setPendingTx] = useState(false);\n  const { wallet } = useWallet();\n  const connection = useConnection();\n\n  const onRemove = async () => {\n    try {\n      setPendingTx(true);\n      // TODO: calculate percentage based on user input\n      let liquidityAmount = account.info.amount.toNumber();\n      await removeLiquidity(connection, wallet, liquidityAmount, account, pool);\n    } catch {\n      notify({\n        description:\n          \"Please try again and approve transactions from your wallet\",\n        message: \"Removing liquidity cancelled.\",\n        type: \"error\",\n      });\n    } finally {\n      setPendingTx(false);\n      // TODO: force refresh of pool accounts?\n    }\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={onRemove} disabled={pendingTx}>\n        Remove\n      </Button>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}