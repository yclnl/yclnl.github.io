{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/components/pool/supplyOverview.tsx\";\nimport React, { useEffect, useMemo, useRef } from \"react\";\nimport { useEnrichedPools } from \"./../../context/market\";\nimport echarts from \"echarts\";\nimport { formatUSD } from \"../../utils/utils\";\nexport const SupplyOverview = props => {\n  const {\n    pool\n  } = props;\n  const pools = useMemo(() => pool ? [pool] : [], [pool]);\n  const enriched = useEnrichedPools(pools);\n  const chartDiv = useRef(null); // dispose chart\n\n  useEffect(() => {\n    const div = chartDiv.current;\n    return () => {\n      let instance = div && echarts.getInstanceByDom(div);\n      instance && instance.dispose();\n    };\n  }, []);\n  useEffect(() => {\n    if (!chartDiv.current || enriched.length === 0) {\n      return;\n    }\n\n    let instance = echarts.getInstanceByDom(chartDiv.current);\n\n    if (!instance) {\n      instance = echarts.init(chartDiv.current);\n    }\n\n    const data = [{\n      name: enriched[0].names[0],\n      value: enriched[0].liquidityAinUsd\n    }, {\n      name: enriched[0].names[1],\n      value: enriched[0].liquidityBinUsd\n    }];\n    instance.setOption({\n      tooltip: {\n        trigger: \"item\",\n        formatter: function (params) {\n          var val = formatUSD.format(params.value);\n          return `${params.name}: \\n${val}`;\n        }\n      },\n      series: [{\n        name: \"Liquidity\",\n        type: \"pie\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        label: {\n          fontSize: 14,\n          show: true,\n          formatter: function (params) {\n            var val = formatUSD.format(params.value);\n            return `${params.name}\\n${val}`;\n          },\n          color: \"rgba(255, 255, 255, 0.5)\"\n        },\n        itemStyle: {\n          normal: {\n            borderColor: \"#000\"\n          }\n        },\n        data\n      }]\n    });\n  }, [enriched]);\n\n  if (enriched.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: chartDiv,\n    style: {\n      height: 150,\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/pool/supplyOverview.tsx"],"names":["React","useEffect","useMemo","useRef","useEnrichedPools","echarts","formatUSD","SupplyOverview","props","pool","pools","enriched","chartDiv","div","current","instance","getInstanceByDom","dispose","length","init","data","name","names","value","liquidityAinUsd","liquidityBinUsd","setOption","tooltip","trigger","formatter","params","val","format","series","type","top","bottom","left","right","label","fontSize","show","color","itemStyle","normal","borderColor","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,OAAlD;AAEA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAGxB;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAME,KAAK,GAAGR,OAAO,CAAC,MAAOO,IAAI,GAAG,CAACA,IAAD,CAAH,GAAY,EAAxB,EAA6B,CAACA,IAAD,CAA7B,CAArB;AACA,QAAME,QAAQ,GAAGP,gBAAgB,CAACM,KAAD,CAAjC;AACA,QAAME,QAAQ,GAAGT,MAAM,CAAiB,IAAjB,CAAvB,CAJI,CAMJ;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,GAAG,GAAGD,QAAQ,CAACE,OAArB;AACA,WAAO,MAAM;AACX,UAAIC,QAAQ,GAAGF,GAAG,IAAIR,OAAO,CAACW,gBAAR,CAAyBH,GAAzB,CAAtB;AACAE,MAAAA,QAAQ,IAAIA,QAAQ,CAACE,OAAT,EAAZ;AACD,KAHD;AAID,GANQ,EAMN,EANM,CAAT;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,QAAQ,CAACE,OAAV,IAAqBH,QAAQ,CAACO,MAAT,KAAoB,CAA7C,EAAgD;AAC9C;AACD;;AAED,QAAIH,QAAQ,GAAGV,OAAO,CAACW,gBAAR,CAAyBJ,QAAQ,CAACE,OAAlC,CAAf;;AACA,QAAI,CAACC,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGV,OAAO,CAACc,IAAR,CAAaP,QAAQ,CAACE,OAAtB,CAAX;AACD;;AAED,UAAMM,IAAI,GAAG,CACX;AACEC,MAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD,CAAR,CAAYW,KAAZ,CAAkB,CAAlB,CADR;AAEEC,MAAAA,KAAK,EAAEZ,QAAQ,CAAC,CAAD,CAAR,CAAYa;AAFrB,KADW,EAKX;AACEH,MAAAA,IAAI,EAAEV,QAAQ,CAAC,CAAD,CAAR,CAAYW,KAAZ,CAAkB,CAAlB,CADR;AAEEC,MAAAA,KAAK,EAAEZ,QAAQ,CAAC,CAAD,CAAR,CAAYc;AAFrB,KALW,CAAb;AAWAV,IAAAA,QAAQ,CAACW,SAAT,CAAmB;AACjBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,MADF;AAEPC,QAAAA,SAAS,EAAE,UAAUC,MAAV,EAAuB;AAChC,cAAIC,GAAG,GAAGzB,SAAS,CAAC0B,MAAV,CAAiBF,MAAM,CAACP,KAAxB,CAAV;AACA,iBAAQ,GAAEO,MAAM,CAACT,IAAK,OAAMU,GAAI,EAAhC;AACD;AALM,OADQ;AAQjBE,MAAAA,MAAM,EAAE,CACN;AACEZ,QAAAA,IAAI,EAAE,WADR;AAEEa,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,GAAG,EAAE,CAHP;AAIEC,QAAAA,MAAM,EAAE,CAJV;AAKEC,QAAAA,IAAI,EAAE,CALR;AAMEC,QAAAA,KAAK,EAAE,CANT;AAOEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,EADL;AAELC,UAAAA,IAAI,EAAE,IAFD;AAGLZ,UAAAA,SAAS,EAAE,UAAUC,MAAV,EAAuB;AAChC,gBAAIC,GAAG,GAAGzB,SAAS,CAAC0B,MAAV,CAAiBF,MAAM,CAACP,KAAxB,CAAV;AACA,mBAAQ,GAAEO,MAAM,CAACT,IAAK,KAAIU,GAAI,EAA9B;AACD,WANI;AAOLW,UAAAA,KAAK,EAAE;AAPF,SAPT;AAgBEC,QAAAA,SAAS,EAAE;AACTC,UAAAA,MAAM,EAAE;AACNC,YAAAA,WAAW,EAAE;AADP;AADC,SAhBb;AAqBEzB,QAAAA;AArBF,OADM;AARS,KAAnB;AAkCD,GAvDQ,EAuDN,CAACT,QAAD,CAvDM,CAAT;;AAyDA,MAAIA,QAAQ,CAACO,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED,sBAAO;AAAK,IAAA,GAAG,EAAEN,QAAV;AAAoB,IAAA,KAAK,EAAE;AAAEkC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAhFM","sourcesContent":["import React, { useEffect, useMemo, useRef } from \"react\";\nimport { PoolInfo } from \"../../models\";\nimport { useEnrichedPools } from \"./../../context/market\";\nimport echarts from \"echarts\";\nimport { formatUSD } from \"../../utils/utils\";\n\nexport const SupplyOverview = (props: {\n  mintAddress: string[];\n  pool?: PoolInfo;\n}) => {\n  const { pool } = props;\n  const pools = useMemo(() => (pool ? [pool] : []), [pool]);\n  const enriched = useEnrichedPools(pools);\n  const chartDiv = useRef<HTMLDivElement>(null);\n\n  // dispose chart\n  useEffect(() => {\n    const div = chartDiv.current;\n    return () => {\n      let instance = div && echarts.getInstanceByDom(div);\n      instance && instance.dispose();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!chartDiv.current || enriched.length === 0) {\n      return;\n    }\n\n    let instance = echarts.getInstanceByDom(chartDiv.current);\n    if (!instance) {\n      instance = echarts.init(chartDiv.current as any);\n    }\n\n    const data = [\n      {\n        name: enriched[0].names[0],\n        value: enriched[0].liquidityAinUsd,\n      },\n      {\n        name: enriched[0].names[1],\n        value: enriched[0].liquidityBinUsd,\n      },\n    ];\n\n    instance.setOption({\n      tooltip: {\n        trigger: \"item\",\n        formatter: function (params: any) {\n          var val = formatUSD.format(params.value);\n          return `${params.name}: \\n${val}`;\n        },\n      },\n      series: [\n        {\n          name: \"Liquidity\",\n          type: \"pie\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          label: {\n            fontSize: 14,\n            show: true,\n            formatter: function (params: any) {\n              var val = formatUSD.format(params.value);\n              return `${params.name}\\n${val}`;\n            },\n            color: \"rgba(255, 255, 255, 0.5)\",\n          },\n          itemStyle: {\n            normal: {\n              borderColor: \"#000\",\n            },\n          },\n          data,\n        },\n      ],\n    });\n  }, [enriched]);\n\n  if (enriched.length === 0) {\n    return null;\n  }\n\n  return <div ref={chartDiv} style={{ height: 150, width: \"100%\" }} />;\n};\n"]},"metadata":{},"sourceType":"module"}