{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _toConsumableArray = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMintDecimals = exports.Orderbook = exports.ORDERBOOK_LAYOUT = exports.OpenOrders = exports._OPEN_ORDERS_LAYOUT_V2 = exports._OPEN_ORDERS_LAYOUT_V1 = exports.Market = exports._MARKET_STATE_LAYOUT_V2 = exports._MARKET_STAT_LAYOUT_V1 = void 0;\n\nvar buffer_layout_1 = require(\"buffer-layout\");\n\nvar layout_1 = require(\"./layout\");\n\nvar slab_1 = require(\"./slab\");\n\nvar instructions_1 = require(\"./instructions\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar queue_1 = require(\"./queue\");\n\nvar buffer_1 = require(\"buffer\");\n\nvar fees_1 = require(\"./fees\");\n\nvar token_instructions_1 = require(\"./token-instructions\");\n\nvar tokens_and_markets_1 = require(\"./tokens_and_markets\");\n\nexports._MARKET_STAT_LAYOUT_V1 = buffer_layout_1.struct([buffer_layout_1.blob(5), layout_1.accountFlagsLayout('accountFlags'), layout_1.publicKeyLayout('ownAddress'), layout_1.u64('vaultSignerNonce'), layout_1.publicKeyLayout('baseMint'), layout_1.publicKeyLayout('quoteMint'), layout_1.publicKeyLayout('baseVault'), layout_1.u64('baseDepositsTotal'), layout_1.u64('baseFeesAccrued'), layout_1.publicKeyLayout('quoteVault'), layout_1.u64('quoteDepositsTotal'), layout_1.u64('quoteFeesAccrued'), layout_1.u64('quoteDustThreshold'), layout_1.publicKeyLayout('requestQueue'), layout_1.publicKeyLayout('eventQueue'), layout_1.publicKeyLayout('bids'), layout_1.publicKeyLayout('asks'), layout_1.u64('baseLotSize'), layout_1.u64('quoteLotSize'), layout_1.u64('feeRateBps'), buffer_layout_1.blob(7)]);\nexports._MARKET_STATE_LAYOUT_V2 = buffer_layout_1.struct([buffer_layout_1.blob(5), layout_1.accountFlagsLayout('accountFlags'), layout_1.publicKeyLayout('ownAddress'), layout_1.u64('vaultSignerNonce'), layout_1.publicKeyLayout('baseMint'), layout_1.publicKeyLayout('quoteMint'), layout_1.publicKeyLayout('baseVault'), layout_1.u64('baseDepositsTotal'), layout_1.u64('baseFeesAccrued'), layout_1.publicKeyLayout('quoteVault'), layout_1.u64('quoteDepositsTotal'), layout_1.u64('quoteFeesAccrued'), layout_1.u64('quoteDustThreshold'), layout_1.publicKeyLayout('requestQueue'), layout_1.publicKeyLayout('eventQueue'), layout_1.publicKeyLayout('bids'), layout_1.publicKeyLayout('asks'), layout_1.u64('baseLotSize'), layout_1.u64('quoteLotSize'), layout_1.u64('feeRateBps'), layout_1.u64('referrerRebatesAccrued'), buffer_layout_1.blob(7)]);\n\nvar Market = /*#__PURE__*/function () {\n  function Market(decoded, baseMintDecimals, quoteMintDecimals) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var programId = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, Market);\n\n    var _options$skipPrefligh = options.skipPreflight,\n        skipPreflight = _options$skipPrefligh === void 0 ? false : _options$skipPrefligh,\n        _options$commitment = options.commitment,\n        commitment = _options$commitment === void 0 ? 'recent' : _options$commitment;\n\n    if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n      throw new Error('Invalid market state');\n    }\n\n    this._decoded = decoded;\n    this._baseSplTokenDecimals = baseMintDecimals;\n    this._quoteSplTokenDecimals = quoteMintDecimals;\n    this._skipPreflight = skipPreflight;\n    this._commitment = commitment;\n    this._programId = programId;\n    this._openOrdersAccountsCache = {};\n    this._feeDiscountKeysCache = {};\n  }\n\n  _createClass(Market, [{\n    key: \"loadBids\",\n    value: function () {\n      var _loadBids = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection) {\n        var _throwIfNull, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = throwIfNull;\n                _context.next = 3;\n                return connection.getAccountInfo(this._decoded.bids);\n\n              case 3:\n                _context.t1 = _context.sent;\n                _throwIfNull = (0, _context.t0)(_context.t1);\n                data = _throwIfNull.data;\n                return _context.abrupt(\"return\", Orderbook.decode(this, data));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadBids(_x) {\n        return _loadBids.apply(this, arguments);\n      }\n\n      return loadBids;\n    }()\n  }, {\n    key: \"loadAsks\",\n    value: function () {\n      var _loadAsks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection) {\n        var _throwIfNull2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = throwIfNull;\n                _context2.next = 3;\n                return connection.getAccountInfo(this._decoded.asks);\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                _throwIfNull2 = (0, _context2.t0)(_context2.t1);\n                data = _throwIfNull2.data;\n                return _context2.abrupt(\"return\", Orderbook.decode(this, data));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadAsks(_x2) {\n        return _loadAsks.apply(this, arguments);\n      }\n\n      return loadAsks;\n    }()\n  }, {\n    key: \"loadOrdersForOwner\",\n    value: function () {\n      var _loadOrdersForOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection, ownerAddress) {\n        var cacheDurationMs,\n            _yield$Promise$all,\n            _yield$Promise$all2,\n            bids,\n            asks,\n            openOrdersAccounts,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                cacheDurationMs = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : 0;\n                _context3.next = 3;\n                return Promise.all([this.loadBids(connection), this.loadAsks(connection), this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs)]);\n\n              case 3:\n                _yield$Promise$all = _context3.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n                bids = _yield$Promise$all2[0];\n                asks = _yield$Promise$all2[1];\n                openOrdersAccounts = _yield$Promise$all2[2];\n                return _context3.abrupt(\"return\", this.filterForOpenOrders(bids, asks, openOrdersAccounts));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadOrdersForOwner(_x3, _x4) {\n        return _loadOrdersForOwner.apply(this, arguments);\n      }\n\n      return loadOrdersForOwner;\n    }()\n  }, {\n    key: \"filterForOpenOrders\",\n    value: function filterForOpenOrders(bids, asks, openOrdersAccounts) {\n      return [].concat(_toConsumableArray(bids), _toConsumableArray(asks)).filter(function (order) {\n        return openOrdersAccounts.some(function (openOrders) {\n          return order.openOrdersAddress.equals(openOrders.address);\n        });\n      });\n    }\n  }, {\n    key: \"findBaseTokenAccountsForOwner\",\n    value: function () {\n      var _findBaseTokenAccountsForOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, ownerAddress) {\n        var includeUnwrappedSol,\n            _yield$Promise$all3,\n            _yield$Promise$all4,\n            wrapped,\n            unwrapped,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                includeUnwrappedSol = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : false;\n\n                if (!(this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 4;\n                return Promise.all([this.findBaseTokenAccountsForOwner(connection, ownerAddress, false), connection.getAccountInfo(ownerAddress)]);\n\n              case 4:\n                _yield$Promise$all3 = _context4.sent;\n                _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n                wrapped = _yield$Promise$all4[0];\n                unwrapped = _yield$Promise$all4[1];\n\n                if (!(unwrapped !== null)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", [{\n                  pubkey: ownerAddress,\n                  account: unwrapped\n                }].concat(_toConsumableArray(wrapped)));\n\n              case 10:\n                return _context4.abrupt(\"return\", wrapped);\n\n              case 11:\n                _context4.next = 13;\n                return this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.baseMintAddress);\n\n              case 13:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function findBaseTokenAccountsForOwner(_x5, _x6) {\n        return _findBaseTokenAccountsForOwner.apply(this, arguments);\n      }\n\n      return findBaseTokenAccountsForOwner;\n    }()\n  }, {\n    key: \"getTokenAccountsByOwnerForMint\",\n    value: function () {\n      var _getTokenAccountsByOwnerForMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection, ownerAddress, mintAddress) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return connection.getTokenAccountsByOwner(ownerAddress, {\n                  mint: mintAddress\n                });\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getTokenAccountsByOwnerForMint(_x7, _x8, _x9) {\n        return _getTokenAccountsByOwnerForMint.apply(this, arguments);\n      }\n\n      return getTokenAccountsByOwnerForMint;\n    }()\n  }, {\n    key: \"findQuoteTokenAccountsForOwner\",\n    value: function () {\n      var _findQuoteTokenAccountsForOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection, ownerAddress) {\n        var includeUnwrappedSol,\n            _yield$Promise$all5,\n            _yield$Promise$all6,\n            wrapped,\n            unwrapped,\n            _args6 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                includeUnwrappedSol = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : false;\n\n                if (!(this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _context6.next = 4;\n                return Promise.all([this.findQuoteTokenAccountsForOwner(connection, ownerAddress, false), connection.getAccountInfo(ownerAddress)]);\n\n              case 4:\n                _yield$Promise$all5 = _context6.sent;\n                _yield$Promise$all6 = _slicedToArray(_yield$Promise$all5, 2);\n                wrapped = _yield$Promise$all6[0];\n                unwrapped = _yield$Promise$all6[1];\n\n                if (!(unwrapped !== null)) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", [{\n                  pubkey: ownerAddress,\n                  account: unwrapped\n                }].concat(_toConsumableArray(wrapped)));\n\n              case 10:\n                return _context6.abrupt(\"return\", wrapped);\n\n              case 11:\n                _context6.next = 13;\n                return this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.quoteMintAddress);\n\n              case 13:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function findQuoteTokenAccountsForOwner(_x10, _x11) {\n        return _findQuoteTokenAccountsForOwner.apply(this, arguments);\n      }\n\n      return findQuoteTokenAccountsForOwner;\n    }()\n  }, {\n    key: \"findOpenOrdersAccountsForOwner\",\n    value: function () {\n      var _findOpenOrdersAccountsForOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(connection, ownerAddress) {\n        var cacheDurationMs,\n            strOwner,\n            now,\n            openOrdersAccountsForOwner,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                cacheDurationMs = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : 0;\n                strOwner = ownerAddress.toBase58();\n                now = new Date().getTime();\n\n                if (!(strOwner in this._openOrdersAccountsCache && now - this._openOrdersAccountsCache[strOwner].ts < cacheDurationMs)) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", this._openOrdersAccountsCache[strOwner].accounts);\n\n              case 5:\n                _context7.next = 7;\n                return OpenOrders.findForMarketAndOwner(connection, this.address, ownerAddress, this._programId);\n\n              case 7:\n                openOrdersAccountsForOwner = _context7.sent;\n                this._openOrdersAccountsCache[strOwner] = {\n                  accounts: openOrdersAccountsForOwner,\n                  ts: now\n                };\n                return _context7.abrupt(\"return\", openOrdersAccountsForOwner);\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function findOpenOrdersAccountsForOwner(_x12, _x13) {\n        return _findOpenOrdersAccountsForOwner.apply(this, arguments);\n      }\n\n      return findOpenOrdersAccountsForOwner;\n    }()\n  }, {\n    key: \"placeOrder\",\n    value: function () {\n      var _placeOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connection, _ref) {\n        var owner, payer, side, price, size, _ref$orderType, orderType, clientId, openOrdersAddressKey, feeDiscountPubkey, _yield$this$makePlace, transaction, signers;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                owner = _ref.owner, payer = _ref.payer, side = _ref.side, price = _ref.price, size = _ref.size, _ref$orderType = _ref.orderType, orderType = _ref$orderType === void 0 ? 'limit' : _ref$orderType, clientId = _ref.clientId, openOrdersAddressKey = _ref.openOrdersAddressKey, feeDiscountPubkey = _ref.feeDiscountPubkey;\n                _context8.next = 3;\n                return this.makePlaceOrderTransaction(connection, {\n                  owner: owner,\n                  payer: payer,\n                  side: side,\n                  price: price,\n                  size: size,\n                  orderType: orderType,\n                  clientId: clientId,\n                  openOrdersAddressKey: openOrdersAddressKey,\n                  feeDiscountPubkey: feeDiscountPubkey\n                });\n\n              case 3:\n                _yield$this$makePlace = _context8.sent;\n                transaction = _yield$this$makePlace.transaction;\n                signers = _yield$this$makePlace.signers;\n                _context8.next = 8;\n                return this._sendTransaction(connection, transaction, [owner].concat(_toConsumableArray(signers)));\n\n              case 8:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function placeOrder(_x14, _x15) {\n        return _placeOrder.apply(this, arguments);\n      }\n\n      return placeOrder;\n    }()\n  }, {\n    key: \"getSplTokenBalanceFromAccountInfo\",\n    value: function getSplTokenBalanceFromAccountInfo(accountInfo, decimals) {\n      return divideBnToNumber(new bn_js_1.default(accountInfo.data.slice(64, 72), 10, 'le'), new bn_js_1.default(10).pow(new bn_js_1.default(decimals)));\n    }\n  }, {\n    key: \"findFeeDiscountKeys\",\n    value: function () {\n      var _findFeeDiscountKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(connection, ownerAddress) {\n        var _this = this;\n\n        var cacheDurationMs,\n            sortedAccounts,\n            now,\n            strOwner,\n            msrmAccounts,\n            srmAccounts,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                cacheDurationMs = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : 0;\n                sortedAccounts = [];\n                now = new Date().getTime();\n                strOwner = ownerAddress.toBase58();\n\n                if (!(strOwner in this._feeDiscountKeysCache && now - this._feeDiscountKeysCache[strOwner].ts < cacheDurationMs)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", this._feeDiscountKeysCache[strOwner].accounts);\n\n              case 6:\n                if (!this.supportsSrmFeeDiscounts) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                _context9.next = 9;\n                return this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.MSRM_MINT);\n\n              case 9:\n                msrmAccounts = _context9.sent.map(function (_ref2) {\n                  var pubkey = _ref2.pubkey,\n                      account = _ref2.account;\n\n                  var balance = _this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.MSRM_DECIMALS);\n\n                  return {\n                    pubkey: pubkey,\n                    mint: token_instructions_1.MSRM_MINT,\n                    balance: balance,\n                    feeTier: fees_1.getFeeTier(balance, 0)\n                  };\n                });\n                _context9.next = 12;\n                return this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.SRM_MINT);\n\n              case 12:\n                srmAccounts = _context9.sent.map(function (_ref3) {\n                  var pubkey = _ref3.pubkey,\n                      account = _ref3.account;\n\n                  var balance = _this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.SRM_DECIMALS);\n\n                  return {\n                    pubkey: pubkey,\n                    mint: token_instructions_1.SRM_MINT,\n                    balance: balance,\n                    feeTier: fees_1.getFeeTier(0, balance)\n                  };\n                });\n                sortedAccounts = msrmAccounts.concat(srmAccounts).sort(function (a, b) {\n                  if (a.feeTier > b.feeTier) {\n                    return -1;\n                  } else if (a.feeTier < b.feeTier) {\n                    return 1;\n                  } else {\n                    if (a.balance > b.balance) {\n                      return -1;\n                    } else if (a.balance < b.balance) {\n                      return 1;\n                    } else {\n                      return 0;\n                    }\n                  }\n                });\n\n              case 14:\n                this._feeDiscountKeysCache[strOwner] = {\n                  accounts: sortedAccounts,\n                  ts: now\n                };\n                return _context9.abrupt(\"return\", sortedAccounts);\n\n              case 16:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function findFeeDiscountKeys(_x16, _x17) {\n        return _findFeeDiscountKeys.apply(this, arguments);\n      }\n\n      return findFeeDiscountKeys;\n    }()\n  }, {\n    key: \"findBestFeeDiscountKey\",\n    value: function () {\n      var _findBestFeeDiscountKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(connection, ownerAddress) {\n        var cacheDurationMs,\n            accounts,\n            _args10 = arguments;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                cacheDurationMs = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : 0;\n                _context10.next = 3;\n                return this.findFeeDiscountKeys(connection, ownerAddress, cacheDurationMs);\n\n              case 3:\n                accounts = _context10.sent;\n\n                if (!(accounts.length > 0)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", {\n                  pubkey: accounts[0].pubkey,\n                  feeTier: accounts[0].feeTier\n                });\n\n              case 6:\n                return _context10.abrupt(\"return\", {\n                  pubkey: null,\n                  feeTier: 0\n                });\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function findBestFeeDiscountKey(_x18, _x19) {\n        return _findBestFeeDiscountKey.apply(this, arguments);\n      }\n\n      return findBestFeeDiscountKey;\n    }()\n  }, {\n    key: \"makePlaceOrderTransaction\",\n    value: function () {\n      var _makePlaceOrderTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(connection, _ref4) {\n        var owner,\n            payer,\n            side,\n            price,\n            size,\n            _ref4$orderType,\n            orderType,\n            clientId,\n            openOrdersAddressKey,\n            _ref4$feeDiscountPubk,\n            feeDiscountPubkey,\n            cacheDurationMs,\n            feeDiscountPubkeyCacheDurationMs,\n            _a,\n            _b,\n            ownerAddress,\n            openOrdersAccounts,\n            transaction,\n            signers,\n            openOrdersAddress,\n            newOpenOrdersAccount,\n            wrappedSolAccount,\n            lamports,\n            placeOrderInstruction,\n            _args11 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                owner = _ref4.owner, payer = _ref4.payer, side = _ref4.side, price = _ref4.price, size = _ref4.size, _ref4$orderType = _ref4.orderType, orderType = _ref4$orderType === void 0 ? 'limit' : _ref4$orderType, clientId = _ref4.clientId, openOrdersAddressKey = _ref4.openOrdersAddressKey, _ref4$feeDiscountPubk = _ref4.feeDiscountPubkey, feeDiscountPubkey = _ref4$feeDiscountPubk === void 0 ? null : _ref4$feeDiscountPubk;\n                cacheDurationMs = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : 0;\n                feeDiscountPubkeyCacheDurationMs = _args11.length > 3 && _args11[3] !== undefined ? _args11[3] : 0;\n                // @ts-ignore\n                ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n                _context11.next = 6;\n                return this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs);\n\n              case 6:\n                openOrdersAccounts = _context11.sent;\n                transaction = new web3_js_1.Transaction();\n                signers = []; // Fetch an SRM fee discount key if the market supports discounts and it is not supplied\n\n                _context11.t0 = feeDiscountPubkey;\n\n                if (_context11.t0) {\n                  _context11.next = 19;\n                  break;\n                }\n\n                if (!this.supportsSrmFeeDiscounts) {\n                  _context11.next = 17;\n                  break;\n                }\n\n                _context11.next = 14;\n                return this.findBestFeeDiscountKey(connection, ownerAddress, feeDiscountPubkeyCacheDurationMs);\n\n              case 14:\n                _context11.t1 = _context11.sent.pubkey;\n                _context11.next = 18;\n                break;\n\n              case 17:\n                _context11.t1 = null;\n\n              case 18:\n                _context11.t0 = _context11.t1;\n\n              case 19:\n                feeDiscountPubkey = _context11.t0;\n\n                if (!(openOrdersAccounts.length === 0)) {\n                  _context11.next = 32;\n                  break;\n                }\n\n                newOpenOrdersAccount = new web3_js_1.Account();\n                _context11.t2 = transaction;\n                _context11.next = 25;\n                return OpenOrders.makeCreateAccountTransaction(connection, this.address, ownerAddress, newOpenOrdersAccount.publicKey, this._programId);\n\n              case 25:\n                _context11.t3 = _context11.sent;\n\n                _context11.t2.add.call(_context11.t2, _context11.t3);\n\n                openOrdersAddress = newOpenOrdersAccount.publicKey;\n                signers.push(newOpenOrdersAccount); // refresh the cache of open order accounts on next fetch\n\n                this._openOrdersAccountsCache[ownerAddress.toBase58()].ts = 0;\n                _context11.next = 33;\n                break;\n\n              case 32:\n                if (openOrdersAddressKey) {\n                  openOrdersAddress = openOrdersAddressKey;\n                } else {\n                  openOrdersAddress = openOrdersAccounts[0].address;\n                }\n\n              case 33:\n                wrappedSolAccount = null;\n\n                if (!payer.equals(ownerAddress)) {\n                  _context11.next = 45;\n                  break;\n                }\n\n                if (!(side === 'buy' && this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) || side === 'sell' && this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT))) {\n                  _context11.next = 44;\n                  break;\n                }\n\n                wrappedSolAccount = new web3_js_1.Account();\n\n                if (side === 'buy') {\n                  lamports = Math.round(price * size * 1.01 * web3_js_1.LAMPORTS_PER_SOL);\n\n                  if (openOrdersAccounts.length > 0) {\n                    lamports -= openOrdersAccounts[0].quoteTokenFree.toNumber();\n                  }\n                } else {\n                  lamports = Math.round(size * web3_js_1.LAMPORTS_PER_SOL);\n\n                  if (openOrdersAccounts.length > 0) {\n                    lamports -= openOrdersAccounts[0].baseTokenFree.toNumber();\n                  }\n                }\n\n                lamports = Math.max(lamports, 0) + 1e7;\n                transaction.add(web3_js_1.SystemProgram.createAccount({\n                  fromPubkey: ownerAddress,\n                  newAccountPubkey: wrappedSolAccount.publicKey,\n                  lamports: lamports,\n                  space: 165,\n                  programId: token_instructions_1.TOKEN_PROGRAM_ID\n                }));\n                transaction.add(token_instructions_1.initializeAccount({\n                  account: wrappedSolAccount.publicKey,\n                  mint: token_instructions_1.WRAPPED_SOL_MINT,\n                  owner: ownerAddress\n                }));\n                signers.push(wrappedSolAccount);\n                _context11.next = 45;\n                break;\n\n              case 44:\n                throw new Error('Invalid payer account');\n\n              case 45:\n                placeOrderInstruction = this.makePlaceOrderInstruction(connection, {\n                  owner: owner,\n                  payer: (_b = wrappedSolAccount === null || wrappedSolAccount === void 0 ? void 0 : wrappedSolAccount.publicKey) !== null && _b !== void 0 ? _b : payer,\n                  side: side,\n                  price: price,\n                  size: size,\n                  orderType: orderType,\n                  clientId: clientId,\n                  openOrdersAddressKey: openOrdersAddress,\n                  feeDiscountPubkey: feeDiscountPubkey\n                });\n                transaction.add(placeOrderInstruction);\n\n                if (wrappedSolAccount) {\n                  transaction.add(token_instructions_1.closeAccount({\n                    source: wrappedSolAccount.publicKey,\n                    destination: ownerAddress,\n                    owner: ownerAddress\n                  }));\n                }\n\n                return _context11.abrupt(\"return\", {\n                  transaction: transaction,\n                  signers: signers,\n                  payer: owner\n                });\n\n              case 49:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function makePlaceOrderTransaction(_x20, _x21) {\n        return _makePlaceOrderTransaction.apply(this, arguments);\n      }\n\n      return makePlaceOrderTransaction;\n    }()\n  }, {\n    key: \"makePlaceOrderInstruction\",\n    value: function makePlaceOrderInstruction(connection, _ref5) {\n      var owner = _ref5.owner,\n          payer = _ref5.payer,\n          side = _ref5.side,\n          price = _ref5.price,\n          size = _ref5.size,\n          _ref5$orderType = _ref5.orderType,\n          orderType = _ref5$orderType === void 0 ? 'limit' : _ref5$orderType,\n          clientId = _ref5.clientId,\n          openOrdersAddressKey = _ref5.openOrdersAddressKey,\n          _ref5$feeDiscountPubk = _ref5.feeDiscountPubkey,\n          feeDiscountPubkey = _ref5$feeDiscountPubk === void 0 ? null : _ref5$feeDiscountPubk;\n\n      var _a; // @ts-ignore\n\n\n      var ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n\n      if (this.baseSizeNumberToLots(size).lte(new bn_js_1.default(0))) {\n        throw new Error('size too small');\n      }\n\n      if (this.priceNumberToLots(price).lte(new bn_js_1.default(0))) {\n        throw new Error('invalid price');\n      }\n\n      if (!this.supportsSrmFeeDiscounts) {\n        feeDiscountPubkey = null;\n      }\n\n      return instructions_1.DexInstructions.newOrder({\n        market: this.address,\n        requestQueue: this._decoded.requestQueue,\n        baseVault: this._decoded.baseVault,\n        quoteVault: this._decoded.quoteVault,\n        openOrders: openOrdersAddressKey,\n        owner: ownerAddress,\n        payer: payer,\n        side: side,\n        limitPrice: this.priceNumberToLots(price),\n        maxQuantity: this.baseSizeNumberToLots(size),\n        orderType: orderType,\n        clientId: clientId,\n        programId: this._programId,\n        feeDiscountPubkey: feeDiscountPubkey\n      });\n    }\n  }, {\n    key: \"_sendTransaction\",\n    value: function () {\n      var _sendTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(connection, transaction, signers) {\n        var signature, _yield$connection$con, value;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return connection.sendTransaction(transaction, signers, {\n                  skipPreflight: this._skipPreflight\n                });\n\n              case 2:\n                signature = _context12.sent;\n                _context12.next = 5;\n                return connection.confirmTransaction(signature, this._commitment);\n\n              case 5:\n                _yield$connection$con = _context12.sent;\n                value = _yield$connection$con.value;\n\n                if (!(value === null || value === void 0 ? void 0 : value.err)) {\n                  _context12.next = 9;\n                  break;\n                }\n\n                throw new Error(JSON.stringify(value.err));\n\n              case 9:\n                return _context12.abrupt(\"return\", signature);\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function _sendTransaction(_x22, _x23, _x24) {\n        return _sendTransaction2.apply(this, arguments);\n      }\n\n      return _sendTransaction;\n    }()\n  }, {\n    key: \"cancelOrderByClientId\",\n    value: function () {\n      var _cancelOrderByClientId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(connection, owner, openOrders, clientId) {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.makeCancelOrderByClientIdTransaction(connection, owner.publicKey, openOrders, clientId);\n\n              case 2:\n                transaction = _context13.sent;\n                _context13.next = 5;\n                return this._sendTransaction(connection, transaction, [owner]);\n\n              case 5:\n                return _context13.abrupt(\"return\", _context13.sent);\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function cancelOrderByClientId(_x25, _x26, _x27, _x28) {\n        return _cancelOrderByClientId.apply(this, arguments);\n      }\n\n      return cancelOrderByClientId;\n    }()\n  }, {\n    key: \"makeCancelOrderByClientIdTransaction\",\n    value: function () {\n      var _makeCancelOrderByClientIdTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(connection, owner, openOrders, clientId) {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                transaction = new web3_js_1.Transaction();\n                transaction.add(instructions_1.DexInstructions.cancelOrderByClientId({\n                  market: this.address,\n                  owner: owner,\n                  openOrders: openOrders,\n                  requestQueue: this._decoded.requestQueue,\n                  clientId: clientId,\n                  programId: this._programId\n                }));\n                return _context14.abrupt(\"return\", transaction);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function makeCancelOrderByClientIdTransaction(_x29, _x30, _x31, _x32) {\n        return _makeCancelOrderByClientIdTransaction.apply(this, arguments);\n      }\n\n      return makeCancelOrderByClientIdTransaction;\n    }()\n  }, {\n    key: \"cancelOrder\",\n    value: function () {\n      var _cancelOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(connection, owner, order) {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.makeCancelOrderTransaction(connection, owner.publicKey, order);\n\n              case 2:\n                transaction = _context15.sent;\n                _context15.next = 5;\n                return this._sendTransaction(connection, transaction, [owner]);\n\n              case 5:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function cancelOrder(_x33, _x34, _x35) {\n        return _cancelOrder.apply(this, arguments);\n      }\n\n      return cancelOrder;\n    }()\n  }, {\n    key: \"makeCancelOrderTransaction\",\n    value: function () {\n      var _makeCancelOrderTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(connection, owner, order) {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                transaction = new web3_js_1.Transaction();\n                transaction.add(this.makeCancelOrderInstruction(connection, owner, order));\n                return _context16.abrupt(\"return\", transaction);\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function makeCancelOrderTransaction(_x36, _x37, _x38) {\n        return _makeCancelOrderTransaction.apply(this, arguments);\n      }\n\n      return makeCancelOrderTransaction;\n    }()\n  }, {\n    key: \"makeCancelOrderInstruction\",\n    value: function makeCancelOrderInstruction(connection, owner, order) {\n      return instructions_1.DexInstructions.cancelOrder({\n        market: this.address,\n        owner: owner,\n        openOrders: order.openOrdersAddress,\n        requestQueue: this._decoded.requestQueue,\n        side: order.side,\n        orderId: order.orderId,\n        openOrdersSlot: order.openOrdersSlot,\n        programId: this._programId\n      });\n    }\n  }, {\n    key: \"settleFunds\",\n    value: function () {\n      var _settleFunds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(connection, owner, openOrders, baseWallet, quoteWallet) {\n        var referrerQuoteWallet,\n            _yield$this$makeSettl,\n            transaction,\n            signers,\n            _args17 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                referrerQuoteWallet = _args17.length > 5 && _args17[5] !== undefined ? _args17[5] : null;\n\n                if (openOrders.owner.equals(owner.publicKey)) {\n                  _context17.next = 3;\n                  break;\n                }\n\n                throw new Error('Invalid open orders account');\n\n              case 3:\n                if (!(referrerQuoteWallet && !this.supportsReferralFees)) {\n                  _context17.next = 5;\n                  break;\n                }\n\n                throw new Error('This program ID does not support referrerQuoteWallet');\n\n              case 5:\n                _context17.next = 7;\n                return this.makeSettleFundsTransaction(connection, openOrders, baseWallet, quoteWallet, referrerQuoteWallet);\n\n              case 7:\n                _yield$this$makeSettl = _context17.sent;\n                transaction = _yield$this$makeSettl.transaction;\n                signers = _yield$this$makeSettl.signers;\n                _context17.next = 12;\n                return this._sendTransaction(connection, transaction, [owner].concat(_toConsumableArray(signers)));\n\n              case 12:\n                return _context17.abrupt(\"return\", _context17.sent);\n\n              case 13:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function settleFunds(_x39, _x40, _x41, _x42, _x43) {\n        return _settleFunds.apply(this, arguments);\n      }\n\n      return settleFunds;\n    }()\n  }, {\n    key: \"makeSettleFundsTransaction\",\n    value: function () {\n      var _makeSettleFundsTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(connection, openOrders, baseWallet, quoteWallet) {\n        var referrerQuoteWallet,\n            vaultSigner,\n            transaction,\n            signers,\n            wrappedSolAccount,\n            _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                referrerQuoteWallet = _args18.length > 4 && _args18[4] !== undefined ? _args18[4] : null;\n                _context18.next = 3;\n                return web3_js_1.PublicKey.createProgramAddress([this.address.toBuffer(), this._decoded.vaultSignerNonce.toArrayLike(buffer_1.Buffer, 'le', 8)], this._programId);\n\n              case 3:\n                vaultSigner = _context18.sent;\n                transaction = new web3_js_1.Transaction();\n                signers = [];\n                wrappedSolAccount = null;\n\n                if (!(this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && baseWallet.equals(openOrders.owner) || this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && quoteWallet.equals(openOrders.owner))) {\n                  _context18.next = 22;\n                  break;\n                }\n\n                wrappedSolAccount = new web3_js_1.Account();\n                _context18.t0 = transaction;\n                _context18.t1 = web3_js_1.SystemProgram;\n                _context18.t2 = openOrders.owner;\n                _context18.t3 = wrappedSolAccount.publicKey;\n                _context18.next = 15;\n                return connection.getMinimumBalanceForRentExemption(165);\n\n              case 15:\n                _context18.t4 = _context18.sent;\n                _context18.t5 = token_instructions_1.TOKEN_PROGRAM_ID;\n                _context18.t6 = {\n                  fromPubkey: _context18.t2,\n                  newAccountPubkey: _context18.t3,\n                  lamports: _context18.t4,\n                  space: 165,\n                  programId: _context18.t5\n                };\n                _context18.t7 = _context18.t1.createAccount.call(_context18.t1, _context18.t6);\n\n                _context18.t0.add.call(_context18.t0, _context18.t7);\n\n                transaction.add(token_instructions_1.initializeAccount({\n                  account: wrappedSolAccount.publicKey,\n                  mint: token_instructions_1.WRAPPED_SOL_MINT,\n                  owner: openOrders.owner\n                }));\n                signers.push(wrappedSolAccount);\n\n              case 22:\n                transaction.add(instructions_1.DexInstructions.settleFunds({\n                  market: this.address,\n                  openOrders: openOrders.address,\n                  owner: openOrders.owner,\n                  baseVault: this._decoded.baseVault,\n                  quoteVault: this._decoded.quoteVault,\n                  baseWallet: baseWallet.equals(openOrders.owner) && wrappedSolAccount ? wrappedSolAccount.publicKey : baseWallet,\n                  quoteWallet: quoteWallet.equals(openOrders.owner) && wrappedSolAccount ? wrappedSolAccount.publicKey : quoteWallet,\n                  vaultSigner: vaultSigner,\n                  programId: this._programId,\n                  referrerQuoteWallet: referrerQuoteWallet\n                }));\n\n                if (wrappedSolAccount) {\n                  transaction.add(token_instructions_1.closeAccount({\n                    source: wrappedSolAccount.publicKey,\n                    destination: openOrders.owner,\n                    owner: openOrders.owner\n                  }));\n                }\n\n                return _context18.abrupt(\"return\", {\n                  transaction: transaction,\n                  signers: signers,\n                  payer: openOrders.owner\n                });\n\n              case 25:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function makeSettleFundsTransaction(_x44, _x45, _x46, _x47) {\n        return _makeSettleFundsTransaction.apply(this, arguments);\n      }\n\n      return makeSettleFundsTransaction;\n    }()\n  }, {\n    key: \"matchOrders\",\n    value: function () {\n      var _matchOrders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(connection, feePayer, limit) {\n        var tx;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                tx = this.makeMatchOrdersTransaction(limit);\n                _context19.next = 3;\n                return this._sendTransaction(connection, tx, [feePayer]);\n\n              case 3:\n                return _context19.abrupt(\"return\", _context19.sent);\n\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function matchOrders(_x48, _x49, _x50) {\n        return _matchOrders.apply(this, arguments);\n      }\n\n      return matchOrders;\n    }()\n  }, {\n    key: \"makeMatchOrdersTransaction\",\n    value: function makeMatchOrdersTransaction(limit) {\n      var tx = new web3_js_1.Transaction();\n      tx.add(instructions_1.DexInstructions.matchOrders({\n        market: this.address,\n        requestQueue: this._decoded.requestQueue,\n        eventQueue: this._decoded.eventQueue,\n        bids: this._decoded.bids,\n        asks: this._decoded.asks,\n        baseVault: this._decoded.baseVault,\n        quoteVault: this._decoded.quoteVault,\n        limit: limit,\n        programId: this._programId\n      }));\n      return tx;\n    }\n  }, {\n    key: \"loadRequestQueue\",\n    value: function () {\n      var _loadRequestQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(connection) {\n        var _throwIfNull3, data;\n\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.t0 = throwIfNull;\n                _context20.next = 3;\n                return connection.getAccountInfo(this._decoded.requestQueue);\n\n              case 3:\n                _context20.t1 = _context20.sent;\n                _throwIfNull3 = (0, _context20.t0)(_context20.t1);\n                data = _throwIfNull3.data;\n                return _context20.abrupt(\"return\", queue_1.decodeRequestQueue(data));\n\n              case 7:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function loadRequestQueue(_x51) {\n        return _loadRequestQueue.apply(this, arguments);\n      }\n\n      return loadRequestQueue;\n    }()\n  }, {\n    key: \"loadEventQueue\",\n    value: function () {\n      var _loadEventQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(connection) {\n        var _throwIfNull4, data;\n\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.t0 = throwIfNull;\n                _context21.next = 3;\n                return connection.getAccountInfo(this._decoded.eventQueue);\n\n              case 3:\n                _context21.t1 = _context21.sent;\n                _throwIfNull4 = (0, _context21.t0)(_context21.t1);\n                data = _throwIfNull4.data;\n                return _context21.abrupt(\"return\", queue_1.decodeEventQueue(data));\n\n              case 7:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function loadEventQueue(_x52) {\n        return _loadEventQueue.apply(this, arguments);\n      }\n\n      return loadEventQueue;\n    }()\n  }, {\n    key: \"loadFills\",\n    value: function () {\n      var _loadFills = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(connection) {\n        var limit,\n            _throwIfNull5,\n            data,\n            events,\n            _args22 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                limit = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : 100;\n                _context22.t0 = throwIfNull;\n                _context22.next = 4;\n                return connection.getAccountInfo(this._decoded.eventQueue);\n\n              case 4:\n                _context22.t1 = _context22.sent;\n                _throwIfNull5 = (0, _context22.t0)(_context22.t1);\n                data = _throwIfNull5.data;\n                events = queue_1.decodeEventQueue(data, limit);\n                return _context22.abrupt(\"return\", events.filter(function (event) {\n                  return event.eventFlags.fill && event.nativeQuantityPaid.gtn(0);\n                }).map(this.parseFillEvent.bind(this)));\n\n              case 9:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function loadFills(_x53) {\n        return _loadFills.apply(this, arguments);\n      }\n\n      return loadFills;\n    }()\n  }, {\n    key: \"parseFillEvent\",\n    value: function parseFillEvent(event) {\n      var size, price, side, priceBeforeFees;\n\n      if (event.eventFlags.bid) {\n        side = 'buy';\n        priceBeforeFees = event.eventFlags.maker ? event.nativeQuantityPaid.add(event.nativeFeeOrRebate) : event.nativeQuantityPaid.sub(event.nativeFeeOrRebate);\n        price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityReleased));\n        size = divideBnToNumber(event.nativeQuantityReleased, this._baseSplTokenMultiplier);\n      } else {\n        side = 'sell';\n        priceBeforeFees = event.eventFlags.maker ? event.nativeQuantityReleased.sub(event.nativeFeeOrRebate) : event.nativeQuantityReleased.add(event.nativeFeeOrRebate);\n        price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityPaid));\n        size = divideBnToNumber(event.nativeQuantityPaid, this._baseSplTokenMultiplier);\n      }\n\n      return _objectSpread(_objectSpread({}, event), {}, {\n        side: side,\n        price: price,\n        feeCost: this.quoteSplSizeToNumber(event.nativeFeeOrRebate) * (event.eventFlags.maker ? -1 : 1),\n        size: size\n      });\n    }\n  }, {\n    key: \"priceLotsToNumber\",\n    value: function priceLotsToNumber(price) {\n      return divideBnToNumber(price.mul(this._decoded.quoteLotSize).mul(this._baseSplTokenMultiplier), this._decoded.baseLotSize.mul(this._quoteSplTokenMultiplier));\n    }\n  }, {\n    key: \"priceNumberToLots\",\n    value: function priceNumberToLots(price) {\n      return new bn_js_1.default(Math.round(price * Math.pow(10, this._quoteSplTokenDecimals) * this._decoded.baseLotSize.toNumber() / (Math.pow(10, this._baseSplTokenDecimals) * this._decoded.quoteLotSize.toNumber())));\n    }\n  }, {\n    key: \"baseSplSizeToNumber\",\n    value: function baseSplSizeToNumber(size) {\n      return divideBnToNumber(size, this._baseSplTokenMultiplier);\n    }\n  }, {\n    key: \"quoteSplSizeToNumber\",\n    value: function quoteSplSizeToNumber(size) {\n      return divideBnToNumber(size, this._quoteSplTokenMultiplier);\n    }\n  }, {\n    key: \"baseSizeLotsToNumber\",\n    value: function baseSizeLotsToNumber(size) {\n      return divideBnToNumber(size.mul(this._decoded.baseLotSize), this._baseSplTokenMultiplier);\n    }\n  }, {\n    key: \"baseSizeNumberToLots\",\n    value: function baseSizeNumberToLots(size) {\n      var native = new bn_js_1.default(Math.round(size * Math.pow(10, this._baseSplTokenDecimals))); // rounds down to the nearest lot size\n\n      return native.div(this._decoded.baseLotSize);\n    }\n  }, {\n    key: \"quoteSizeLotsToNumber\",\n    value: function quoteSizeLotsToNumber(size) {\n      return divideBnToNumber(size.mul(this._decoded.quoteLotSize), this._quoteSplTokenMultiplier);\n    }\n  }, {\n    key: \"quoteSizeNumberToLots\",\n    value: function quoteSizeNumberToLots(size) {\n      var native = new bn_js_1.default(Math.round(size * Math.pow(10, this._quoteSplTokenDecimals))); // rounds down to the nearest lot size\n\n      return native.div(this._decoded.quoteLotSize);\n    }\n  }, {\n    key: \"programId\",\n    get: function get() {\n      return this._programId;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this._decoded.ownAddress;\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this.address;\n    }\n  }, {\n    key: \"baseMintAddress\",\n    get: function get() {\n      return this._decoded.baseMint;\n    }\n  }, {\n    key: \"quoteMintAddress\",\n    get: function get() {\n      return this._decoded.quoteMint;\n    }\n  }, {\n    key: \"bidsAddress\",\n    get: function get() {\n      return this._decoded.bids;\n    }\n  }, {\n    key: \"asksAddress\",\n    get: function get() {\n      return this._decoded.asks;\n    }\n  }, {\n    key: \"supportsSrmFeeDiscounts\",\n    get: function get() {\n      return fees_1.supportsSrmFeeDiscounts(this._programId);\n    }\n  }, {\n    key: \"supportsReferralFees\",\n    get: function get() {\n      return tokens_and_markets_1.getLayoutVersion(this._programId) > 1;\n    }\n  }, {\n    key: \"_baseSplTokenMultiplier\",\n    get: function get() {\n      return new bn_js_1.default(10).pow(new bn_js_1.default(this._baseSplTokenDecimals));\n    }\n  }, {\n    key: \"_quoteSplTokenMultiplier\",\n    get: function get() {\n      return new bn_js_1.default(10).pow(new bn_js_1.default(this._quoteSplTokenDecimals));\n    }\n  }, {\n    key: \"minOrderSize\",\n    get: function get() {\n      return this.baseSizeLotsToNumber(new bn_js_1.default(1));\n    }\n  }, {\n    key: \"tickSize\",\n    get: function get() {\n      return this.priceLotsToNumber(new bn_js_1.default(1));\n    }\n  }], [{\n    key: \"getLayout\",\n    value: function getLayout(programId) {\n      if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n        return exports._MARKET_STAT_LAYOUT_V1;\n      }\n\n      return exports._MARKET_STATE_LAYOUT_V2;\n    }\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(connection, address) {\n        var options,\n            programId,\n            _throwIfNull6,\n            owner,\n            data,\n            decoded,\n            _yield$Promise$all7,\n            _yield$Promise$all8,\n            baseMintDecimals,\n            quoteMintDecimals,\n            _args23 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                options = _args23.length > 2 && _args23[2] !== undefined ? _args23[2] : {};\n                programId = _args23.length > 3 ? _args23[3] : undefined;\n                _context23.t0 = throwIfNull;\n                _context23.next = 5;\n                return connection.getAccountInfo(address);\n\n              case 5:\n                _context23.t1 = _context23.sent;\n                _throwIfNull6 = (0, _context23.t0)(_context23.t1, 'Market not found');\n                owner = _throwIfNull6.owner;\n                data = _throwIfNull6.data;\n\n                if (owner.equals(programId)) {\n                  _context23.next = 11;\n                  break;\n                }\n\n                throw new Error('Address not owned by program: ' + owner.toBase58());\n\n              case 11:\n                decoded = this.getLayout(programId).decode(data);\n\n                if (!(!decoded.accountFlags.initialized || !decoded.accountFlags.market || !decoded.ownAddress.equals(address))) {\n                  _context23.next = 14;\n                  break;\n                }\n\n                throw new Error('Invalid market');\n\n              case 14:\n                _context23.next = 16;\n                return Promise.all([getMintDecimals(connection, decoded.baseMint), getMintDecimals(connection, decoded.quoteMint)]);\n\n              case 16:\n                _yield$Promise$all7 = _context23.sent;\n                _yield$Promise$all8 = _slicedToArray(_yield$Promise$all7, 2);\n                baseMintDecimals = _yield$Promise$all8[0];\n                quoteMintDecimals = _yield$Promise$all8[1];\n                return _context23.abrupt(\"return\", new Market(decoded, baseMintDecimals, quoteMintDecimals, options, programId));\n\n              case 21:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function load(_x54, _x55) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return Market;\n}();\n\nexports.Market = Market;\nexports._OPEN_ORDERS_LAYOUT_V1 = buffer_layout_1.struct([buffer_layout_1.blob(5), layout_1.accountFlagsLayout('accountFlags'), layout_1.publicKeyLayout('market'), layout_1.publicKeyLayout('owner'), // These are in spl-token (i.e. not lot) units\nlayout_1.u64('baseTokenFree'), layout_1.u64('baseTokenTotal'), layout_1.u64('quoteTokenFree'), layout_1.u64('quoteTokenTotal'), layout_1.u128('freeSlotBits'), layout_1.u128('isBidBits'), buffer_layout_1.seq(layout_1.u128(), 128, 'orders'), buffer_layout_1.seq(layout_1.u64(), 128, 'clientIds'), buffer_layout_1.blob(7)]);\nexports._OPEN_ORDERS_LAYOUT_V2 = buffer_layout_1.struct([buffer_layout_1.blob(5), layout_1.accountFlagsLayout('accountFlags'), layout_1.publicKeyLayout('market'), layout_1.publicKeyLayout('owner'), // These are in spl-token (i.e. not lot) units\nlayout_1.u64('baseTokenFree'), layout_1.u64('baseTokenTotal'), layout_1.u64('quoteTokenFree'), layout_1.u64('quoteTokenTotal'), layout_1.u128('freeSlotBits'), layout_1.u128('isBidBits'), buffer_layout_1.seq(layout_1.u128(), 128, 'orders'), buffer_layout_1.seq(layout_1.u64(), 128, 'clientIds'), layout_1.u64('referrerRebatesAccrued'), buffer_layout_1.blob(7)]);\n\nvar OpenOrders = /*#__PURE__*/function () {\n  function OpenOrders(address, decoded, programId) {\n    _classCallCheck(this, OpenOrders);\n\n    this.address = address;\n    this._programId = programId;\n    Object.assign(this, decoded);\n  }\n\n  _createClass(OpenOrders, [{\n    key: \"publicKey\",\n    get: function get() {\n      return this.address;\n    }\n  }], [{\n    key: \"getLayout\",\n    value: function getLayout(programId) {\n      if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n        return exports._OPEN_ORDERS_LAYOUT_V1;\n      }\n\n      return exports._OPEN_ORDERS_LAYOUT_V2;\n    }\n  }, {\n    key: \"findForOwner\",\n    value: function () {\n      var _findForOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(connection, ownerAddress, programId) {\n        var filters, accounts;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                filters = [{\n                  memcmp: {\n                    offset: this.getLayout(programId).offsetOf('owner'),\n                    bytes: ownerAddress.toBase58()\n                  }\n                }, {\n                  dataSize: this.getLayout(programId).span\n                }];\n                _context24.next = 3;\n                return getFilteredProgramAccounts(connection, programId, filters);\n\n              case 3:\n                accounts = _context24.sent;\n                return _context24.abrupt(\"return\", accounts.map(function (_ref6) {\n                  var publicKey = _ref6.publicKey,\n                      accountInfo = _ref6.accountInfo;\n                  return OpenOrders.fromAccountInfo(publicKey, accountInfo, programId);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function findForOwner(_x56, _x57, _x58) {\n        return _findForOwner.apply(this, arguments);\n      }\n\n      return findForOwner;\n    }()\n  }, {\n    key: \"findForMarketAndOwner\",\n    value: function () {\n      var _findForMarketAndOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(connection, marketAddress, ownerAddress, programId) {\n        var filters, accounts;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                filters = [{\n                  memcmp: {\n                    offset: this.getLayout(programId).offsetOf('market'),\n                    bytes: marketAddress.toBase58()\n                  }\n                }, {\n                  memcmp: {\n                    offset: this.getLayout(programId).offsetOf('owner'),\n                    bytes: ownerAddress.toBase58()\n                  }\n                }, {\n                  dataSize: this.getLayout(programId).span\n                }];\n                _context25.next = 3;\n                return getFilteredProgramAccounts(connection, programId, filters);\n\n              case 3:\n                accounts = _context25.sent;\n                return _context25.abrupt(\"return\", accounts.map(function (_ref7) {\n                  var publicKey = _ref7.publicKey,\n                      accountInfo = _ref7.accountInfo;\n                  return OpenOrders.fromAccountInfo(publicKey, accountInfo, programId);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function findForMarketAndOwner(_x59, _x60, _x61, _x62) {\n        return _findForMarketAndOwner.apply(this, arguments);\n      }\n\n      return findForMarketAndOwner;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(connection, address, programId) {\n        var accountInfo;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return connection.getAccountInfo(address);\n\n              case 2:\n                accountInfo = _context26.sent;\n\n                if (!(accountInfo === null)) {\n                  _context26.next = 5;\n                  break;\n                }\n\n                throw new Error('Open orders account not found');\n\n              case 5:\n                return _context26.abrupt(\"return\", OpenOrders.fromAccountInfo(address, accountInfo, programId));\n\n              case 6:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26);\n      }));\n\n      function load(_x63, _x64, _x65) {\n        return _load2.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"fromAccountInfo\",\n    value: function fromAccountInfo(address, accountInfo, programId) {\n      var owner = accountInfo.owner,\n          data = accountInfo.data;\n\n      if (!owner.equals(programId)) {\n        throw new Error('Address not owned by program');\n      }\n\n      var decoded = this.getLayout(programId).decode(data);\n\n      if (!decoded.accountFlags.initialized || !decoded.accountFlags.openOrders) {\n        throw new Error('Invalid open orders account');\n      }\n\n      return new OpenOrders(address, decoded, programId);\n    }\n  }, {\n    key: \"makeCreateAccountTransaction\",\n    value: function () {\n      var _makeCreateAccountTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(connection, marketAddress, ownerAddress, newAccountAddress, programId) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.t0 = web3_js_1.SystemProgram;\n                _context27.t1 = ownerAddress;\n                _context27.t2 = newAccountAddress;\n                _context27.next = 5;\n                return connection.getMinimumBalanceForRentExemption(this.getLayout(programId).span);\n\n              case 5:\n                _context27.t3 = _context27.sent;\n                _context27.t4 = this.getLayout(programId).span;\n                _context27.t5 = programId;\n                _context27.t6 = {\n                  fromPubkey: _context27.t1,\n                  newAccountPubkey: _context27.t2,\n                  lamports: _context27.t3,\n                  space: _context27.t4,\n                  programId: _context27.t5\n                };\n                return _context27.abrupt(\"return\", _context27.t0.createAccount.call(_context27.t0, _context27.t6));\n\n              case 10:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function makeCreateAccountTransaction(_x66, _x67, _x68, _x69, _x70) {\n        return _makeCreateAccountTransaction.apply(this, arguments);\n      }\n\n      return makeCreateAccountTransaction;\n    }()\n  }]);\n\n  return OpenOrders;\n}();\n\nexports.OpenOrders = OpenOrders;\nexports.ORDERBOOK_LAYOUT = buffer_layout_1.struct([buffer_layout_1.blob(5), layout_1.accountFlagsLayout('accountFlags'), slab_1.SLAB_LAYOUT.replicate('slab'), buffer_layout_1.blob(7)]);\n\nvar Orderbook = /*#__PURE__*/function () {\n  function Orderbook(market, accountFlags, slab) {\n    _classCallCheck(this, Orderbook);\n\n    if (!accountFlags.initialized || !(accountFlags.bids ^ accountFlags.asks)) {\n      throw new Error('Invalid orderbook');\n    }\n\n    this.market = market;\n    this.isBids = accountFlags.bids;\n    this.slab = slab;\n  }\n\n  _createClass(Orderbook, [{\n    key: \"getL2\",\n    value: function getL2(depth) {\n      var _this2 = this;\n\n      var descending = this.isBids;\n      var levels = []; // (price, size)\n\n      var _iterator = _createForOfIteratorHelper(this.slab.items(descending)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n              key = _step$value.key,\n              quantity = _step$value.quantity;\n          var price = getPriceFromKey(key);\n\n          if (levels.length > 0 && levels[levels.length - 1][0].eq(price)) {\n            levels[levels.length - 1][1].iadd(quantity);\n          } else if (levels.length === depth) {\n            break;\n          } else {\n            levels.push([price, quantity]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return levels.map(function (_ref8) {\n        var _ref9 = _slicedToArray(_ref8, 2),\n            priceLots = _ref9[0],\n            sizeLots = _ref9[1];\n\n        return [_this2.market.priceLotsToNumber(priceLots), _this2.market.baseSizeLotsToNumber(sizeLots), priceLots, sizeLots];\n      });\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator2, _step2, _step2$value, key, ownerSlot, owner, quantity, feeTier, clientOrderId, price;\n\n      return _regeneratorRuntime.wrap(function value$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this.slab);\n              _context28.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context28.next = 10;\n                break;\n              }\n\n              _step2$value = _step2.value, key = _step2$value.key, ownerSlot = _step2$value.ownerSlot, owner = _step2$value.owner, quantity = _step2$value.quantity, feeTier = _step2$value.feeTier, clientOrderId = _step2$value.clientOrderId;\n              price = getPriceFromKey(key);\n              _context28.next = 8;\n              return {\n                orderId: key,\n                clientId: clientOrderId,\n                openOrdersAddress: owner,\n                openOrdersSlot: ownerSlot,\n                feeTier: feeTier,\n                price: this.market.priceLotsToNumber(price),\n                priceLots: price,\n                size: this.market.baseSizeLotsToNumber(quantity),\n                sizeLots: quantity,\n                side: this.isBids ? 'buy' : 'sell'\n              };\n\n            case 8:\n              _context28.next = 3;\n              break;\n\n            case 10:\n              _context28.next = 15;\n              break;\n\n            case 12:\n              _context28.prev = 12;\n              _context28.t0 = _context28[\"catch\"](1);\n\n              _iterator2.e(_context28.t0);\n\n            case 15:\n              _context28.prev = 15;\n\n              _iterator2.f();\n\n              return _context28.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, value, this, [[1, 12, 15, 18]]);\n    })\n  }], [{\n    key: \"decode\",\n    value: function decode(market, buffer) {\n      var _exports$ORDERBOOK_LA = exports.ORDERBOOK_LAYOUT.decode(buffer),\n          accountFlags = _exports$ORDERBOOK_LA.accountFlags,\n          slab = _exports$ORDERBOOK_LA.slab;\n\n      return new Orderbook(market, accountFlags, slab);\n    }\n  }, {\n    key: \"LAYOUT\",\n    get: function get() {\n      return exports.ORDERBOOK_LAYOUT;\n    }\n  }]);\n\n  return Orderbook;\n}();\n\nexports.Orderbook = Orderbook;\n\nfunction getPriceFromKey(key) {\n  return key.ushrn(64);\n}\n\nfunction divideBnToNumber(numerator, denominator) {\n  var quotient = numerator.div(denominator).toNumber();\n  var rem = numerator.umod(denominator);\n  var gcd = rem.gcd(denominator);\n  return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\n}\n\nvar MINT_LAYOUT = buffer_layout_1.struct([buffer_layout_1.blob(44), buffer_layout_1.u8('decimals'), buffer_layout_1.blob(37)]);\n\nfunction getMintDecimals(_x71, _x72) {\n  return _getMintDecimals.apply(this, arguments);\n}\n\nfunction _getMintDecimals() {\n  _getMintDecimals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(connection, mint) {\n    var _throwIfNull7, data, _MINT_LAYOUT$decode, decimals;\n\n    return _regeneratorRuntime.wrap(function _callee28$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            if (!mint.equals(token_instructions_1.WRAPPED_SOL_MINT)) {\n              _context29.next = 2;\n              break;\n            }\n\n            return _context29.abrupt(\"return\", 9);\n\n          case 2:\n            _context29.t0 = throwIfNull;\n            _context29.next = 5;\n            return connection.getAccountInfo(mint);\n\n          case 5:\n            _context29.t1 = _context29.sent;\n            _throwIfNull7 = (0, _context29.t0)(_context29.t1, 'mint not found');\n            data = _throwIfNull7.data;\n            _MINT_LAYOUT$decode = MINT_LAYOUT.decode(data), decimals = _MINT_LAYOUT$decode.decimals;\n            return _context29.abrupt(\"return\", decimals);\n\n          case 10:\n          case \"end\":\n            return _context29.stop();\n        }\n      }\n    }, _callee28);\n  }));\n  return _getMintDecimals.apply(this, arguments);\n}\n\nexports.getMintDecimals = getMintDecimals;\n\nfunction getFilteredProgramAccounts(_x73, _x74, _x75) {\n  return _getFilteredProgramAccounts.apply(this, arguments);\n}\n\nfunction _getFilteredProgramAccounts() {\n  _getFilteredProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(connection, programId, filters) {\n    var resp;\n    return _regeneratorRuntime.wrap(function _callee29$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            _context30.next = 2;\n            return connection._rpcRequest('getProgramAccounts', [programId.toBase58(), {\n              commitment: connection.commitment,\n              filters: filters,\n              encoding: 'base64'\n            }]);\n\n          case 2:\n            resp = _context30.sent;\n\n            if (!resp.error) {\n              _context30.next = 5;\n              break;\n            }\n\n            throw new Error(resp.error.message);\n\n          case 5:\n            return _context30.abrupt(\"return\", resp.result.map(function (_ref10) {\n              var pubkey = _ref10.pubkey,\n                  _ref10$account = _ref10.account,\n                  data = _ref10$account.data,\n                  executable = _ref10$account.executable,\n                  owner = _ref10$account.owner,\n                  lamports = _ref10$account.lamports;\n              return {\n                publicKey: new web3_js_1.PublicKey(pubkey),\n                accountInfo: {\n                  data: buffer_1.Buffer.from(data[0], 'base64'),\n                  executable: executable,\n                  owner: new web3_js_1.PublicKey(owner),\n                  lamports: lamports\n                }\n              };\n            }));\n\n          case 6:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, _callee29);\n  }));\n  return _getFilteredProgramAccounts.apply(this, arguments);\n}\n\nfunction throwIfNull(value) {\n  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'account not found';\n\n  if (value === null) {\n    throw new Error(message);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../src/market.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMintDecimals = exports.Orderbook = exports.ORDERBOOK_LAYOUT = exports.OpenOrders = exports._OPEN_ORDERS_LAYOUT_V2 = exports._OPEN_ORDERS_LAYOUT_V1 = exports.Market = exports._MARKET_STATE_LAYOUT_V2 = exports._MARKET_STAT_LAYOUT_V1 = void 0;\nconst buffer_layout_1 = require(\"buffer-layout\");\nconst layout_1 = require(\"./layout\");\nconst slab_1 = require(\"./slab\");\nconst instructions_1 = require(\"./instructions\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst queue_1 = require(\"./queue\");\nconst buffer_1 = require(\"buffer\");\nconst fees_1 = require(\"./fees\");\nconst token_instructions_1 = require(\"./token-instructions\");\nconst tokens_and_markets_1 = require(\"./tokens_and_markets\");\nexports._MARKET_STAT_LAYOUT_V1 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('ownAddress'),\n    layout_1.u64('vaultSignerNonce'),\n    layout_1.publicKeyLayout('baseMint'),\n    layout_1.publicKeyLayout('quoteMint'),\n    layout_1.publicKeyLayout('baseVault'),\n    layout_1.u64('baseDepositsTotal'),\n    layout_1.u64('baseFeesAccrued'),\n    layout_1.publicKeyLayout('quoteVault'),\n    layout_1.u64('quoteDepositsTotal'),\n    layout_1.u64('quoteFeesAccrued'),\n    layout_1.u64('quoteDustThreshold'),\n    layout_1.publicKeyLayout('requestQueue'),\n    layout_1.publicKeyLayout('eventQueue'),\n    layout_1.publicKeyLayout('bids'),\n    layout_1.publicKeyLayout('asks'),\n    layout_1.u64('baseLotSize'),\n    layout_1.u64('quoteLotSize'),\n    layout_1.u64('feeRateBps'),\n    buffer_layout_1.blob(7),\n]);\nexports._MARKET_STATE_LAYOUT_V2 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('ownAddress'),\n    layout_1.u64('vaultSignerNonce'),\n    layout_1.publicKeyLayout('baseMint'),\n    layout_1.publicKeyLayout('quoteMint'),\n    layout_1.publicKeyLayout('baseVault'),\n    layout_1.u64('baseDepositsTotal'),\n    layout_1.u64('baseFeesAccrued'),\n    layout_1.publicKeyLayout('quoteVault'),\n    layout_1.u64('quoteDepositsTotal'),\n    layout_1.u64('quoteFeesAccrued'),\n    layout_1.u64('quoteDustThreshold'),\n    layout_1.publicKeyLayout('requestQueue'),\n    layout_1.publicKeyLayout('eventQueue'),\n    layout_1.publicKeyLayout('bids'),\n    layout_1.publicKeyLayout('asks'),\n    layout_1.u64('baseLotSize'),\n    layout_1.u64('quoteLotSize'),\n    layout_1.u64('feeRateBps'),\n    layout_1.u64('referrerRebatesAccrued'),\n    buffer_layout_1.blob(7),\n]);\nclass Market {\n    constructor(decoded, baseMintDecimals, quoteMintDecimals, options = {}, programId) {\n        const { skipPreflight = false, commitment = 'recent' } = options;\n        if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n            throw new Error('Invalid market state');\n        }\n        this._decoded = decoded;\n        this._baseSplTokenDecimals = baseMintDecimals;\n        this._quoteSplTokenDecimals = quoteMintDecimals;\n        this._skipPreflight = skipPreflight;\n        this._commitment = commitment;\n        this._programId = programId;\n        this._openOrdersAccountsCache = {};\n        this._feeDiscountKeysCache = {};\n    }\n    static getLayout(programId) {\n        if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n            return exports._MARKET_STAT_LAYOUT_V1;\n        }\n        return exports._MARKET_STATE_LAYOUT_V2;\n    }\n    static async load(connection, address, options = {}, programId) {\n        const { owner, data } = throwIfNull(await connection.getAccountInfo(address), 'Market not found');\n        if (!owner.equals(programId)) {\n            throw new Error('Address not owned by program: ' + owner.toBase58());\n        }\n        const decoded = this.getLayout(programId).decode(data);\n        if (!decoded.accountFlags.initialized ||\n            !decoded.accountFlags.market ||\n            !decoded.ownAddress.equals(address)) {\n            throw new Error('Invalid market');\n        }\n        const [baseMintDecimals, quoteMintDecimals] = await Promise.all([\n            getMintDecimals(connection, decoded.baseMint),\n            getMintDecimals(connection, decoded.quoteMint),\n        ]);\n        return new Market(decoded, baseMintDecimals, quoteMintDecimals, options, programId);\n    }\n    get programId() {\n        return this._programId;\n    }\n    get address() {\n        return this._decoded.ownAddress;\n    }\n    get publicKey() {\n        return this.address;\n    }\n    get baseMintAddress() {\n        return this._decoded.baseMint;\n    }\n    get quoteMintAddress() {\n        return this._decoded.quoteMint;\n    }\n    get bidsAddress() {\n        return this._decoded.bids;\n    }\n    get asksAddress() {\n        return this._decoded.asks;\n    }\n    async loadBids(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.bids));\n        return Orderbook.decode(this, data);\n    }\n    async loadAsks(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.asks));\n        return Orderbook.decode(this, data);\n    }\n    async loadOrdersForOwner(connection, ownerAddress, cacheDurationMs = 0) {\n        const [bids, asks, openOrdersAccounts] = await Promise.all([\n            this.loadBids(connection),\n            this.loadAsks(connection),\n            this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs),\n        ]);\n        return this.filterForOpenOrders(bids, asks, openOrdersAccounts);\n    }\n    filterForOpenOrders(bids, asks, openOrdersAccounts) {\n        return [...bids, ...asks].filter((order) => openOrdersAccounts.some((openOrders) => order.openOrdersAddress.equals(openOrders.address)));\n    }\n    async findBaseTokenAccountsForOwner(connection, ownerAddress, includeUnwrappedSol = false) {\n        if (this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol) {\n            const [wrapped, unwrapped] = await Promise.all([\n                this.findBaseTokenAccountsForOwner(connection, ownerAddress, false),\n                connection.getAccountInfo(ownerAddress),\n            ]);\n            if (unwrapped !== null) {\n                return [{ pubkey: ownerAddress, account: unwrapped }, ...wrapped];\n            }\n            return wrapped;\n        }\n        return await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.baseMintAddress);\n    }\n    async getTokenAccountsByOwnerForMint(connection, ownerAddress, mintAddress) {\n        return (await connection.getTokenAccountsByOwner(ownerAddress, {\n            mint: mintAddress,\n        })).value;\n    }\n    async findQuoteTokenAccountsForOwner(connection, ownerAddress, includeUnwrappedSol = false) {\n        if (this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol) {\n            const [wrapped, unwrapped] = await Promise.all([\n                this.findQuoteTokenAccountsForOwner(connection, ownerAddress, false),\n                connection.getAccountInfo(ownerAddress),\n            ]);\n            if (unwrapped !== null) {\n                return [{ pubkey: ownerAddress, account: unwrapped }, ...wrapped];\n            }\n            return wrapped;\n        }\n        return await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.quoteMintAddress);\n    }\n    async findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs = 0) {\n        const strOwner = ownerAddress.toBase58();\n        const now = new Date().getTime();\n        if (strOwner in this._openOrdersAccountsCache &&\n            now - this._openOrdersAccountsCache[strOwner].ts < cacheDurationMs) {\n            return this._openOrdersAccountsCache[strOwner].accounts;\n        }\n        const openOrdersAccountsForOwner = await OpenOrders.findForMarketAndOwner(connection, this.address, ownerAddress, this._programId);\n        this._openOrdersAccountsCache[strOwner] = {\n            accounts: openOrdersAccountsForOwner,\n            ts: now,\n        };\n        return openOrdersAccountsForOwner;\n    }\n    async placeOrder(connection, { owner, payer, side, price, size, orderType = 'limit', clientId, openOrdersAddressKey, feeDiscountPubkey, }) {\n        const { transaction, signers } = await this.makePlaceOrderTransaction(connection, {\n            owner,\n            payer,\n            side,\n            price,\n            size,\n            orderType,\n            clientId,\n            openOrdersAddressKey,\n            feeDiscountPubkey,\n        });\n        return await this._sendTransaction(connection, transaction, [\n            owner,\n            ...signers,\n        ]);\n    }\n    getSplTokenBalanceFromAccountInfo(accountInfo, decimals) {\n        return divideBnToNumber(new bn_js_1.default(accountInfo.data.slice(64, 72), 10, 'le'), new bn_js_1.default(10).pow(new bn_js_1.default(decimals)));\n    }\n    get supportsSrmFeeDiscounts() {\n        return fees_1.supportsSrmFeeDiscounts(this._programId);\n    }\n    get supportsReferralFees() {\n        return tokens_and_markets_1.getLayoutVersion(this._programId) > 1;\n    }\n    async findFeeDiscountKeys(connection, ownerAddress, cacheDurationMs = 0) {\n        let sortedAccounts = [];\n        const now = new Date().getTime();\n        const strOwner = ownerAddress.toBase58();\n        if (strOwner in this._feeDiscountKeysCache &&\n            now - this._feeDiscountKeysCache[strOwner].ts < cacheDurationMs) {\n            return this._feeDiscountKeysCache[strOwner].accounts;\n        }\n        if (this.supportsSrmFeeDiscounts) {\n            // Fee discounts based on (M)SRM holdings supported in newer versions\n            const msrmAccounts = (await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.MSRM_MINT)).map(({ pubkey, account }) => {\n                const balance = this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.MSRM_DECIMALS);\n                return {\n                    pubkey,\n                    mint: token_instructions_1.MSRM_MINT,\n                    balance,\n                    feeTier: fees_1.getFeeTier(balance, 0),\n                };\n            });\n            const srmAccounts = (await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.SRM_MINT)).map(({ pubkey, account }) => {\n                const balance = this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.SRM_DECIMALS);\n                return {\n                    pubkey,\n                    mint: token_instructions_1.SRM_MINT,\n                    balance,\n                    feeTier: fees_1.getFeeTier(0, balance),\n                };\n            });\n            sortedAccounts = msrmAccounts.concat(srmAccounts).sort((a, b) => {\n                if (a.feeTier > b.feeTier) {\n                    return -1;\n                }\n                else if (a.feeTier < b.feeTier) {\n                    return 1;\n                }\n                else {\n                    if (a.balance > b.balance) {\n                        return -1;\n                    }\n                    else if (a.balance < b.balance) {\n                        return 1;\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n            });\n        }\n        this._feeDiscountKeysCache[strOwner] = {\n            accounts: sortedAccounts,\n            ts: now,\n        };\n        return sortedAccounts;\n    }\n    async findBestFeeDiscountKey(connection, ownerAddress, cacheDurationMs = 0) {\n        const accounts = await this.findFeeDiscountKeys(connection, ownerAddress, cacheDurationMs);\n        if (accounts.length > 0) {\n            return {\n                pubkey: accounts[0].pubkey,\n                feeTier: accounts[0].feeTier,\n            };\n        }\n        return {\n            pubkey: null,\n            feeTier: 0,\n        };\n    }\n    async makePlaceOrderTransaction(connection, { owner, payer, side, price, size, orderType = 'limit', clientId, openOrdersAddressKey, feeDiscountPubkey = null, }, cacheDurationMs = 0, feeDiscountPubkeyCacheDurationMs = 0) {\n        var _a, _b;\n        // @ts-ignore\n        const ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n        const openOrdersAccounts = await this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs);\n        const transaction = new web3_js_1.Transaction();\n        const signers = [];\n        // Fetch an SRM fee discount key if the market supports discounts and it is not supplied\n        feeDiscountPubkey =\n            feeDiscountPubkey ||\n                (this.supportsSrmFeeDiscounts\n                    ? (await this.findBestFeeDiscountKey(connection, ownerAddress, feeDiscountPubkeyCacheDurationMs)).pubkey\n                    : null);\n        let openOrdersAddress;\n        if (openOrdersAccounts.length === 0) {\n            const newOpenOrdersAccount = new web3_js_1.Account();\n            transaction.add(await OpenOrders.makeCreateAccountTransaction(connection, this.address, ownerAddress, newOpenOrdersAccount.publicKey, this._programId));\n            openOrdersAddress = newOpenOrdersAccount.publicKey;\n            signers.push(newOpenOrdersAccount);\n            // refresh the cache of open order accounts on next fetch\n            this._openOrdersAccountsCache[ownerAddress.toBase58()].ts = 0;\n        }\n        else if (openOrdersAddressKey) {\n            openOrdersAddress = openOrdersAddressKey;\n        }\n        else {\n            openOrdersAddress = openOrdersAccounts[0].address;\n        }\n        let wrappedSolAccount = null;\n        if (payer.equals(ownerAddress)) {\n            if ((side === 'buy' && this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT)) ||\n                (side === 'sell' && this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT))) {\n                wrappedSolAccount = new web3_js_1.Account();\n                let lamports;\n                if (side === 'buy') {\n                    lamports = Math.round(price * size * 1.01 * web3_js_1.LAMPORTS_PER_SOL);\n                    if (openOrdersAccounts.length > 0) {\n                        lamports -= openOrdersAccounts[0].quoteTokenFree.toNumber();\n                    }\n                }\n                else {\n                    lamports = Math.round(size * web3_js_1.LAMPORTS_PER_SOL);\n                    if (openOrdersAccounts.length > 0) {\n                        lamports -= openOrdersAccounts[0].baseTokenFree.toNumber();\n                    }\n                }\n                lamports = Math.max(lamports, 0) + 1e7;\n                transaction.add(web3_js_1.SystemProgram.createAccount({\n                    fromPubkey: ownerAddress,\n                    newAccountPubkey: wrappedSolAccount.publicKey,\n                    lamports,\n                    space: 165,\n                    programId: token_instructions_1.TOKEN_PROGRAM_ID,\n                }));\n                transaction.add(token_instructions_1.initializeAccount({\n                    account: wrappedSolAccount.publicKey,\n                    mint: token_instructions_1.WRAPPED_SOL_MINT,\n                    owner: ownerAddress,\n                }));\n                signers.push(wrappedSolAccount);\n            }\n            else {\n                throw new Error('Invalid payer account');\n            }\n        }\n        const placeOrderInstruction = this.makePlaceOrderInstruction(connection, {\n            owner,\n            payer: (_b = wrappedSolAccount === null || wrappedSolAccount === void 0 ? void 0 : wrappedSolAccount.publicKey) !== null && _b !== void 0 ? _b : payer,\n            side,\n            price,\n            size,\n            orderType,\n            clientId,\n            openOrdersAddressKey: openOrdersAddress,\n            feeDiscountPubkey,\n        });\n        transaction.add(placeOrderInstruction);\n        if (wrappedSolAccount) {\n            transaction.add(token_instructions_1.closeAccount({\n                source: wrappedSolAccount.publicKey,\n                destination: ownerAddress,\n                owner: ownerAddress,\n            }));\n        }\n        return { transaction, signers, payer: owner };\n    }\n    makePlaceOrderInstruction(connection, { owner, payer, side, price, size, orderType = 'limit', clientId, openOrdersAddressKey, feeDiscountPubkey = null, }) {\n        var _a;\n        // @ts-ignore\n        const ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n        if (this.baseSizeNumberToLots(size).lte(new bn_js_1.default(0))) {\n            throw new Error('size too small');\n        }\n        if (this.priceNumberToLots(price).lte(new bn_js_1.default(0))) {\n            throw new Error('invalid price');\n        }\n        if (!this.supportsSrmFeeDiscounts) {\n            feeDiscountPubkey = null;\n        }\n        return instructions_1.DexInstructions.newOrder({\n            market: this.address,\n            requestQueue: this._decoded.requestQueue,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            openOrders: openOrdersAddressKey,\n            owner: ownerAddress,\n            payer,\n            side,\n            limitPrice: this.priceNumberToLots(price),\n            maxQuantity: this.baseSizeNumberToLots(size),\n            orderType,\n            clientId,\n            programId: this._programId,\n            feeDiscountPubkey,\n        });\n    }\n    async _sendTransaction(connection, transaction, signers) {\n        const signature = await connection.sendTransaction(transaction, signers, {\n            skipPreflight: this._skipPreflight,\n        });\n        const { value } = await connection.confirmTransaction(signature, this._commitment);\n        if (value === null || value === void 0 ? void 0 : value.err) {\n            throw new Error(JSON.stringify(value.err));\n        }\n        return signature;\n    }\n    async cancelOrderByClientId(connection, owner, openOrders, clientId) {\n        const transaction = await this.makeCancelOrderByClientIdTransaction(connection, owner.publicKey, openOrders, clientId);\n        return await this._sendTransaction(connection, transaction, [owner]);\n    }\n    async makeCancelOrderByClientIdTransaction(connection, owner, openOrders, clientId) {\n        const transaction = new web3_js_1.Transaction();\n        transaction.add(instructions_1.DexInstructions.cancelOrderByClientId({\n            market: this.address,\n            owner,\n            openOrders,\n            requestQueue: this._decoded.requestQueue,\n            clientId,\n            programId: this._programId,\n        }));\n        return transaction;\n    }\n    async cancelOrder(connection, owner, order) {\n        const transaction = await this.makeCancelOrderTransaction(connection, owner.publicKey, order);\n        return await this._sendTransaction(connection, transaction, [owner]);\n    }\n    async makeCancelOrderTransaction(connection, owner, order) {\n        const transaction = new web3_js_1.Transaction();\n        transaction.add(this.makeCancelOrderInstruction(connection, owner, order));\n        return transaction;\n    }\n    makeCancelOrderInstruction(connection, owner, order) {\n        return instructions_1.DexInstructions.cancelOrder({\n            market: this.address,\n            owner,\n            openOrders: order.openOrdersAddress,\n            requestQueue: this._decoded.requestQueue,\n            side: order.side,\n            orderId: order.orderId,\n            openOrdersSlot: order.openOrdersSlot,\n            programId: this._programId,\n        });\n    }\n    async settleFunds(connection, owner, openOrders, baseWallet, quoteWallet, referrerQuoteWallet = null) {\n        if (!openOrders.owner.equals(owner.publicKey)) {\n            throw new Error('Invalid open orders account');\n        }\n        if (referrerQuoteWallet && !this.supportsReferralFees) {\n            throw new Error('This program ID does not support referrerQuoteWallet');\n        }\n        const { transaction, signers } = await this.makeSettleFundsTransaction(connection, openOrders, baseWallet, quoteWallet, referrerQuoteWallet);\n        return await this._sendTransaction(connection, transaction, [\n            owner,\n            ...signers,\n        ]);\n    }\n    async makeSettleFundsTransaction(connection, openOrders, baseWallet, quoteWallet, referrerQuoteWallet = null) {\n        // @ts-ignore\n        const vaultSigner = await web3_js_1.PublicKey.createProgramAddress([\n            this.address.toBuffer(),\n            this._decoded.vaultSignerNonce.toArrayLike(buffer_1.Buffer, 'le', 8),\n        ], this._programId);\n        const transaction = new web3_js_1.Transaction();\n        const signers = [];\n        let wrappedSolAccount = null;\n        if ((this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) &&\n            baseWallet.equals(openOrders.owner)) ||\n            (this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) &&\n                quoteWallet.equals(openOrders.owner))) {\n            wrappedSolAccount = new web3_js_1.Account();\n            transaction.add(web3_js_1.SystemProgram.createAccount({\n                fromPubkey: openOrders.owner,\n                newAccountPubkey: wrappedSolAccount.publicKey,\n                lamports: await connection.getMinimumBalanceForRentExemption(165),\n                space: 165,\n                programId: token_instructions_1.TOKEN_PROGRAM_ID,\n            }));\n            transaction.add(token_instructions_1.initializeAccount({\n                account: wrappedSolAccount.publicKey,\n                mint: token_instructions_1.WRAPPED_SOL_MINT,\n                owner: openOrders.owner,\n            }));\n            signers.push(wrappedSolAccount);\n        }\n        transaction.add(instructions_1.DexInstructions.settleFunds({\n            market: this.address,\n            openOrders: openOrders.address,\n            owner: openOrders.owner,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            baseWallet: baseWallet.equals(openOrders.owner) && wrappedSolAccount\n                ? wrappedSolAccount.publicKey\n                : baseWallet,\n            quoteWallet: quoteWallet.equals(openOrders.owner) && wrappedSolAccount\n                ? wrappedSolAccount.publicKey\n                : quoteWallet,\n            vaultSigner,\n            programId: this._programId,\n            referrerQuoteWallet,\n        }));\n        if (wrappedSolAccount) {\n            transaction.add(token_instructions_1.closeAccount({\n                source: wrappedSolAccount.publicKey,\n                destination: openOrders.owner,\n                owner: openOrders.owner,\n            }));\n        }\n        return { transaction, signers, payer: openOrders.owner };\n    }\n    async matchOrders(connection, feePayer, limit) {\n        const tx = this.makeMatchOrdersTransaction(limit);\n        return await this._sendTransaction(connection, tx, [feePayer]);\n    }\n    makeMatchOrdersTransaction(limit) {\n        const tx = new web3_js_1.Transaction();\n        tx.add(instructions_1.DexInstructions.matchOrders({\n            market: this.address,\n            requestQueue: this._decoded.requestQueue,\n            eventQueue: this._decoded.eventQueue,\n            bids: this._decoded.bids,\n            asks: this._decoded.asks,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            limit,\n            programId: this._programId,\n        }));\n        return tx;\n    }\n    async loadRequestQueue(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.requestQueue));\n        return queue_1.decodeRequestQueue(data);\n    }\n    async loadEventQueue(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.eventQueue));\n        return queue_1.decodeEventQueue(data);\n    }\n    async loadFills(connection, limit = 100) {\n        // TODO: once there's a separate source of fills use that instead\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.eventQueue));\n        const events = queue_1.decodeEventQueue(data, limit);\n        return events\n            .filter((event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0))\n            .map(this.parseFillEvent.bind(this));\n    }\n    parseFillEvent(event) {\n        let size, price, side, priceBeforeFees;\n        if (event.eventFlags.bid) {\n            side = 'buy';\n            priceBeforeFees = event.eventFlags.maker\n                ? event.nativeQuantityPaid.add(event.nativeFeeOrRebate)\n                : event.nativeQuantityPaid.sub(event.nativeFeeOrRebate);\n            price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityReleased));\n            size = divideBnToNumber(event.nativeQuantityReleased, this._baseSplTokenMultiplier);\n        }\n        else {\n            side = 'sell';\n            priceBeforeFees = event.eventFlags.maker\n                ? event.nativeQuantityReleased.sub(event.nativeFeeOrRebate)\n                : event.nativeQuantityReleased.add(event.nativeFeeOrRebate);\n            price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityPaid));\n            size = divideBnToNumber(event.nativeQuantityPaid, this._baseSplTokenMultiplier);\n        }\n        return {\n            ...event,\n            side,\n            price,\n            feeCost: this.quoteSplSizeToNumber(event.nativeFeeOrRebate) *\n                (event.eventFlags.maker ? -1 : 1),\n            size,\n        };\n    }\n    get _baseSplTokenMultiplier() {\n        return new bn_js_1.default(10).pow(new bn_js_1.default(this._baseSplTokenDecimals));\n    }\n    get _quoteSplTokenMultiplier() {\n        return new bn_js_1.default(10).pow(new bn_js_1.default(this._quoteSplTokenDecimals));\n    }\n    priceLotsToNumber(price) {\n        return divideBnToNumber(price.mul(this._decoded.quoteLotSize).mul(this._baseSplTokenMultiplier), this._decoded.baseLotSize.mul(this._quoteSplTokenMultiplier));\n    }\n    priceNumberToLots(price) {\n        return new bn_js_1.default(Math.round((price *\n            Math.pow(10, this._quoteSplTokenDecimals) *\n            this._decoded.baseLotSize.toNumber()) /\n            (Math.pow(10, this._baseSplTokenDecimals) *\n                this._decoded.quoteLotSize.toNumber())));\n    }\n    baseSplSizeToNumber(size) {\n        return divideBnToNumber(size, this._baseSplTokenMultiplier);\n    }\n    quoteSplSizeToNumber(size) {\n        return divideBnToNumber(size, this._quoteSplTokenMultiplier);\n    }\n    baseSizeLotsToNumber(size) {\n        return divideBnToNumber(size.mul(this._decoded.baseLotSize), this._baseSplTokenMultiplier);\n    }\n    baseSizeNumberToLots(size) {\n        const native = new bn_js_1.default(Math.round(size * Math.pow(10, this._baseSplTokenDecimals)));\n        // rounds down to the nearest lot size\n        return native.div(this._decoded.baseLotSize);\n    }\n    quoteSizeLotsToNumber(size) {\n        return divideBnToNumber(size.mul(this._decoded.quoteLotSize), this._quoteSplTokenMultiplier);\n    }\n    quoteSizeNumberToLots(size) {\n        const native = new bn_js_1.default(Math.round(size * Math.pow(10, this._quoteSplTokenDecimals)));\n        // rounds down to the nearest lot size\n        return native.div(this._decoded.quoteLotSize);\n    }\n    get minOrderSize() {\n        return this.baseSizeLotsToNumber(new bn_js_1.default(1));\n    }\n    get tickSize() {\n        return this.priceLotsToNumber(new bn_js_1.default(1));\n    }\n}\nexports.Market = Market;\nexports._OPEN_ORDERS_LAYOUT_V1 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('market'),\n    layout_1.publicKeyLayout('owner'),\n    // These are in spl-token (i.e. not lot) units\n    layout_1.u64('baseTokenFree'),\n    layout_1.u64('baseTokenTotal'),\n    layout_1.u64('quoteTokenFree'),\n    layout_1.u64('quoteTokenTotal'),\n    layout_1.u128('freeSlotBits'),\n    layout_1.u128('isBidBits'),\n    buffer_layout_1.seq(layout_1.u128(), 128, 'orders'),\n    buffer_layout_1.seq(layout_1.u64(), 128, 'clientIds'),\n    buffer_layout_1.blob(7),\n]);\nexports._OPEN_ORDERS_LAYOUT_V2 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('market'),\n    layout_1.publicKeyLayout('owner'),\n    // These are in spl-token (i.e. not lot) units\n    layout_1.u64('baseTokenFree'),\n    layout_1.u64('baseTokenTotal'),\n    layout_1.u64('quoteTokenFree'),\n    layout_1.u64('quoteTokenTotal'),\n    layout_1.u128('freeSlotBits'),\n    layout_1.u128('isBidBits'),\n    buffer_layout_1.seq(layout_1.u128(), 128, 'orders'),\n    buffer_layout_1.seq(layout_1.u64(), 128, 'clientIds'),\n    layout_1.u64('referrerRebatesAccrued'),\n    buffer_layout_1.blob(7),\n]);\nclass OpenOrders {\n    constructor(address, decoded, programId) {\n        this.address = address;\n        this._programId = programId;\n        Object.assign(this, decoded);\n    }\n    static getLayout(programId) {\n        if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n            return exports._OPEN_ORDERS_LAYOUT_V1;\n        }\n        return exports._OPEN_ORDERS_LAYOUT_V2;\n    }\n    static async findForOwner(connection, ownerAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf('owner'),\n                    bytes: ownerAddress.toBase58(),\n                },\n            },\n            {\n                dataSize: this.getLayout(programId).span,\n            },\n        ];\n        const accounts = await getFilteredProgramAccounts(connection, programId, filters);\n        return accounts.map(({ publicKey, accountInfo }) => OpenOrders.fromAccountInfo(publicKey, accountInfo, programId));\n    }\n    static async findForMarketAndOwner(connection, marketAddress, ownerAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf('market'),\n                    bytes: marketAddress.toBase58(),\n                },\n            },\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf('owner'),\n                    bytes: ownerAddress.toBase58(),\n                },\n            },\n            {\n                dataSize: this.getLayout(programId).span,\n            },\n        ];\n        const accounts = await getFilteredProgramAccounts(connection, programId, filters);\n        return accounts.map(({ publicKey, accountInfo }) => OpenOrders.fromAccountInfo(publicKey, accountInfo, programId));\n    }\n    static async load(connection, address, programId) {\n        const accountInfo = await connection.getAccountInfo(address);\n        if (accountInfo === null) {\n            throw new Error('Open orders account not found');\n        }\n        return OpenOrders.fromAccountInfo(address, accountInfo, programId);\n    }\n    static fromAccountInfo(address, accountInfo, programId) {\n        const { owner, data } = accountInfo;\n        if (!owner.equals(programId)) {\n            throw new Error('Address not owned by program');\n        }\n        const decoded = this.getLayout(programId).decode(data);\n        if (!decoded.accountFlags.initialized || !decoded.accountFlags.openOrders) {\n            throw new Error('Invalid open orders account');\n        }\n        return new OpenOrders(address, decoded, programId);\n    }\n    static async makeCreateAccountTransaction(connection, marketAddress, ownerAddress, newAccountAddress, programId) {\n        return web3_js_1.SystemProgram.createAccount({\n            fromPubkey: ownerAddress,\n            newAccountPubkey: newAccountAddress,\n            lamports: await connection.getMinimumBalanceForRentExemption(this.getLayout(programId).span),\n            space: this.getLayout(programId).span,\n            programId,\n        });\n    }\n    get publicKey() {\n        return this.address;\n    }\n}\nexports.OpenOrders = OpenOrders;\nexports.ORDERBOOK_LAYOUT = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    slab_1.SLAB_LAYOUT.replicate('slab'),\n    buffer_layout_1.blob(7),\n]);\nclass Orderbook {\n    constructor(market, accountFlags, slab) {\n        if (!accountFlags.initialized || !(accountFlags.bids ^ accountFlags.asks)) {\n            throw new Error('Invalid orderbook');\n        }\n        this.market = market;\n        this.isBids = accountFlags.bids;\n        this.slab = slab;\n    }\n    static get LAYOUT() {\n        return exports.ORDERBOOK_LAYOUT;\n    }\n    static decode(market, buffer) {\n        const { accountFlags, slab } = exports.ORDERBOOK_LAYOUT.decode(buffer);\n        return new Orderbook(market, accountFlags, slab);\n    }\n    getL2(depth) {\n        const descending = this.isBids;\n        const levels = []; // (price, size)\n        for (const { key, quantity } of this.slab.items(descending)) {\n            const price = getPriceFromKey(key);\n            if (levels.length > 0 && levels[levels.length - 1][0].eq(price)) {\n                levels[levels.length - 1][1].iadd(quantity);\n            }\n            else if (levels.length === depth) {\n                break;\n            }\n            else {\n                levels.push([price, quantity]);\n            }\n        }\n        return levels.map(([priceLots, sizeLots]) => [\n            this.market.priceLotsToNumber(priceLots),\n            this.market.baseSizeLotsToNumber(sizeLots),\n            priceLots,\n            sizeLots,\n        ]);\n    }\n    *[Symbol.iterator]() {\n        for (const { key, ownerSlot, owner, quantity, feeTier, clientOrderId, } of this.slab) {\n            const price = getPriceFromKey(key);\n            yield {\n                orderId: key,\n                clientId: clientOrderId,\n                openOrdersAddress: owner,\n                openOrdersSlot: ownerSlot,\n                feeTier,\n                price: this.market.priceLotsToNumber(price),\n                priceLots: price,\n                size: this.market.baseSizeLotsToNumber(quantity),\n                sizeLots: quantity,\n                side: (this.isBids ? 'buy' : 'sell'),\n            };\n        }\n    }\n}\nexports.Orderbook = Orderbook;\nfunction getPriceFromKey(key) {\n    return key.ushrn(64);\n}\nfunction divideBnToNumber(numerator, denominator) {\n    const quotient = numerator.div(denominator).toNumber();\n    const rem = numerator.umod(denominator);\n    const gcd = rem.gcd(denominator);\n    return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\n}\nconst MINT_LAYOUT = buffer_layout_1.struct([buffer_layout_1.blob(44), buffer_layout_1.u8('decimals'), buffer_layout_1.blob(37)]);\nasync function getMintDecimals(connection, mint) {\n    if (mint.equals(token_instructions_1.WRAPPED_SOL_MINT)) {\n        return 9;\n    }\n    const { data } = throwIfNull(await connection.getAccountInfo(mint), 'mint not found');\n    const { decimals } = MINT_LAYOUT.decode(data);\n    return decimals;\n}\nexports.getMintDecimals = getMintDecimals;\nasync function getFilteredProgramAccounts(connection, programId, filters) {\n    // @ts-ignore\n    const resp = await connection._rpcRequest('getProgramAccounts', [\n        programId.toBase58(),\n        {\n            commitment: connection.commitment,\n            filters,\n            encoding: 'base64',\n        },\n    ]);\n    if (resp.error) {\n        throw new Error(resp.error.message);\n    }\n    return resp.result.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n        publicKey: new web3_js_1.PublicKey(pubkey),\n        accountInfo: {\n            data: buffer_1.Buffer.from(data[0], 'base64'),\n            executable,\n            owner: new web3_js_1.PublicKey(owner),\n            lamports,\n        },\n    }));\n}\nfunction throwIfNull(value, message = 'account not found') {\n    if (value === null) {\n        throw new Error(message);\n    }\n    return value;\n}\n//# sourceMappingURL=market.js.map"]},"metadata":{},"sourceType":"script"}