{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/utils/connection.tsx\";\nimport { useLocalStorageState } from \"./utils\";\nimport { Account, clusterApiUrl, Connection, Transaction } from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { setProgramIds } from \"./ids\";\nimport { notify } from \"./notifications\";\nimport { ExplorerLink } from \"../components/explorerLink\";\nexport const ENDPOINTS = [{\n  name: \"mainnet-beta\",\n  endpoint: \"https://solana-api.projectserum.com/\"\n}, {\n  name: \"testnet\",\n  endpoint: clusterApiUrl(\"testnet\")\n}, {\n  name: \"devnet\",\n  endpoint: clusterApiUrl(\"devnet\")\n}, {\n  name: \"localnet\",\n  endpoint: \"http://127.0.0.1:8899\"\n}];\nconst DEFAULT = ENDPOINTS[0].endpoint;\nconst DEFAULT_SLIPPAGE = 0.25;\nconst ConnectionContext = React.createContext({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  slippage: DEFAULT_SLIPPAGE,\n  setSlippage: val => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name\n});\nexport function ConnectionProvider({\n  children = undefined\n}) {\n  var _ENDPOINTS$find;\n\n  const [endpoint, setEndpoint] = useLocalStorageState(\"connectionEndpts\", ENDPOINTS[0].endpoint);\n  const [slippage, setSlippage] = useLocalStorageState(\"slippage\", DEFAULT_SLIPPAGE.toString());\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [endpoint]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [endpoint]);\n  const env = ((_ENDPOINTS$find = ENDPOINTS.find(end => end.endpoint === endpoint)) === null || _ENDPOINTS$find === void 0 ? void 0 : _ENDPOINTS$find.name) || ENDPOINTS[0].name;\n  setProgramIds(env); // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n  return /*#__PURE__*/React.createElement(ConnectionContext.Provider, {\n    value: {\n      endpoint,\n      setEndpoint,\n      slippage: parseFloat(slippage),\n      setSlippage: val => setSlippage(val.toString()),\n      connection,\n      sendConnection,\n      env\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useConnection() {\n  return useContext(ConnectionContext).connection;\n}\nexport function useSendConnection() {\n  var _useContext;\n\n  return (_useContext = useContext(ConnectionContext)) === null || _useContext === void 0 ? void 0 : _useContext.sendConnection;\n}\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env\n  };\n}\nexport function useSlippageConfig() {\n  const {\n    slippage,\n    setSlippage\n  } = useContext(ConnectionContext);\n  return {\n    slippage,\n    setSlippage\n  };\n}\n\nconst getErrorForTransaction = async (connection, txid) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n  const errors = [];\n\n  if ((tx === null || tx === void 0 ? void 0 : tx.meta) && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport const sendTransaction = async (connection, wallet, instructions, signers, awaitConfirmation = true) => {\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n  transaction.setSigners( // fee payied by the wallet owner\n  wallet.publicKey, ...signers.map(s => s.publicKey));\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment: \"singleGossip\"\n  };\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n\n  if (awaitConfirmation) {\n    const status = (await connection.confirmTransaction(txid, options && options.commitment)).value;\n\n    if (status === null || status === void 0 ? void 0 : status.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: /*#__PURE__*/React.createElement(React.Fragment, null, errors.map(err => /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }\n        }, err)), /*#__PURE__*/React.createElement(ExplorerLink, {\n          address: txid,\n          type: \"transaction\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }\n        })),\n        type: \"error\"\n      });\n      throw new Error(`Raw transaction ${txid} failed (${JSON.stringify(status)})`);\n    }\n  }\n\n  return txid;\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/connection.tsx"],"names":["useLocalStorageState","Account","clusterApiUrl","Connection","Transaction","React","useContext","useEffect","useMemo","setProgramIds","notify","ExplorerLink","ENDPOINTS","name","endpoint","DEFAULT","DEFAULT_SLIPPAGE","ConnectionContext","createContext","setEndpoint","slippage","setSlippage","val","connection","sendConnection","env","ConnectionProvider","children","undefined","toString","find","end","id","onAccountChange","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","parseFloat","useConnection","useSendConnection","useConnectionConfig","context","useSlippageConfig","getErrorForTransaction","txid","confirmTransaction","tx","getParsedConfirmedTransaction","errors","meta","logMessages","forEach","log","regex","m","exec","index","lastIndex","length","push","sendTransaction","wallet","instructions","signers","awaitConfirmation","transaction","instruction","add","recentBlockhash","getRecentBlockhash","blockhash","setSigners","map","s","partialSign","signTransaction","rawTransaction","serialize","options","skipPreflight","commitment","sendRawTransaction","status","value","err","message","description","type","Error","JSON","stringify"],"mappings":"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","sourcesContent":["import { useLocalStorageState } from \"./utils\";\nimport {\n  Account,\n  clusterApiUrl,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { setProgramIds } from \"./ids\";\nimport { notify } from \"./notifications\";\nimport { ExplorerLink } from \"../components/explorerLink\";\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://solana-api.projectserum.com/\",\n  },\n  { name: \"testnet\" as ENV, endpoint: clusterApiUrl(\"testnet\") },\n  { name: \"devnet\" as ENV, endpoint: clusterApiUrl(\"devnet\") },\n  { name: \"localnet\" as ENV, endpoint: \"http://127.0.0.1:8899\" },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\nconst DEFAULT_SLIPPAGE = 0.25;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  slippage: number;\n  setSlippage: (val: number) => void;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  slippage: DEFAULT_SLIPPAGE,\n  setSlippage: (val: number) => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpts\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const [slippage, setSlippage] = useLocalStorageState(\n    \"slippage\",\n    DEFAULT_SLIPPAGE.toString()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        slippage: parseFloat(slippage),\n        setSlippage: (val) => setSlippage(val.toString()),\n        connection,\n        sendConnection,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n  };\n}\n\nexport function useSlippageConfig() {\n  const { slippage, setSlippage } = useContext(ConnectionContext);\n  return { slippage, setSlippage };\n}\n\nconst getErrorForTransaction = async (connection: Connection, txid: string) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Account[],\n  awaitConfirmation = true\n) => {\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  transaction.setSigners(\n    // fee payied by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey)\n  );\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment: \"singleGossip\",\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n\n  if (awaitConfirmation) {\n    const status = (\n      await connection.confirmTransaction(\n        txid,\n        options && (options.commitment as any)\n      )\n    ).value;\n\n    if (status?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(\n        `Raw transaction ${txid} failed (${JSON.stringify(status)})`\n      );\n    }\n  }\n\n  return txid;\n};\n"]},"metadata":{},"sourceType":"module"}