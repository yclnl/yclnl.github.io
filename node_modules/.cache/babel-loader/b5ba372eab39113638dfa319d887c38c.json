{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/components/pool/add.tsx\";\nimport React, { useState } from \"react\";\nimport { addLiquidity, usePoolForBasket, PoolOperation } from \"../../utils/pools\";\nimport { Button, Dropdown, Popover } from \"antd\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { useConnection, useConnectionConfig, useSlippageConfig } from \"../../utils/connection\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { notify } from \"../../utils/notifications\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { DEFAULT_DENOMINATOR, PoolConfigCard } from \"./config\";\nimport \"./add.less\";\nimport { SWAP_PROGRAM_OWNER_FEE_ADDRESS } from \"../../utils/ids\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport { CREATE_POOL_LABEL, ADD_LIQUIDITY_LABEL, generateActionLabel } from \"../labels\";\nimport { PoolAddress } from \"./address\";\nconst antIcon = /*#__PURE__*/React.createElement(LoadingOutlined, {\n  style: {\n    fontSize: 24\n  },\n  spin: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 17\n  }\n});\nexport const AddToLiquidity = () => {\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A === null || A === void 0 ? void 0 : A.mintAddress, B === null || B === void 0 ? void 0 : B.mintAddress]);\n  const {\n    slippage\n  } = useSlippageConfig();\n  const {\n    env\n  } = useConnectionConfig();\n  const [options, setOptions] = useState({\n    curveType: 0,\n    tradeFeeNumerator: 25,\n    tradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerTradeFeeNumerator: 5,\n    ownerTradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerWithdrawFeeNumerator: 0,\n    ownerWithdrawFeeDenominator: DEFAULT_DENOMINATOR\n  });\n  const executeAction = !connected ? wallet.connect : async () => {\n    if (A.account && B.account && A.mint && B.mint) {\n      setPendingTx(true);\n      const components = [{\n        account: A.account,\n        mintAddress: A.mintAddress,\n        amount: A.convertAmount()\n      }, {\n        account: B.account,\n        mintAddress: B.mintAddress,\n        amount: B.convertAmount()\n      }];\n      addLiquidity(connection, wallet, components, slippage, pool, options).then(() => {\n        setPendingTx(false);\n      }).catch(e => {\n        console.log(\"Transaction failed\", e);\n        notify({\n          description: \"Please try again and approve transactions from your wallet\",\n          message: \"Adding liquidity cancelled.\",\n          type: \"error\"\n        });\n        setPendingTx(false);\n      });\n    }\n  };\n  const hasSufficientBalance = A.sufficientBalance() && B.sufficientBalance();\n  const createPoolButton = SWAP_PROGRAM_OWNER_FEE_ADDRESS ? /*#__PURE__*/React.createElement(Button, {\n    className: \"add-button\",\n    onClick: executeAction,\n    disabled: connected && (pendingTx || !A.account || !B.account || A.account === B.account),\n    type: \"primary\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B), pendingTx && /*#__PURE__*/React.createElement(Spin, {\n    indicator: antIcon,\n    className: \"add-spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(Dropdown.Button, {\n    className: \"add-button\",\n    onClick: executeAction,\n    disabled: connected && (pendingTx || !A.account || !B.account || A.account === B.account),\n    type: \"primary\",\n    size: \"large\",\n    overlay: /*#__PURE__*/React.createElement(PoolConfigCard, {\n      options: options,\n      setOptions: setOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 16\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B), pendingTx && /*#__PURE__*/React.createElement(Spin, {\n    indicator: antIcon,\n    className: \"add-spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Popover, {\n    trigger: \"hover\",\n    content: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 300\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"Liquidity providers earn a fixed percentage fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"Read more about providing liquidity.\")), /*#__PURE__*/React.createElement(CurrencyInput, {\n    title: \"Input\",\n    onInputChange: val => {\n      setPoolOperation(PoolOperation.Add);\n\n      if (A.amount !== val) {\n        setLastTypedAccount(A.mintAddress);\n      }\n\n      A.setAmount(val);\n    },\n    amount: A.amount,\n    mint: A.mintAddress,\n    onMintChange: item => {\n      A.setMint(item);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(CurrencyInput, {\n    title: \"Input\",\n    onInputChange: val => {\n      setPoolOperation(PoolOperation.Add);\n\n      if (B.amount !== val) {\n        setLastTypedAccount(B.mintAddress);\n      }\n\n      B.setAmount(val);\n    },\n    amount: B.amount,\n    mint: B.mintAddress,\n    onMintChange: item => {\n      B.setMint(item);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SupplyOverview, {\n    mintAddress: [A.mintAddress, B.mintAddress],\n    pool: pool,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PoolAddress, {\n    pool: pool,\n    style: {\n      marginBottom: 10\n    },\n    showLabel: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  })), pool && /*#__PURE__*/React.createElement(Button, {\n    className: \"add-button\",\n    type: \"primary\",\n    size: \"large\",\n    onClick: executeAction,\n    disabled: connected && (pendingTx || !A.account || !B.account || A.account === B.account || !hasSufficientBalance),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, generateActionLabel(ADD_LIQUIDITY_LABEL, connected, env, A, B), pendingTx && /*#__PURE__*/React.createElement(Spin, {\n    indicator: antIcon,\n    className: \"add-spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  })), !pool && createPoolButton);\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/pool/add.tsx"],"names":["React","useState","addLiquidity","usePoolForBasket","PoolOperation","Button","Dropdown","Popover","useWallet","useConnection","useConnectionConfig","useSlippageConfig","Spin","LoadingOutlined","notify","SupplyOverview","CurrencyInput","DEFAULT_DENOMINATOR","PoolConfigCard","SWAP_PROGRAM_OWNER_FEE_ADDRESS","useCurrencyPairState","CREATE_POOL_LABEL","ADD_LIQUIDITY_LABEL","generateActionLabel","PoolAddress","antIcon","fontSize","AddToLiquidity","wallet","connected","connection","pendingTx","setPendingTx","A","B","setLastTypedAccount","setPoolOperation","pool","mintAddress","slippage","env","options","setOptions","curveType","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","executeAction","connect","account","mint","components","amount","convertAmount","then","catch","e","console","log","description","message","type","hasSufficientBalance","sufficientBalance","createPoolButton","width","val","Add","setAmount","item","setMint","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  addLiquidity,\n  usePoolForBasket,\n  PoolOperation,\n} from \"../../utils/pools\";\nimport { Button, Dropdown, Popover } from \"antd\";\nimport { useWallet } from \"../../utils/wallet\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { notify } from \"../../utils/notifications\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { DEFAULT_DENOMINATOR, PoolConfigCard } from \"./config\";\nimport \"./add.less\";\nimport { PoolConfig } from \"../../models\";\nimport { SWAP_PROGRAM_OWNER_FEE_ADDRESS } from \"../../utils/ids\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport {\n  CREATE_POOL_LABEL,\n  ADD_LIQUIDITY_LABEL,\n  generateActionLabel,\n} from \"../labels\";\nimport { PoolAddress } from \"./address\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const AddToLiquidity = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { env } = useConnectionConfig();\n  const [options, setOptions] = useState<PoolConfig>({\n    curveType: 0,\n    tradeFeeNumerator: 25,\n    tradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerTradeFeeNumerator: 5,\n    ownerTradeFeeDenominator: DEFAULT_DENOMINATOR,\n    ownerWithdrawFeeNumerator: 0,\n    ownerWithdrawFeeDenominator: DEFAULT_DENOMINATOR,\n  });\n\n  const executeAction = !connected\n    ? wallet.connect\n    : async () => {\n        if (A.account && B.account && A.mint && B.mint) {\n          setPendingTx(true);\n          const components = [\n            {\n              account: A.account,\n              mintAddress: A.mintAddress,\n              amount: A.convertAmount(),\n            },\n            {\n              account: B.account,\n              mintAddress: B.mintAddress,\n              amount: B.convertAmount(),\n            },\n          ];\n\n          addLiquidity(connection, wallet, components, slippage, pool, options)\n            .then(() => {\n              setPendingTx(false);\n            })\n            .catch((e) => {\n              console.log(\"Transaction failed\", e);\n              notify({\n                description:\n                  \"Please try again and approve transactions from your wallet\",\n                message: \"Adding liquidity cancelled.\",\n                type: \"error\",\n              });\n              setPendingTx(false);\n            });\n        }\n      };\n\n  const hasSufficientBalance = A.sufficientBalance() && B.sufficientBalance();\n\n  const createPoolButton = SWAP_PROGRAM_OWNER_FEE_ADDRESS ? (\n    <Button\n      className=\"add-button\"\n      onClick={executeAction}\n      disabled={\n        connected &&\n        (pendingTx || !A.account || !B.account || A.account === B.account)\n      }\n      type=\"primary\"\n      size=\"large\"\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Button>\n  ) : (\n    <Dropdown.Button\n      className=\"add-button\"\n      onClick={executeAction}\n      disabled={\n        connected &&\n        (pendingTx || !A.account || !B.account || A.account === B.account)\n      }\n      type=\"primary\"\n      size=\"large\"\n      overlay={<PoolConfigCard options={options} setOptions={setOptions} />}\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, env, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Dropdown.Button>\n  );\n\n  return (\n    <>\n      <div className=\"input-card\">\n        <Popover\n          trigger=\"hover\"\n          content={\n            <div style={{ width: 300 }}>\n              Liquidity providers earn a fixed percentage fee on all trades\n              proportional to their share of the pool. Fees are added to the\n              pool, accrue in real time and can be claimed by withdrawing your\n              liquidity.\n            </div>\n          }\n        >\n          <Button type=\"text\">Read more about providing liquidity.</Button>\n        </Popover>\n\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.Add);\n            if (A.amount !== val) {\n              setLastTypedAccount(A.mintAddress);\n            }\n            A.setAmount(val);\n          }}\n          amount={A.amount}\n          mint={A.mintAddress}\n          onMintChange={(item) => {\n            A.setMint(item);\n          }}\n        />\n        <div>+</div>\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.Add);\n            if (B.amount !== val) {\n              setLastTypedAccount(B.mintAddress);\n            }\n            B.setAmount(val);\n          }}\n          amount={B.amount}\n          mint={B.mintAddress}\n          onMintChange={(item) => {\n            B.setMint(item);\n          }}\n        />\n        <SupplyOverview\n          mintAddress={[A.mintAddress, B.mintAddress]}\n          pool={pool}\n        />\n        <PoolAddress\n          pool={pool}\n          style={{ marginBottom: 10 }}\n          showLabel={true}\n        />\n      </div>\n      {pool && (\n        <Button\n          className=\"add-button\"\n          type=\"primary\"\n          size=\"large\"\n          onClick={executeAction}\n          disabled={\n            connected &&\n            (pendingTx ||\n              !A.account ||\n              !B.account ||\n              A.account === B.account ||\n              !hasSufficientBalance)\n          }\n        >\n          {generateActionLabel(ADD_LIQUIDITY_LABEL, connected, env, A, B)}\n          {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n        </Button>\n      )}\n      {!pool && createPoolButton}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}