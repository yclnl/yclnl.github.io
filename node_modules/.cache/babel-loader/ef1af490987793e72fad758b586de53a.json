{"ast":null,"code":"import { Numberu64 } from \"@solana/spl-token-swap\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\nexport { TokenSwap } from \"@solana/spl-token-swap\";\n/**\n * Layout for a public key\n */\n\nexport const publicKey = (property = \"publicKey\") => {\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a 64bit unsigned value\n */\n\nexport const uint64 = (property = \"uint64\") => {\n  return BufferLayout.blob(8, property);\n};\nexport const TokenSwapLayoutLegacyV0 = BufferLayout.struct([BufferLayout.u8(\"isInitialized\"), BufferLayout.u8(\"nonce\"), publicKey(\"tokenAccountA\"), publicKey(\"tokenAccountB\"), publicKey(\"tokenPool\"), uint64(\"feesNumerator\"), uint64(\"feesDenominator\")]);\nexport const TokenSwapLayout = BufferLayout.struct([BufferLayout.u8(\"isInitialized\"), BufferLayout.u8(\"nonce\"), publicKey(\"tokenProgramId\"), publicKey(\"tokenAccountA\"), publicKey(\"tokenAccountB\"), publicKey(\"tokenPool\"), publicKey(\"mintA\"), publicKey(\"mintB\"), publicKey(\"feeAccount\"), BufferLayout.u8(\"curveType\"), uint64(\"tradeFeeNumerator\"), uint64(\"tradeFeeDenominator\"), uint64(\"ownerTradeFeeNumerator\"), uint64(\"ownerTradeFeeDenominator\"), uint64(\"ownerWithdrawFeeNumerator\"), uint64(\"ownerWithdrawFeeDenominator\"), BufferLayout.blob(16, \"padding\")]);\nexport const createInitSwapInstruction = (tokenSwapAccount, authority, tokenAccountA, tokenAccountB, tokenPool, feeAccount, tokenAccountPool, tokenProgramId, swapProgramId, nonce, curveType, tradeFeeNumerator, tradeFeeDenominator, ownerTradeFeeNumerator, ownerTradeFeeDenominator, ownerWithdrawFeeNumerator, ownerWithdrawFeeDenominator) => {\n  const keys = [{\n    pubkey: tokenSwapAccount.publicKey,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenAccountA,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenAccountB,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenPool,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: feeAccount,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: tokenAccountPool,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const commandDataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), BufferLayout.u8(\"nonce\"), BufferLayout.u8(\"curveType\"), BufferLayout.nu64(\"tradeFeeNumerator\"), BufferLayout.nu64(\"tradeFeeDenominator\"), BufferLayout.nu64(\"ownerTradeFeeNumerator\"), BufferLayout.nu64(\"ownerTradeFeeDenominator\"), BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"), BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"), BufferLayout.blob(16, \"padding\")]);\n  let data = Buffer.alloc(1024);\n  {\n    const encodeLength = commandDataLayout.encode({\n      instruction: 0,\n      // InitializeSwap instruction\n      nonce,\n      curveType,\n      tradeFeeNumerator,\n      tradeFeeDenominator,\n      ownerTradeFeeNumerator,\n      ownerTradeFeeDenominator,\n      ownerWithdrawFeeNumerator,\n      ownerWithdrawFeeDenominator\n    }, data);\n    data = data.slice(0, encodeLength);\n  }\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n};\nexport const depositInstruction = (tokenSwap, authority, sourceA, sourceB, intoA, intoB, poolToken, poolAccount, swapProgramId, tokenProgramId, poolTokenAmount, maximumTokenA, maximumTokenB) => {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), uint64(\"poolTokenAmount\"), uint64(\"maximumTokenA\"), uint64(\"maximumTokenB\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({\n    instruction: 2,\n    // Deposit instruction\n    poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n    maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n    maximumTokenB: new Numberu64(maximumTokenB).toBuffer()\n  }, data);\n  const keys = [{\n    pubkey: tokenSwap,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: sourceA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: sourceB,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: intoA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: intoB,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n};\nexport const withdrawInstruction = (tokenSwap, authority, poolMint, feeAccount, sourcePoolAccount, fromA, fromB, userAccountA, userAccountB, swapProgramId, tokenProgramId, poolTokenAmount, minimumTokenA, minimumTokenB) => {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), uint64(\"poolTokenAmount\"), uint64(\"minimumTokenA\"), uint64(\"minimumTokenB\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({\n    instruction: 3,\n    // Withdraw instruction\n    poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n    minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n    minimumTokenB: new Numberu64(minimumTokenB).toBuffer()\n  }, data);\n  const keys = [{\n    pubkey: tokenSwap,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: poolMint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: sourcePoolAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: fromA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: fromB,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: userAccountA,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: userAccountB,\n    isSigner: false,\n    isWritable: true\n  }];\n\n  if (feeAccount) {\n    keys.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true\n    });\n  }\n\n  keys.push({\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  });\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n};\nexport const swapInstruction = (tokenSwap, authority, userSource, poolSource, poolDestination, userDestination, poolMint, feeAccount, swapProgramId, tokenProgramId, amountIn, minimumAmountOut, programOwner) => {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\"), uint64(\"amountIn\"), uint64(\"minimumAmountOut\")]);\n  const keys = [{\n    pubkey: tokenSwap,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: authority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: userSource,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolSource,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolDestination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: userDestination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: poolMint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: feeAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: tokenProgramId,\n    isSigner: false,\n    isWritable: false\n  }]; // optional depending on the build of token-swap program\n\n  if (programOwner) {\n    keys.push({\n      pubkey: programOwner,\n      isSigner: false,\n      isWritable: true\n    });\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({\n    instruction: 1,\n    // Swap instruction\n    amountIn: new Numberu64(amountIn).toBuffer(),\n    minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer()\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data\n  });\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/models/tokenSwap.ts"],"names":["Numberu64","TransactionInstruction","BufferLayout","TokenSwap","publicKey","property","blob","uint64","TokenSwapLayoutLegacyV0","struct","u8","TokenSwapLayout","createInitSwapInstruction","tokenSwapAccount","authority","tokenAccountA","tokenAccountB","tokenPool","feeAccount","tokenAccountPool","tokenProgramId","swapProgramId","nonce","curveType","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","keys","pubkey","isSigner","isWritable","commandDataLayout","nu64","data","Buffer","alloc","encodeLength","encode","instruction","slice","programId","depositInstruction","tokenSwap","sourceA","sourceB","intoA","intoB","poolToken","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","dataLayout","span","toBuffer","withdrawInstruction","poolMint","sourcePoolAccount","fromA","fromB","userAccountA","userAccountB","minimumTokenA","minimumTokenB","push","swapInstruction","userSource","poolSource","poolDestination","userDestination","amountIn","minimumAmountOut","programOwner"],"mappings":"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","sourcesContent":["import { Numberu64 } from \"@solana/spl-token-swap\";\nimport { PublicKey, Account, TransactionInstruction } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\n\nexport { TokenSwap } from \"@solana/spl-token-swap\";\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = \"publicKey\"): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = \"uint64\"): Object => {\n  return BufferLayout.blob(8, property);\n};\n\nexport const TokenSwapLayoutLegacyV0 = BufferLayout.struct([\n  BufferLayout.u8(\"isInitialized\"),\n  BufferLayout.u8(\"nonce\"),\n  publicKey(\"tokenAccountA\"),\n  publicKey(\"tokenAccountB\"),\n  publicKey(\"tokenPool\"),\n  uint64(\"feesNumerator\"),\n  uint64(\"feesDenominator\"),\n]);\n\nexport const TokenSwapLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"isInitialized\"),\n    BufferLayout.u8(\"nonce\"),\n    publicKey(\"tokenProgramId\"),\n    publicKey(\"tokenAccountA\"),\n    publicKey(\"tokenAccountB\"),\n    publicKey(\"tokenPool\"),\n    publicKey(\"mintA\"),\n    publicKey(\"mintB\"),\n    publicKey(\"feeAccount\"),\n    BufferLayout.u8(\"curveType\"),\n    uint64(\"tradeFeeNumerator\"),\n    uint64(\"tradeFeeDenominator\"),\n    uint64(\"ownerTradeFeeNumerator\"),\n    uint64(\"ownerTradeFeeDenominator\"),\n    uint64(\"ownerWithdrawFeeNumerator\"),\n    uint64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.blob(16, \"padding\"),\n  ]\n);\n\nexport const createInitSwapInstruction = (\n  tokenSwapAccount: Account,\n  authority: PublicKey,\n  tokenAccountA: PublicKey,\n  tokenAccountB: PublicKey,\n  tokenPool: PublicKey,\n  feeAccount: PublicKey,\n  tokenAccountPool: PublicKey,\n  tokenProgramId: PublicKey,\n  swapProgramId: PublicKey,\n  nonce: number,\n  curveType: number,\n  tradeFeeNumerator: number,\n  tradeFeeDenominator: number,\n  ownerTradeFeeNumerator: number,\n  ownerTradeFeeDenominator: number,\n  ownerWithdrawFeeNumerator: number,\n  ownerWithdrawFeeDenominator: number\n): TransactionInstruction => {\n  const keys = [\n    { pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountA, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountB, isSigner: false, isWritable: false },\n    { pubkey: tokenPool, isSigner: false, isWritable: true },\n    { pubkey: feeAccount, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountPool, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n\n  const commandDataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    BufferLayout.u8(\"nonce\"),\n    BufferLayout.u8(\"curveType\"),\n    BufferLayout.nu64(\"tradeFeeNumerator\"),\n    BufferLayout.nu64(\"tradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n    BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.blob(16, \"padding\"),\n  ]);\n  let data = Buffer.alloc(1024);\n  {\n    const encodeLength = commandDataLayout.encode(\n      {\n        instruction: 0, // InitializeSwap instruction\n        nonce,\n        curveType,\n        tradeFeeNumerator,\n        tradeFeeDenominator,\n        ownerTradeFeeNumerator,\n        ownerTradeFeeDenominator,\n        ownerWithdrawFeeNumerator,\n        ownerWithdrawFeeDenominator,\n      },\n      data\n    );\n    data = data.slice(0, encodeLength);\n  }\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const depositInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  sourceA: PublicKey,\n  sourceB: PublicKey,\n  intoA: PublicKey,\n  intoB: PublicKey,\n  poolToken: PublicKey,\n  poolAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  maximumTokenA: number | Numberu64,\n  maximumTokenB: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"maximumTokenA\"),\n    uint64(\"maximumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 2, // Deposit instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n      maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: sourceA, isSigner: false, isWritable: true },\n    { pubkey: sourceB, isSigner: false, isWritable: true },\n    { pubkey: intoA, isSigner: false, isWritable: true },\n    { pubkey: intoB, isSigner: false, isWritable: true },\n    { pubkey: poolToken, isSigner: false, isWritable: true },\n    { pubkey: poolAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const withdrawInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey | undefined,\n  sourcePoolAccount: PublicKey,\n  fromA: PublicKey,\n  fromB: PublicKey,\n  userAccountA: PublicKey,\n  userAccountB: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  minimumTokenA: number | Numberu64,\n  minimumTokenB: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"minimumTokenA\"),\n    uint64(\"minimumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 3, // Withdraw instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n      minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n    { pubkey: fromA, isSigner: false, isWritable: true },\n    { pubkey: fromB, isSigner: false, isWritable: true },\n    { pubkey: userAccountA, isSigner: false, isWritable: true },\n    { pubkey: userAccountB, isSigner: false, isWritable: true },\n  ];\n\n  if (feeAccount) {\n    keys.push({ pubkey: feeAccount, isSigner: false, isWritable: true });\n  }\n  keys.push({ pubkey: tokenProgramId, isSigner: false, isWritable: false });\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const swapInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  userSource: PublicKey,\n  poolSource: PublicKey,\n  poolDestination: PublicKey,\n  userDestination: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  amountIn: number | Numberu64,\n  minimumAmountOut: number | Numberu64,\n  programOwner?: PublicKey\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"amountIn\"),\n    uint64(\"minimumAmountOut\"),\n  ]);\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: userSource, isSigner: false, isWritable: true },\n    { pubkey: poolSource, isSigner: false, isWritable: true },\n    { pubkey: poolDestination, isSigner: false, isWritable: true },\n    { pubkey: userDestination, isSigner: false, isWritable: true },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: feeAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n\n  // optional depending on the build of token-swap program\n  if (programOwner) {\n    keys.push({ pubkey: programOwner, isSigner: false, isWritable: true });\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 1, // Swap instruction\n      amountIn: new Numberu64(amountIn).toBuffer(),\n      minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n    },\n    data\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}