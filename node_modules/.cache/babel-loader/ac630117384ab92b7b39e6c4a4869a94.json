{"ast":null,"code":"import _toConsumableArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Account,PublicKey,SystemProgram}from\"@solana/web3.js\";import{sendTransaction,useConnection}from\"./connection\";import{useEffect,useMemo,useState}from\"react\";import{Token,MintLayout,AccountLayout}from\"@solana/spl-token\";import{notify}from\"./notifications\";import{cache,getCachedAccount,useUserAccounts,useCachedPool,getMultipleAccounts}from\"./accounts\";import{programIds,SWAP_HOST_FEE_ADDRESS,SWAP_PROGRAM_OWNER_FEE_ADDRESS,WRAPPED_SOL_MINT}from\"./ids\";import{createInitSwapInstruction,TokenSwapLayout,depositInstruction,withdrawInstruction,TokenSwapLayoutLegacyV0,swapInstruction}from\"./../models\";var LIQUIDITY_TOKEN_PRECISION=8;export var removeLiquidity=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,wallet,liquidityAmount,account,pool){var minAmount0,minAmount1,poolMint,accountA,accountB,authority,signers,instructions,cleanupInstructions,accountRentExempt,toAccounts,tx;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(pool){_context.next=2;break;}return _context.abrupt(\"return\");case 2:notify({message:\"Removing Liquidity...\",description:\"Please review transactions to approve.\",type:\"warn\"});// TODO get min amounts based on total supply and liquidity\nminAmount0=0;minAmount1=0;_context.next=7;return cache.queryMint(connection,pool.pubkeys.mint);case 7:poolMint=_context.sent;_context.next=10;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[0]);case 10:accountA=_context.sent;_context.next=13;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[1]);case 13:accountB=_context.sent;if(poolMint.mintAuthority){_context.next=16;break;}throw new Error(\"Mint doesnt have authority\");case 16:authority=poolMint.mintAuthority;signers=[];instructions=[];cleanupInstructions=[];_context.next=22;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 22:accountRentExempt=_context.sent;_context.next=25;return findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,cleanupInstructions,accountRentExempt,accountA.info.mint,signers);case 25:_context.t0=_context.sent;_context.next=28;return findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,cleanupInstructions,accountRentExempt,accountB.info.mint,signers);case 28:_context.t1=_context.sent;toAccounts=[_context.t0,_context.t1];instructions.push(Token.createApproveInstruction(programIds().token,account.pubkey,authority,wallet.publicKey,[],liquidityAmount));// withdraw\ninstructions.push(withdrawInstruction(pool.pubkeys.account,authority,pool.pubkeys.mint,pool.pubkeys.feeAccount,account.pubkey,pool.pubkeys.holdingAccounts[0],pool.pubkeys.holdingAccounts[1],toAccounts[0],toAccounts[1],pool.pubkeys.program,programIds().token,liquidityAmount,minAmount0,minAmount1));_context.next=34;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),signers);case 34:tx=_context.sent;notify({message:\"Liquidity Returned. Thank you for your support.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 36:case\"end\":return _context.stop();}}},_callee);}));return function removeLiquidity(_x,_x2,_x3,_x4,_x5){return _ref.apply(this,arguments);};}();export var swap=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,wallet,components,SLIPPAGE,pool){var _pool$pubkeys$holding;var amountIn,minAmountOut,holdingA,holdingB,poolMint,authority,instructions,cleanupInstructions,signers,accountRentExempt,fromAccount,toAccount,hostFeeAccount,tx;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!pool||!components[0].account)){_context2.next=3;break;}notify({type:\"error\",message:\"Pool doesn't exsist.\",description:\"Swap trade cancelled\"});return _context2.abrupt(\"return\");case 3:// Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n// see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n// as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\namountIn=components[0].amount;// these two should include slippage\nminAmountOut=components[1].amount*(1-SLIPPAGE);holdingA=((_pool$pubkeys$holding=pool.pubkeys.holdingMints[0])===null||_pool$pubkeys$holding===void 0?void 0:_pool$pubkeys$holding.toBase58())===components[0].account.info.mint.toBase58()?pool.pubkeys.holdingAccounts[0]:pool.pubkeys.holdingAccounts[1];holdingB=holdingA===pool.pubkeys.holdingAccounts[0]?pool.pubkeys.holdingAccounts[1]:pool.pubkeys.holdingAccounts[0];_context2.next=9;return cache.queryMint(connection,pool.pubkeys.mint);case 9:poolMint=_context2.sent;if(!(!poolMint.mintAuthority||!pool.pubkeys.feeAccount)){_context2.next=12;break;}throw new Error(\"Mint doesnt have authority\");case 12:authority=poolMint.mintAuthority;instructions=[];cleanupInstructions=[];signers=[];_context2.next=18;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 18:accountRentExempt=_context2.sent;fromAccount=getWrappedAccount(instructions,cleanupInstructions,components[0].account,wallet.publicKey,amountIn+accountRentExempt,signers);toAccount=findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,cleanupInstructions,accountRentExempt,new PublicKey(components[1].mintAddress),signers);// create approval for transfer transactions\ninstructions.push(Token.createApproveInstruction(programIds().token,fromAccount,authority,wallet.publicKey,[],amountIn));hostFeeAccount=SWAP_HOST_FEE_ADDRESS?findOrCreateAccountByMint(wallet.publicKey,SWAP_HOST_FEE_ADDRESS,instructions,cleanupInstructions,accountRentExempt,pool.pubkeys.mint,signers):undefined;// swap\ninstructions.push(swapInstruction(pool.pubkeys.account,authority,fromAccount,holdingA,holdingB,toAccount,pool.pubkeys.mint,pool.pubkeys.feeAccount,pool.pubkeys.program,programIds().token,amountIn,minAmountOut,hostFeeAccount));_context2.next=26;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),signers);case 26:tx=_context2.sent;notify({message:\"Trade executed.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 28:case\"end\":return _context2.stop();}}},_callee2);}));return function swap(_x6,_x7,_x8,_x9,_x10){return _ref2.apply(this,arguments);};}();export var addLiquidity=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,wallet,components,slippage,pool,options){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(pool){_context3.next=7;break;}if(options){_context3.next=3;break;}throw new Error(\"Options are required to create new pool.\");case 3:_context3.next=5;return _addLiquidityNewPool(wallet,connection,components,options);case 5:_context3.next=9;break;case 7:_context3.next=9;return _addLiquidityExistingPool(pool,components,connection,wallet);case 9:case\"end\":return _context3.stop();}}},_callee3);}));return function addLiquidity(_x11,_x12,_x13,_x14,_x15,_x16){return _ref3.apply(this,arguments);};}();var getHoldings=function getHoldings(connection,accounts){return accounts.map(function(acc){return cache.queryAccount(connection,new PublicKey(acc));});};var toPoolInfo=function toPoolInfo(item,program){var mint=new PublicKey(item.data.tokenPool);return{pubkeys:{account:item.pubkey,program:program,mint:mint,holdingMints:[],holdingAccounts:[item.data.tokenAccountA,item.data.tokenAccountB].map(function(a){return new PublicKey(a);})},legacy:false,raw:item};};export var usePools=function usePools(){var connection=useConnection();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),pools=_useState2[0],setPools=_useState2[1];// initial query\nuseEffect(function(){setPools([]);var queryPools=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(swapId){var isLegacy,poolsArray,toQuery,_args6=arguments;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:isLegacy=_args6.length>1&&_args6[1]!==undefined?_args6[1]:false;poolsArray=[];_context6.next=4;return connection.getProgramAccounts(swapId);case 4:_context6.sent.filter(function(item){return item.account.data.length===TokenSwapLayout.span||item.account.data.length===TokenSwapLayoutLegacyV0.span;}).map(function(item){var result={data:undefined,account:item.account,pubkey:item.pubkey,init:function(){var _init=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:case\"end\":return _context4.stop();}}},_callee4);}));function init(){return _init.apply(this,arguments);}return init;}()};// handling of legacy layout can be removed soon...\nif(item.account.data.length===TokenSwapLayoutLegacyV0.span){result.data=TokenSwapLayoutLegacyV0.decode(item.account.data);var pool=toPoolInfo(result,swapId);pool.legacy=isLegacy;poolsArray.push(pool);result.init=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var holdings;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return Promise.all(getHoldings(connection,[result.data.tokenAccountA,result.data.tokenAccountB]));case 3:holdings=_context5.sent;pool.pubkeys.holdingMints=[holdings[0].info.mint,holdings[1].info.mint];_context5.next=10;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](0);console.log(_context5.t0);case 10:case\"end\":return _context5.stop();}}},_callee5,null,[[0,7]]);}));}else{result.data=TokenSwapLayout.decode(item.account.data);var _pool=toPoolInfo(result,swapId);_pool.legacy=isLegacy;_pool.pubkeys.feeAccount=new PublicKey(result.data.feeAccount);_pool.pubkeys.holdingMints=[new PublicKey(result.data.mintA),new PublicKey(result.data.mintB)];poolsArray.push(_pool);}return result;});toQuery=poolsArray.map(function(p){var _p$pubkeys$feeAccount;return[].concat(_toConsumableArray(p.pubkeys.holdingAccounts.map(function(h){return h.toBase58();})),_toConsumableArray(p.pubkeys.holdingMints.map(function(h){return h.toBase58();})),[(_p$pubkeys$feeAccount=p.pubkeys.feeAccount)===null||_p$pubkeys$feeAccount===void 0?void 0:_p$pubkeys$feeAccount.toBase58(),// used to calculate volume aproximation\np.pubkeys.mint.toBase58()]).filter(function(p){return p;});}).flat();// This will pre-cache all accounts used by pools\n// All those accounts are updated whenever there is a change\n_context6.next=8;return getMultipleAccounts(connection,toQuery,\"single\").then(function(_ref6){var keys=_ref6.keys,array=_ref6.array;return array.map(function(obj,index){var pubKey=new PublicKey(keys[index]);if(obj.data.length===AccountLayout.span){return cache.addAccount(pubKey,obj);}else if(obj.data.length===MintLayout.span){return cache.addMint(pubKey,obj);}return obj;});});case 8:return _context6.abrupt(\"return\",poolsArray);case 9:case\"end\":return _context6.stop();}}},_callee6);}));return function queryPools(_x17){return _ref4.apply(this,arguments);};}();Promise.all([queryPools(programIds().swap)].concat(_toConsumableArray(programIds().swap_legacy.map(function(leg){return queryPools(leg,true);})))).then(function(all){setPools(all.flat());});},[connection]);useEffect(function(){var subID=connection.onProgramAccountChange(programIds().swap,/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(info){var id,account,updated,index,filtered,pool;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:id=info.accountId;if(info.accountInfo.data.length===TokenSwapLayout.span){account=info.accountInfo;updated={data:TokenSwapLayout.decode(account.data),account:account,pubkey:new PublicKey(id)};index=pools&&pools.findIndex(function(p){return p.pubkeys.account.toBase58()===id;});if(index&&index>=0&&pools){// TODO: check if account is empty?\nfiltered=pools.filter(function(p,i){return i!==index;});setPools([].concat(_toConsumableArray(filtered),[toPoolInfo(updated,programIds().swap)]));}else{pool=toPoolInfo(updated,programIds().swap);pool.pubkeys.feeAccount=new PublicKey(updated.data.feeAccount);pool.pubkeys.holdingMints=[new PublicKey(updated.data.mintA),new PublicKey(updated.data.mintB)];setPools([].concat(_toConsumableArray(pools),[pool]));}}case 2:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x18){return _ref7.apply(this,arguments);};}(),\"singleGossip\");return function(){connection.removeProgramAccountChangeListener(subID);};},[connection,pools]);return{pools:pools};};export var usePoolForBasket=function usePoolForBasket(mints){var connection=useConnection();var _useCachedPool=useCachedPool(),pools=_useCachedPool.pools;var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),pool=_useState4[0],setPool=_useState4[1];var sortedMints=useMemo(function(){return _toConsumableArray(mints).sort();},_toConsumableArray(mints));useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var matchingPool,i,p,account;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:// reset pool during query\nsetPool(undefined);matchingPool=pools.filter(function(p){return!p.legacy;}).filter(function(p){return p.pubkeys.holdingMints.map(function(a){return a.toBase58();}).sort().every(function(address,i){return address===sortedMints[i];});});i=0;case 3:if(!(i<matchingPool.length)){_context8.next=14;break;}p=matchingPool[i];_context8.next=7;return cache.queryAccount(connection,p.pubkeys.holdingAccounts[0]);case 7:account=_context8.sent;if(account.info.amount.eqn(0)){_context8.next=11;break;}setPool(p);return _context8.abrupt(\"return\");case 11:i++;_context8.next=3;break;case 14:case\"end\":return _context8.stop();}}},_callee8);}))();},[connection,sortedMints,pools]);return pool;};export var useOwnedPools=function useOwnedPools(){var _useCachedPool2=useCachedPool(),pools=_useCachedPool2.pools;var _useUserAccounts=useUserAccounts(),userAccounts=_useUserAccounts.userAccounts;var ownedPools=useMemo(function(){var map=userAccounts.reduce(function(acc,item){var key=item.info.mint.toBase58();acc.set(key,[].concat(_toConsumableArray(acc.get(key)||[]),[item]));return acc;},new Map());return pools.filter(function(p){return map.has(p.pubkeys.mint.toBase58());}).map(function(item){var _item$pubkeys$feeAcco,_map$get;var feeAccount=(_item$pubkeys$feeAcco=item.pubkeys.feeAccount)===null||_item$pubkeys$feeAcco===void 0?void 0:_item$pubkeys$feeAcco.toBase58();return(_map$get=map.get(item.pubkeys.mint.toBase58()))===null||_map$get===void 0?void 0:_map$get.map(function(a){return{account:a,isFeeAccount:feeAccount===a.pubkey.toBase58(),pool:item};});}).flat();},[pools,userAccounts]);return ownedPools;};// Allow for this much price movement in the pool before adding liquidity to the pool aborts\nvar SLIPPAGE=0.005;function _addLiquidityExistingPool(_x19,_x20,_x21,_x22){return _addLiquidityExistingPool2.apply(this,arguments);}function _addLiquidityExistingPool2(){_addLiquidityExistingPool2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(pool,components,connection,wallet){var poolMint,accountA,accountB,reserve0,reserve1,fromA,fromB,supply,authority,amount0,amount1,liquidity,instructions,cleanupInstructions,signers,accountRentExempt,fromKeyA,fromKeyB,toAccount,tx;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:notify({message:\"Adding Liquidity...\",description:\"Please review transactions to approve.\",type:\"warn\"});_context9.next=3;return cache.queryMint(connection,pool.pubkeys.mint);case 3:poolMint=_context9.sent;if(poolMint.mintAuthority){_context9.next=6;break;}throw new Error(\"Mint doesnt have authority\");case 6:if(pool.pubkeys.feeAccount){_context9.next=8;break;}throw new Error(\"Invald fee account\");case 8:_context9.next=10;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[0]);case 10:accountA=_context9.sent;_context9.next=13;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[1]);case 13:accountB=_context9.sent;reserve0=accountA.info.amount.toNumber();reserve1=accountB.info.amount.toNumber();fromA=accountA.info.mint.toBase58()===components[0].mintAddress?components[0]:components[1];fromB=fromA===components[0]?components[1]:components[0];if(!(!fromA.account||!fromB.account)){_context9.next=20;break;}throw new Error(\"Missing account info.\");case 20:supply=poolMint.supply.toNumber();authority=poolMint.mintAuthority;// Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n// see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n// as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\namount0=fromA.amount;amount1=fromB.amount;liquidity=Math.min(amount0*(1-SLIPPAGE)*supply/reserve0,amount1*(1-SLIPPAGE)*supply/reserve1);instructions=[];cleanupInstructions=[];signers=[];_context9.next=30;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 30:accountRentExempt=_context9.sent;fromKeyA=getWrappedAccount(instructions,cleanupInstructions,fromA.account,wallet.publicKey,amount0+accountRentExempt,signers);fromKeyB=getWrappedAccount(instructions,cleanupInstructions,fromB.account,wallet.publicKey,amount1+accountRentExempt,signers);toAccount=findOrCreateAccountByMint(wallet.publicKey,wallet.publicKey,instructions,[],accountRentExempt,pool.pubkeys.mint,signers,new Set([pool.pubkeys.feeAccount.toBase58()]));// create approval for transfer transactions\ninstructions.push(Token.createApproveInstruction(programIds().token,fromKeyA,authority,wallet.publicKey,[],amount0));instructions.push(Token.createApproveInstruction(programIds().token,fromKeyB,authority,wallet.publicKey,[],amount1));// depoist\ninstructions.push(depositInstruction(pool.pubkeys.account,authority,fromKeyA,fromKeyB,pool.pubkeys.holdingAccounts[0],pool.pubkeys.holdingAccounts[1],pool.pubkeys.mint,toAccount,pool.pubkeys.program,programIds().token,liquidity,amount0,amount1));_context9.next=39;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),signers);case 39:tx=_context9.sent;notify({message:\"Pool Funded. Happy trading.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 41:case\"end\":return _context9.stop();}}},_callee9);}));return _addLiquidityExistingPool2.apply(this,arguments);}function findOrCreateAccountByMint(payer,owner,instructions,cleanupInstructions,accountRentExempt,mint,// use to identify same type\nsigners,excluded){var accountToFind=mint.toBase58();var account=getCachedAccount(function(acc){return acc.info.mint.toBase58()===accountToFind&&acc.info.owner.toBase58()===owner.toBase58()&&(excluded===undefined||!excluded.has(acc.pubkey.toBase58()));});var isWrappedSol=accountToFind===WRAPPED_SOL_MINT.toBase58();var toAccount;if(account&&!isWrappedSol){toAccount=account.pubkey;}else{// creating depositor pool account\nvar newToAccount=createSplAccount(instructions,payer,accountRentExempt,mint,owner,AccountLayout.span);toAccount=newToAccount.publicKey;signers.push(newToAccount);if(isWrappedSol){cleanupInstructions.push(Token.createCloseAccountInstruction(programIds().token,toAccount,payer,payer,[]));}}return toAccount;}function estimateProceedsFromInput(inputQuantityInPool,proceedsQuantityInPool,inputAmount){return proceedsQuantityInPool*inputAmount/(inputQuantityInPool+inputAmount);}function estimateInputFromProceeds(inputQuantityInPool,proceedsQuantityInPool,proceedsAmount){if(proceedsAmount>=proceedsQuantityInPool){return\"Not possible\";}return inputQuantityInPool*proceedsAmount/(proceedsQuantityInPool-proceedsAmount);}export var PoolOperation;(function(PoolOperation){PoolOperation[PoolOperation[\"Add\"]=0]=\"Add\";PoolOperation[PoolOperation[\"SwapGivenInput\"]=1]=\"SwapGivenInput\";PoolOperation[PoolOperation[\"SwapGivenProceeds\"]=2]=\"SwapGivenProceeds\";})(PoolOperation||(PoolOperation={}));export function calculateDependentAmount(_x23,_x24,_x25,_x26,_x27){return _calculateDependentAmount.apply(this,arguments);}// TODO: add ui to customize curve type\nfunction _calculateDependentAmount(){_calculateDependentAmount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(connection,independent,amount,pool,op){var poolMint,accountA,accountB,mintA,mintB,isFirstIndependent,depPrecision,indPrecision,indAdjustedAmount,indBasketQuantity,depBasketQuantity,depAdjustedAmount;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_context10.next=2;return cache.queryMint(connection,pool.pubkeys.mint);case 2:poolMint=_context10.sent;_context10.next=5;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[0]);case 5:accountA=_context10.sent;_context10.next=8;return cache.queryAccount(connection,pool.pubkeys.holdingAccounts[1]);case 8:accountB=_context10.sent;if(poolMint.mintAuthority){_context10.next=11;break;}throw new Error(\"Mint doesnt have authority\");case 11:if(!poolMint.supply.eqn(0)){_context10.next=13;break;}return _context10.abrupt(\"return\");case 13:_context10.next=15;return cache.queryMint(connection,accountA.info.mint);case 15:mintA=_context10.sent;_context10.next=18;return cache.queryMint(connection,accountB.info.mint);case 18:mintB=_context10.sent;if(!(!mintA||!mintB)){_context10.next=21;break;}return _context10.abrupt(\"return\");case 21:isFirstIndependent=accountA.info.mint.toBase58()===independent;depPrecision=Math.pow(10,isFirstIndependent?mintB.decimals:mintA.decimals);indPrecision=Math.pow(10,isFirstIndependent?mintA.decimals:mintB.decimals);indAdjustedAmount=amount*indPrecision;indBasketQuantity=(isFirstIndependent?accountA:accountB).info.amount.toNumber();depBasketQuantity=(isFirstIndependent?accountB:accountA).info.amount.toNumber();_context10.t0=+op;_context10.next=_context10.t0===PoolOperation.Add?30:_context10.t0===PoolOperation.SwapGivenProceeds?32:_context10.t0===PoolOperation.SwapGivenInput?34:36;break;case 30:depAdjustedAmount=depBasketQuantity/indBasketQuantity*indAdjustedAmount;return _context10.abrupt(\"break\",36);case 32:depAdjustedAmount=estimateInputFromProceeds(depBasketQuantity,indBasketQuantity,indAdjustedAmount);return _context10.abrupt(\"break\",36);case 34:depAdjustedAmount=estimateProceedsFromInput(indBasketQuantity,depBasketQuantity,indAdjustedAmount);return _context10.abrupt(\"break\",36);case 36:if(!(typeof depAdjustedAmount===\"string\")){_context10.next=38;break;}return _context10.abrupt(\"return\",depAdjustedAmount);case 38:if(!(depAdjustedAmount===undefined)){_context10.next=40;break;}return _context10.abrupt(\"return\",undefined);case 40:return _context10.abrupt(\"return\",depAdjustedAmount/depPrecision);case 41:case\"end\":return _context10.stop();}}},_callee10);}));return _calculateDependentAmount.apply(this,arguments);}function _addLiquidityNewPool(_x28,_x29,_x30,_x31){return _addLiquidityNewPool2.apply(this,arguments);}function _addLiquidityNewPool2(){_addLiquidityNewPool2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(wallet,connection,components,options){var instructions,cleanupInstructions,liquidityTokenAccount,tokenSwapAccount,_yield$PublicKey$find,_yield$PublicKey$find2,authority,nonce,accountRentExempt,holdingAccounts,signers,depositorAccount,feeAccount,tx;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:notify({message:\"Creating new pool...\",description:\"Please review transactions to approve.\",type:\"warn\"});if(!components.some(function(c){return!c.account;})){_context11.next=4;break;}notify({message:\"You need to have balance for all legs in the basket...\",description:\"Please review inputs.\",type:\"error\"});return _context11.abrupt(\"return\");case 4:instructions=[];cleanupInstructions=[];liquidityTokenAccount=new Account();// Create account for pool liquidity token\n_context11.t0=instructions;_context11.t1=SystemProgram;_context11.t2=wallet.publicKey;_context11.t3=liquidityTokenAccount.publicKey;_context11.next=13;return connection.getMinimumBalanceForRentExemption(MintLayout.span);case 13:_context11.t4=_context11.sent;_context11.t5=MintLayout.span;_context11.t6=programIds().token;_context11.t7={fromPubkey:_context11.t2,newAccountPubkey:_context11.t3,lamports:_context11.t4,space:_context11.t5,programId:_context11.t6};_context11.t8=_context11.t1.createAccount.call(_context11.t1,_context11.t7);_context11.t0.push.call(_context11.t0,_context11.t8);tokenSwapAccount=new Account();_context11.next=22;return PublicKey.findProgramAddress([tokenSwapAccount.publicKey.toBuffer()],programIds().swap);case 22:_yield$PublicKey$find=_context11.sent;_yield$PublicKey$find2=_slicedToArray(_yield$PublicKey$find,2);authority=_yield$PublicKey$find2[0];nonce=_yield$PublicKey$find2[1];// create mint for pool liquidity token\ninstructions.push(Token.createInitMintInstruction(programIds().token,liquidityTokenAccount.publicKey,LIQUIDITY_TOKEN_PRECISION,// pass control of liquidity mint to swap program\nauthority,// swap program can freeze liquidity token mint\nnull));// Create holding accounts for\n_context11.next=29;return connection.getMinimumBalanceForRentExemption(AccountLayout.span);case 29:accountRentExempt=_context11.sent;holdingAccounts=[];signers=[];components.forEach(function(leg){if(!leg.account){return;}var mintPublicKey=leg.account.info.mint;// component account to store tokens I of N in liquidity poll\nholdingAccounts.push(createSplAccount(instructions,wallet.publicKey,accountRentExempt,mintPublicKey,authority,AccountLayout.span));});// creating depositor pool account\ndepositorAccount=createSplAccount(instructions,wallet.publicKey,accountRentExempt,liquidityTokenAccount.publicKey,wallet.publicKey,AccountLayout.span);// creating fee pool account its set from env variable or to creater of the pool\n// creater of the pool is not allowed in some versions of token-swap program\nfeeAccount=createSplAccount(instructions,wallet.publicKey,accountRentExempt,liquidityTokenAccount.publicKey,SWAP_PROGRAM_OWNER_FEE_ADDRESS||wallet.publicKey,AccountLayout.span);// create all accounts in one transaction\n_context11.next=37;return sendTransaction(connection,wallet,instructions,[liquidityTokenAccount,depositorAccount,feeAccount].concat(holdingAccounts,_toConsumableArray(signers)));case 37:tx=_context11.sent;notify({message:\"Accounts created\",description:\"Transaction \".concat(tx),type:\"success\"});notify({message:\"Adding Liquidity...\",description:\"Please review transactions to approve.\",type:\"warn\"});signers=[];instructions=[];cleanupInstructions=[];_context11.t9=instructions;_context11.t10=SystemProgram;_context11.t11=wallet.publicKey;_context11.t12=tokenSwapAccount.publicKey;_context11.next=49;return connection.getMinimumBalanceForRentExemption(TokenSwapLayout.span);case 49:_context11.t13=_context11.sent;_context11.t14=TokenSwapLayout.span;_context11.t15=programIds().swap;_context11.t16={fromPubkey:_context11.t11,newAccountPubkey:_context11.t12,lamports:_context11.t13,space:_context11.t14,programId:_context11.t15};_context11.t17=_context11.t10.createAccount.call(_context11.t10,_context11.t16);_context11.t9.push.call(_context11.t9,_context11.t17);components.forEach(function(leg,i){if(!leg.account){return;}// create temporary account for wrapped sol to perform transfer\nvar from=getWrappedAccount(instructions,cleanupInstructions,leg.account,wallet.publicKey,leg.amount+accountRentExempt,signers);instructions.push(Token.createTransferInstruction(programIds().token,from,holdingAccounts[i].publicKey,wallet.publicKey,[],leg.amount));});instructions.push(createInitSwapInstruction(tokenSwapAccount,authority,holdingAccounts[0].publicKey,holdingAccounts[1].publicKey,liquidityTokenAccount.publicKey,feeAccount.publicKey,depositorAccount.publicKey,programIds().token,programIds().swap,nonce,options.curveType,options.tradeFeeNumerator,options.tradeFeeDenominator,options.ownerTradeFeeNumerator,options.ownerTradeFeeDenominator,options.ownerWithdrawFeeNumerator,options.ownerWithdrawFeeDenominator));// All instructions didn't fit in single transaction\n// initialize and provide inital liquidity to swap in 2nd (this prevents loss of funds)\n_context11.next=59;return sendTransaction(connection,wallet,instructions.concat(cleanupInstructions),[tokenSwapAccount].concat(_toConsumableArray(signers)));case 59:tx=_context11.sent;notify({message:\"Pool Funded. Happy trading.\",type:\"success\",description:\"Transaction - \".concat(tx)});case 61:case\"end\":return _context11.stop();}}},_callee11);}));return _addLiquidityNewPool2.apply(this,arguments);}function getWrappedAccount(instructions,cleanupInstructions,toCheck,payer,amount,signers){if(!toCheck.info.isNative){return toCheck.pubkey;}var account=new Account();instructions.push(SystemProgram.createAccount({fromPubkey:payer,newAccountPubkey:account.publicKey,lamports:amount,space:AccountLayout.span,programId:programIds().token}));instructions.push(Token.createInitAccountInstruction(programIds().token,WRAPPED_SOL_MINT,account.publicKey,payer));cleanupInstructions.push(Token.createCloseAccountInstruction(programIds().token,account.publicKey,payer,payer,[]));signers.push(account);return account.publicKey;}function createSplAccount(instructions,payer,accountRentExempt,mint,owner,space){var account=new Account();instructions.push(SystemProgram.createAccount({fromPubkey:payer,newAccountPubkey:account.publicKey,lamports:accountRentExempt,space:space,programId:programIds().token}));instructions.push(Token.createInitAccountInstruction(programIds().token,mint,account.publicKey,owner));return account;}","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/pools.tsx"],"names":["Account","PublicKey","SystemProgram","sendTransaction","useConnection","useEffect","useMemo","useState","Token","MintLayout","AccountLayout","notify","cache","getCachedAccount","useUserAccounts","useCachedPool","getMultipleAccounts","programIds","SWAP_HOST_FEE_ADDRESS","SWAP_PROGRAM_OWNER_FEE_ADDRESS","WRAPPED_SOL_MINT","createInitSwapInstruction","TokenSwapLayout","depositInstruction","withdrawInstruction","TokenSwapLayoutLegacyV0","swapInstruction","LIQUIDITY_TOKEN_PRECISION","removeLiquidity","connection","wallet","liquidityAmount","account","pool","message","description","type","minAmount0","minAmount1","queryMint","pubkeys","mint","poolMint","queryAccount","holdingAccounts","accountA","accountB","mintAuthority","Error","authority","signers","instructions","cleanupInstructions","getMinimumBalanceForRentExemption","span","accountRentExempt","findOrCreateAccountByMint","publicKey","info","toAccounts","push","createApproveInstruction","token","pubkey","feeAccount","program","concat","tx","swap","components","SLIPPAGE","amountIn","amount","minAmountOut","holdingA","holdingMints","toBase58","holdingB","fromAccount","getWrappedAccount","toAccount","mintAddress","hostFeeAccount","undefined","addLiquidity","slippage","options","_addLiquidityNewPool","_addLiquidityExistingPool","getHoldings","accounts","map","acc","toPoolInfo","item","data","tokenPool","tokenAccountA","tokenAccountB","a","legacy","raw","usePools","pools","setPools","queryPools","swapId","isLegacy","poolsArray","getProgramAccounts","filter","length","result","init","decode","Promise","all","holdings","console","log","mintA","mintB","toQuery","p","h","flat","then","keys","array","obj","index","pubKey","addAccount","addMint","swap_legacy","leg","subID","onProgramAccountChange","id","accountId","accountInfo","updated","findIndex","filtered","i","removeProgramAccountChangeListener","usePoolForBasket","mints","setPool","sortedMints","sort","matchingPool","every","address","eqn","useOwnedPools","userAccounts","ownedPools","reduce","key","set","get","Map","has","isFeeAccount","reserve0","toNumber","reserve1","fromA","fromB","supply","amount0","amount1","liquidity","Math","min","fromKeyA","fromKeyB","Set","payer","owner","excluded","accountToFind","isWrappedSol","newToAccount","createSplAccount","createCloseAccountInstruction","estimateProceedsFromInput","inputQuantityInPool","proceedsQuantityInPool","inputAmount","estimateInputFromProceeds","proceedsAmount","PoolOperation","calculateDependentAmount","independent","op","isFirstIndependent","depPrecision","pow","decimals","indPrecision","indAdjustedAmount","indBasketQuantity","depBasketQuantity","Add","SwapGivenProceeds","SwapGivenInput","depAdjustedAmount","some","c","liquidityTokenAccount","fromPubkey","newAccountPubkey","lamports","space","programId","createAccount","tokenSwapAccount","findProgramAddress","toBuffer","nonce","createInitMintInstruction","forEach","mintPublicKey","depositorAccount","from","createTransferInstruction","curveType","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","toCheck","isNative","createInitAccountInstruction"],"mappings":"6kBAAA,OACEA,OADF,CAGEC,SAHF,CAIEC,aAJF,KAMO,iBANP,CAOA,OAASC,eAAT,CAA0BC,aAA1B,KAA+C,cAA/C,CACA,OAASC,SAAT,CAAoBC,OAApB,CAA6BC,QAA7B,KAA6C,OAA7C,CACA,OAASC,KAAT,CAAgBC,UAAhB,CAA4BC,aAA5B,KAAiD,mBAAjD,CACA,OAASC,MAAT,KAAuB,iBAAvB,CACA,OACEC,KADF,CAEEC,gBAFF,CAGEC,eAHF,CAIEC,aAJF,CAKEC,mBALF,KAMO,YANP,CAOA,OACEC,UADF,CAEEC,qBAFF,CAGEC,8BAHF,CAIEC,gBAJF,KAKO,OALP,CAMA,OAIEC,yBAJF,CAKEC,eALF,CAMEC,kBANF,CAOEC,mBAPF,CAQEC,uBARF,CASEC,eATF,KAWO,aAXP,CAaA,GAAMC,CAAAA,yBAAyB,CAAG,CAAlC,CAEA,MAAO,IAAMC,CAAAA,eAAe,0FAAG,iBAC7BC,UAD6B,CAE7BC,MAF6B,CAG7BC,eAH6B,CAI7BC,OAJ6B,CAK7BC,IAL6B,6PAOxBA,IAPwB,iEAW7BtB,MAAM,CAAC,CACLuB,OAAO,CAAE,uBADJ,CAELC,WAAW,CAAE,wCAFR,CAGLC,IAAI,CAAE,MAHD,CAAD,CAAN,CAMA;AACMC,UAlBuB,CAkBV,CAlBU,CAmBvBC,UAnBuB,CAmBV,CAnBU,uBAqBN1B,CAAAA,KAAK,CAAC2B,SAAN,CAAgBV,UAAhB,CAA4BI,IAAI,CAACO,OAAL,CAAaC,IAAzC,CArBM,QAqBvBC,QArBuB,sCAsBN9B,CAAAA,KAAK,CAAC+B,YAAN,CACrBd,UADqB,CAErBI,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAFqB,CAtBM,SAsBvBC,QAtBuB,sCA0BNjC,CAAAA,KAAK,CAAC+B,YAAN,CACrBd,UADqB,CAErBI,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAFqB,CA1BM,SA0BvBE,QA1BuB,kBA8BxBJ,QAAQ,CAACK,aA9Be,+BA+BrB,IAAIC,CAAAA,KAAJ,CAAU,4BAAV,CA/BqB,SAiCvBC,SAjCuB,CAiCXP,QAAQ,CAACK,aAjCE,CAmCvBG,OAnCuB,CAmCF,EAnCE,CAoCvBC,YApCuB,CAoCkB,EApClB,CAqCvBC,mBArCuB,CAqCyB,EArCzB,wBAuCGvB,CAAAA,UAAU,CAACwB,iCAAX,CAC9B3C,aAAa,CAAC4C,IADgB,CAvCH,SAuCvBC,iBAvCuB,sCA6CrBC,CAAAA,yBAAyB,CAC7B1B,MAAM,CAAC2B,SADsB,CAE7B3B,MAAM,CAAC2B,SAFsB,CAG7BN,YAH6B,CAI7BC,mBAJ6B,CAK7BG,iBAL6B,CAM7BV,QAAQ,CAACa,IAAT,CAAcjB,IANe,CAO7BS,OAP6B,CA7CJ,0DAsDrBM,CAAAA,yBAAyB,CAC7B1B,MAAM,CAAC2B,SADsB,CAE7B3B,MAAM,CAAC2B,SAFsB,CAG7BN,YAH6B,CAI7BC,mBAJ6B,CAK7BG,iBAL6B,CAM7BT,QAAQ,CAACY,IAAT,CAAcjB,IANe,CAO7BS,OAP6B,CAtDJ,mCA4CvBS,UA5CuB,2BAiE7BR,YAAY,CAACS,IAAb,CACEpD,KAAK,CAACqD,wBAAN,CACE5C,UAAU,GAAG6C,KADf,CAEE9B,OAAO,CAAC+B,MAFV,CAGEd,SAHF,CAIEnB,MAAM,CAAC2B,SAJT,CAKE,EALF,CAME1B,eANF,CADF,EAWA;AACAoB,YAAY,CAACS,IAAb,CACEpC,mBAAmB,CACjBS,IAAI,CAACO,OAAL,CAAaR,OADI,CAEjBiB,SAFiB,CAGjBhB,IAAI,CAACO,OAAL,CAAaC,IAHI,CAIjBR,IAAI,CAACO,OAAL,CAAawB,UAJI,CAKjBhC,OAAO,CAAC+B,MALS,CAMjB9B,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CANiB,CAOjBX,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAPiB,CAQjBe,UAAU,CAAC,CAAD,CARO,CASjBA,UAAU,CAAC,CAAD,CATO,CAUjB1B,IAAI,CAACO,OAAL,CAAayB,OAVI,CAWjBhD,UAAU,GAAG6C,KAXI,CAYjB/B,eAZiB,CAajBM,UAbiB,CAcjBC,UAdiB,CADrB,EA7E6B,uBAgGdnC,CAAAA,eAAe,CAC5B0B,UAD4B,CAE5BC,MAF4B,CAG5BqB,YAAY,CAACe,MAAb,CAAoBd,mBAApB,CAH4B,CAI5BF,OAJ4B,CAhGD,SAgGzBiB,EAhGyB,eAuG7BxD,MAAM,CAAC,CACLuB,OAAO,CAAE,iDADJ,CAELE,IAAI,CAAE,SAFD,CAGLD,WAAW,yBAAmBgC,EAAnB,CAHN,CAAD,CAAN,CAvG6B,uDAAH,kBAAfvC,CAAAA,eAAe,4DAArB,CA8GP,MAAO,IAAMwC,CAAAA,IAAI,2FAAG,kBAClBvC,UADkB,CAElBC,MAFkB,CAGlBuC,UAHkB,CAIlBC,QAJkB,CAKlBrC,IALkB,uTAOd,CAACA,IAAD,EAAS,CAACoC,UAAU,CAAC,CAAD,CAAV,CAAcrC,OAPV,2BAQhBrB,MAAM,CAAC,CACLyB,IAAI,CAAE,OADD,CAELF,OAAO,uBAFF,CAGLC,WAAW,uBAHN,CAAD,CAAN,CARgB,yCAgBlB;AACA;AACA;AACMoC,QAnBY,CAmBDF,UAAU,CAAC,CAAD,CAAV,CAAcG,MAnBb,CAmBqB;AACjCC,YApBY,CAoBGJ,UAAU,CAAC,CAAD,CAAV,CAAcG,MAAd,EAAwB,EAAIF,QAA5B,CApBH,CAqBZI,QArBY,CAsBhB,wBAAAzC,IAAI,CAACO,OAAL,CAAamC,YAAb,CAA0B,CAA1B,uEAA8BC,QAA9B,MACAP,UAAU,CAAC,CAAD,CAAV,CAAcrC,OAAd,CAAsB0B,IAAtB,CAA2BjB,IAA3B,CAAgCmC,QAAhC,EADA,CAEI3C,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAFJ,CAGIX,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAzBY,CA0BZiC,QA1BY,CA2BhBH,QAAQ,GAAKzC,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAAb,CACIX,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CADJ,CAEIX,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CA7BY,wBA+BKhC,CAAAA,KAAK,CAAC2B,SAAN,CAAgBV,UAAhB,CAA4BI,IAAI,CAACO,OAAL,CAAaC,IAAzC,CA/BL,QA+BZC,QA/BY,qBAgCd,CAACA,QAAQ,CAACK,aAAV,EAA2B,CAACd,IAAI,CAACO,OAAL,CAAawB,UAhC3B,iCAiCV,IAAIhB,CAAAA,KAAJ,CAAU,4BAAV,CAjCU,SAmCZC,SAnCY,CAmCAP,QAAQ,CAACK,aAnCT,CAqCZI,YArCY,CAqC6B,EArC7B,CAsCZC,mBAtCY,CAsCoC,EAtCpC,CAuCZF,OAvCY,CAuCS,EAvCT,yBAyCcrB,CAAAA,UAAU,CAACwB,iCAAX,CAC9B3C,aAAa,CAAC4C,IADgB,CAzCd,SAyCZC,iBAzCY,gBA6CZuB,WA7CY,CA6CEC,iBAAiB,CACnC5B,YADmC,CAEnCC,mBAFmC,CAGnCiB,UAAU,CAAC,CAAD,CAAV,CAAcrC,OAHqB,CAInCF,MAAM,CAAC2B,SAJ4B,CAKnCc,QAAQ,CAAGhB,iBALwB,CAMnCL,OANmC,CA7CnB,CAsDd8B,SAtDc,CAsDFxB,yBAAyB,CACvC1B,MAAM,CAAC2B,SADgC,CAEvC3B,MAAM,CAAC2B,SAFgC,CAGvCN,YAHuC,CAIvCC,mBAJuC,CAKvCG,iBALuC,CAMvC,GAAItD,CAAAA,SAAJ,CAAcoE,UAAU,CAAC,CAAD,CAAV,CAAcY,WAA5B,CANuC,CAOvC/B,OAPuC,CAtDvB,CAgElB;AACAC,YAAY,CAACS,IAAb,CACEpD,KAAK,CAACqD,wBAAN,CACE5C,UAAU,GAAG6C,KADf,CAEEgB,WAFF,CAGE7B,SAHF,CAIEnB,MAAM,CAAC2B,SAJT,CAKE,EALF,CAMEc,QANF,CADF,EAWIW,cA5Ec,CA4EGhE,qBAAqB,CACtCsC,yBAAyB,CACvB1B,MAAM,CAAC2B,SADgB,CAEvBvC,qBAFuB,CAGvBiC,YAHuB,CAIvBC,mBAJuB,CAKvBG,iBALuB,CAMvBtB,IAAI,CAACO,OAAL,CAAaC,IANU,CAOvBS,OAPuB,CADa,CAUtCiC,SAtFc,CAwFlB;AACAhC,YAAY,CAACS,IAAb,CACElC,eAAe,CACbO,IAAI,CAACO,OAAL,CAAaR,OADA,CAEbiB,SAFa,CAGb6B,WAHa,CAIbJ,QAJa,CAKbG,QALa,CAMbG,SANa,CAOb/C,IAAI,CAACO,OAAL,CAAaC,IAPA,CAQbR,IAAI,CAACO,OAAL,CAAawB,UARA,CASb/B,IAAI,CAACO,OAAL,CAAayB,OATA,CAUbhD,UAAU,GAAG6C,KAVA,CAWbS,QAXa,CAYbE,YAZa,CAabS,cAba,CADjB,EAzFkB,wBA2GH/E,CAAAA,eAAe,CAC5B0B,UAD4B,CAE5BC,MAF4B,CAG5BqB,YAAY,CAACe,MAAb,CAAoBd,mBAApB,CAH4B,CAI5BF,OAJ4B,CA3GZ,SA2GdiB,EA3Gc,gBAkHlBxD,MAAM,CAAC,CACLuB,OAAO,CAAE,iBADJ,CAELE,IAAI,CAAE,SAFD,CAGLD,WAAW,yBAAmBgC,EAAnB,CAHN,CAAD,CAAN,CAlHkB,yDAAH,kBAAJC,CAAAA,IAAI,+DAAV,CAyHP,MAAO,IAAMgB,CAAAA,YAAY,2FAAG,kBAC1BvD,UAD0B,CAE1BC,MAF0B,CAG1BuC,UAH0B,CAI1BgB,QAJ0B,CAK1BpD,IAL0B,CAM1BqD,OAN0B,yHAQrBrD,IARqB,6BASnBqD,OATmB,+BAUhB,IAAItC,CAAAA,KAAJ,CAAU,0CAAV,CAVgB,+BAalBuC,CAAAA,oBAAoB,CAACzD,MAAD,CAASD,UAAT,CAAqBwC,UAArB,CAAiCiB,OAAjC,CAbF,6DAelBE,CAAAA,yBAAyB,CAACvD,IAAD,CAAOoC,UAAP,CAAmBxC,UAAnB,CAA+BC,MAA/B,CAfP,yDAAH,kBAAZsD,CAAAA,YAAY,wEAAlB,CAmBP,GAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAC5D,UAAD,CAAyB6D,QAAzB,CAAgD,CAClE,MAAOA,CAAAA,QAAQ,CAACC,GAAT,CAAa,SAACC,GAAD,QAClBhF,CAAAA,KAAK,CAAC+B,YAAN,CAAmBd,UAAnB,CAA+B,GAAI5B,CAAAA,SAAJ,CAAc2F,GAAd,CAA/B,CADkB,EAAb,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAY7B,OAAZ,CAAmC,CACpD,GAAMxB,CAAAA,IAAI,CAAG,GAAIxC,CAAAA,SAAJ,CAAc6F,IAAI,CAACC,IAAL,CAAUC,SAAxB,CAAb,CACA,MAAO,CACLxD,OAAO,CAAE,CACPR,OAAO,CAAE8D,IAAI,CAAC/B,MADP,CAEPE,OAAO,CAAEA,OAFF,CAGPxB,IAAI,CAAJA,IAHO,CAIPkC,YAAY,CAAE,EAJP,CAKP/B,eAAe,CAAE,CAACkD,IAAI,CAACC,IAAL,CAAUE,aAAX,CAA0BH,IAAI,CAACC,IAAL,CAAUG,aAApC,EAAmDP,GAAnD,CACf,SAACQ,CAAD,QAAO,IAAIlG,CAAAA,SAAJ,CAAckG,CAAd,CAAP,EADe,CALV,CADJ,CAULC,MAAM,CAAE,KAVH,CAWLC,GAAG,CAAEP,IAXA,CAAP,CAaD,CAfD,CAiBA,MAAO,IAAMQ,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CAC5B,GAAMzE,CAAAA,UAAU,CAAGzB,aAAa,EAAhC,CAD4B,cAEFG,QAAQ,CAAa,EAAb,CAFN,wCAErBgG,KAFqB,eAEdC,QAFc,eAI5B;AACAnG,SAAS,CAAC,UAAM,CACdmG,QAAQ,CAAC,EAAD,CAAR,CAEA,GAAMC,CAAAA,UAAU,2FAAG,kBAAOC,MAAP,uKAA0BC,QAA1B,kDAAqC,KAArC,CACbC,UADa,CACY,EADZ,wBAEV/E,CAAAA,UAAU,CAACgF,kBAAX,CAA8BH,MAA9B,CAFU,uBAGdI,MAHc,CAIb,SAAChB,IAAD,QACEA,CAAAA,IAAI,CAAC9D,OAAL,CAAa+D,IAAb,CAAkBgB,MAAlB,GAA6BzF,eAAe,CAACgC,IAA7C,EACAwC,IAAI,CAAC9D,OAAL,CAAa+D,IAAb,CAAkBgB,MAAlB,GAA6BtF,uBAAuB,CAAC6B,IAFvD,EAJa,EAQdqC,GARc,CAQV,SAACG,IAAD,CAAU,CACb,GAAIkB,CAAAA,MAAM,CAAG,CACXjB,IAAI,CAAEZ,SADK,CAEXnD,OAAO,CAAE8D,IAAI,CAAC9D,OAFH,CAGX+B,MAAM,CAAE+B,IAAI,CAAC/B,MAHF,CAIXkD,IAAI,8EAAE,yLAAF,sEAJO,CAAb,CAOA;AACA,GAAInB,IAAI,CAAC9D,OAAL,CAAa+D,IAAb,CAAkBgB,MAAlB,GAA6BtF,uBAAuB,CAAC6B,IAAzD,CAA+D,CAC7D0D,MAAM,CAACjB,IAAP,CAActE,uBAAuB,CAACyF,MAAxB,CAA+BpB,IAAI,CAAC9D,OAAL,CAAa+D,IAA5C,CAAd,CACA,GAAI9D,CAAAA,IAAI,CAAG4D,UAAU,CAACmB,MAAD,CAASN,MAAT,CAArB,CACAzE,IAAI,CAACmE,MAAL,CAAcO,QAAd,CACAC,UAAU,CAAChD,IAAX,CAAgB3B,IAAhB,EAEA+E,MAAM,CAACC,IAAP,sEAAc,6LAIaE,CAAAA,OAAO,CAACC,GAAR,CACrB3B,WAAW,CAAC5D,UAAD,CAAa,CACtBmF,MAAM,CAACjB,IAAP,CAAYE,aADU,CAEtBe,MAAM,CAACjB,IAAP,CAAYG,aAFU,CAAb,CADU,CAJb,QAIJmB,QAJI,gBAWVpF,IAAI,CAACO,OAAL,CAAamC,YAAb,CAA4B,CAC1B0C,QAAQ,CAAC,CAAD,CAAR,CAAY3D,IAAZ,CAAiBjB,IADS,CAE1B4E,QAAQ,CAAC,CAAD,CAAR,CAAY3D,IAAZ,CAAiBjB,IAFS,CAA5B,CAXU,mFAgBV6E,OAAO,CAACC,GAAR,eAhBU,sEAAd,GAmBD,CAzBD,IAyBO,CACLP,MAAM,CAACjB,IAAP,CAAczE,eAAe,CAAC4F,MAAhB,CAAuBpB,IAAI,CAAC9D,OAAL,CAAa+D,IAApC,CAAd,CACA,GAAI9D,CAAAA,KAAI,CAAG4D,UAAU,CAACmB,MAAD,CAASN,MAAT,CAArB,CACAzE,KAAI,CAACmE,MAAL,CAAcO,QAAd,CACA1E,KAAI,CAACO,OAAL,CAAawB,UAAb,CAA0B,GAAI/D,CAAAA,SAAJ,CAAc+G,MAAM,CAACjB,IAAP,CAAY/B,UAA1B,CAA1B,CACA/B,KAAI,CAACO,OAAL,CAAamC,YAAb,CAA4B,CAC1B,GAAI1E,CAAAA,SAAJ,CAAc+G,MAAM,CAACjB,IAAP,CAAYyB,KAA1B,CAD0B,CAE1B,GAAIvH,CAAAA,SAAJ,CAAc+G,MAAM,CAACjB,IAAP,CAAY0B,KAA1B,CAF0B,CAA5B,CAKAb,UAAU,CAAChD,IAAX,CAAgB3B,KAAhB,EACD,CAED,MAAO+E,CAAAA,MAAP,CACD,CAxDc,EA0DXU,OA1DW,CA0DDd,UAAU,CACvBjB,GADa,CAEZ,SAACgC,CAAD,kCACE,6BACKA,CAAC,CAACnF,OAAF,CAAUI,eAAV,CAA0B+C,GAA1B,CAA8B,SAACiC,CAAD,QAAOA,CAAAA,CAAC,CAAChD,QAAF,EAAP,EAA9B,CADL,qBAEK+C,CAAC,CAACnF,OAAF,CAAUmC,YAAV,CAAuBgB,GAAvB,CAA2B,SAACiC,CAAD,QAAOA,CAAAA,CAAC,CAAChD,QAAF,EAAP,EAA3B,CAFL,0BAGE+C,CAAC,CAACnF,OAAF,CAAUwB,UAHZ,gDAGE,sBAAsBY,QAAtB,EAHF,CAGoC;AAClC+C,CAAC,CAACnF,OAAF,CAAUC,IAAV,CAAemC,QAAf,EAJF,GAKEkC,MALF,CAKS,SAACa,CAAD,QAAOA,CAAAA,CAAP,EALT,CADF,EAFY,EAUbE,IAVa,EA1DC,CAsEjB;AACA;AAvEiB,uBAwEX7G,CAAAA,mBAAmB,CAACa,UAAD,CAAa6F,OAAb,CAAsB,QAAtB,CAAnB,CAAmDI,IAAnD,CACJ,eAAqB,IAAlBC,CAAAA,IAAkB,OAAlBA,IAAkB,CAAZC,KAAY,OAAZA,KAAY,CACnB,MAAOA,CAAAA,KAAK,CAACrC,GAAN,CAAU,SAACsC,GAAD,CAAMC,KAAN,CAAgB,CAC/B,GAAMC,CAAAA,MAAM,CAAG,GAAIlI,CAAAA,SAAJ,CAAc8H,IAAI,CAACG,KAAD,CAAlB,CAAf,CACA,GAAID,GAAG,CAAClC,IAAJ,CAASgB,MAAT,GAAoBrG,aAAa,CAAC4C,IAAtC,CAA4C,CAC1C,MAAO1C,CAAAA,KAAK,CAACwH,UAAN,CAAiBD,MAAjB,CAAyBF,GAAzB,CAAP,CACD,CAFD,IAEO,IAAIA,GAAG,CAAClC,IAAJ,CAASgB,MAAT,GAAoBtG,UAAU,CAAC6C,IAAnC,CAAyC,CAC9C,MAAO1C,CAAAA,KAAK,CAACyH,OAAN,CAAcF,MAAd,CAAsBF,GAAtB,CAAP,CACD,CAED,MAAOA,CAAAA,GAAP,CACD,CATM,CAAP,CAUD,CAZG,CAxEW,yCAuFVrB,UAvFU,0DAAH,kBAAVH,CAAAA,UAAU,+CAAhB,CA0FAU,OAAO,CAACC,GAAR,EACEX,UAAU,CAACxF,UAAU,GAAGmD,IAAd,CADZ,4BAEKnD,UAAU,GAAGqH,WAAb,CAAyB3C,GAAzB,CAA6B,SAAC4C,GAAD,QAAS9B,CAAAA,UAAU,CAAC8B,GAAD,CAAM,IAAN,CAAnB,EAA7B,CAFL,IAGGT,IAHH,CAGQ,SAACV,GAAD,CAAS,CACfZ,QAAQ,CAACY,GAAG,CAACS,IAAJ,EAAD,CAAR,CACD,CALD,EAMD,CAnGQ,CAmGN,CAAChG,UAAD,CAnGM,CAAT,CAqGAxB,SAAS,CAAC,UAAM,CACd,GAAMmI,CAAAA,KAAK,CAAG3G,UAAU,CAAC4G,sBAAX,CACZxH,UAAU,GAAGmD,IADD,2FAEZ,kBAAOV,IAAP,iKACQgF,EADR,CACchF,IAAI,CAACiF,SADnB,CAEE,GAAIjF,IAAI,CAACkF,WAAL,CAAiB7C,IAAjB,CAAsBgB,MAAtB,GAAiCzF,eAAe,CAACgC,IAArD,CAA2D,CACnDtB,OADmD,CACzC0B,IAAI,CAACkF,WADoC,CAEnDC,OAFmD,CAEzC,CACd9C,IAAI,CAAEzE,eAAe,CAAC4F,MAAhB,CAAuBlF,OAAO,CAAC+D,IAA/B,CADQ,CAEd/D,OAAO,CAAEA,OAFK,CAGd+B,MAAM,CAAE,GAAI9D,CAAAA,SAAJ,CAAcyI,EAAd,CAHM,CAFyC,CAQnDR,KARmD,CASvD3B,KAAK,EACLA,KAAK,CAACuC,SAAN,CAAgB,SAACnB,CAAD,QAAOA,CAAAA,CAAC,CAACnF,OAAF,CAAUR,OAAV,CAAkB4C,QAAlB,KAAiC8D,EAAxC,EAAhB,CAVuD,CAWzD,GAAIR,KAAK,EAAIA,KAAK,EAAI,CAAlB,EAAuB3B,KAA3B,CAAkC,CAChC;AAEMwC,QAH0B,CAGfxC,KAAK,CAACO,MAAN,CAAa,SAACa,CAAD,CAAIqB,CAAJ,QAAUA,CAAAA,CAAC,GAAKd,KAAhB,EAAb,CAHe,CAIhC1B,QAAQ,8BAAKuC,QAAL,GAAelD,UAAU,CAACgD,OAAD,CAAU5H,UAAU,GAAGmD,IAAvB,CAAzB,GAAR,CACD,CALD,IAKO,CACDnC,IADC,CACM4D,UAAU,CAACgD,OAAD,CAAU5H,UAAU,GAAGmD,IAAvB,CADhB,CAGLnC,IAAI,CAACO,OAAL,CAAawB,UAAb,CAA0B,GAAI/D,CAAAA,SAAJ,CAAc4I,OAAO,CAAC9C,IAAR,CAAa/B,UAA3B,CAA1B,CACA/B,IAAI,CAACO,OAAL,CAAamC,YAAb,CAA4B,CAC1B,GAAI1E,CAAAA,SAAJ,CAAc4I,OAAO,CAAC9C,IAAR,CAAayB,KAA3B,CAD0B,CAE1B,GAAIvH,CAAAA,SAAJ,CAAc4I,OAAO,CAAC9C,IAAR,CAAa0B,KAA3B,CAF0B,CAA5B,CAKAjB,QAAQ,8BAAKD,KAAL,GAAYtE,IAAZ,GAAR,CACD,CACF,CA7BH,wDAFY,kEAiCZ,cAjCY,CAAd,CAoCA,MAAO,WAAM,CACXJ,UAAU,CAACoH,kCAAX,CAA8CT,KAA9C,EACD,CAFD,CAGD,CAxCQ,CAwCN,CAAC3G,UAAD,CAAa0E,KAAb,CAxCM,CAAT,CA0CA,MAAO,CAAEA,KAAK,CAALA,KAAF,CAAP,CACD,CArJM,CAuJP,MAAO,IAAM2C,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAmC,CACjE,GAAMtH,CAAAA,UAAU,CAAGzB,aAAa,EAAhC,CADiE,mBAE/CW,aAAa,EAFkC,CAEzDwF,KAFyD,gBAEzDA,KAFyD,gBAGzChG,QAAQ,EAHiC,yCAG1D0B,IAH0D,eAGpDmH,OAHoD,eAIjE,GAAMC,CAAAA,WAAW,CAAG/I,OAAO,CAAC,iBAAM,oBAAI6I,KAAJ,EAAWG,IAAX,EAAN,EAAD,oBAA8BH,KAA9B,EAA3B,CACA9I,SAAS,CAAC,UAAM,CACd,wDAAC,qKACC;AACA+I,OAAO,CAACjE,SAAD,CAAP,CAEIoE,YAJL,CAIoBhD,KAAK,CACrBO,MADgB,CACT,SAACa,CAAD,QAAO,CAACA,CAAC,CAACvB,MAAV,EADS,EAEhBU,MAFgB,CAET,SAACa,CAAD,QACNA,CAAAA,CAAC,CAACnF,OAAF,CAAUmC,YAAV,CACGgB,GADH,CACO,SAACQ,CAAD,QAAOA,CAAAA,CAAC,CAACvB,QAAF,EAAP,EADP,EAEG0E,IAFH,GAGGE,KAHH,CAGS,SAACC,OAAD,CAAUT,CAAV,QAAgBS,CAAAA,OAAO,GAAKJ,WAAW,CAACL,CAAD,CAAvC,EAHT,CADM,EAFS,CAJpB,CAaUA,CAbV,CAac,CAbd,aAaiBA,CAAC,CAAGO,YAAY,CAACxC,MAblC,4BAcSY,CAdT,CAca4B,YAAY,CAACP,CAAD,CAdzB,wBAgByBpI,CAAAA,KAAK,CAAC+B,YAAN,CACpBd,UADoB,CAEpB8F,CAAC,CAACnF,OAAF,CAAUI,eAAV,CAA0B,CAA1B,CAFoB,CAhBzB,QAgBSZ,OAhBT,mBAqBQA,OAAO,CAAC0B,IAAR,CAAac,MAAb,CAAoBkF,GAApB,CAAwB,CAAxB,CArBR,2BAsBKN,OAAO,CAACzB,CAAD,CAAP,CAtBL,0CAa0CqB,CAAC,EAb3C,iFAAD,KA2BD,CA5BQ,CA4BN,CAACnH,UAAD,CAAawH,WAAb,CAA0B9C,KAA1B,CA5BM,CAAT,CA8BA,MAAOtE,CAAAA,IAAP,CACD,CApCM,CAsCP,MAAO,IAAM0H,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,qBACf5I,aAAa,EADE,CACzBwF,KADyB,iBACzBA,KADyB,sBAERzF,eAAe,EAFP,CAEzB8I,YAFyB,kBAEzBA,YAFyB,CAIjC,GAAMC,CAAAA,UAAU,CAAGvJ,OAAO,CAAC,UAAM,CAC/B,GAAMqF,CAAAA,GAAG,CAAGiE,YAAY,CAACE,MAAb,CAAoB,SAAClE,GAAD,CAAME,IAAN,CAAe,CAC7C,GAAMiE,CAAAA,GAAG,CAAGjE,IAAI,CAACpC,IAAL,CAAUjB,IAAV,CAAemC,QAAf,EAAZ,CACAgB,GAAG,CAACoE,GAAJ,CAAQD,GAAR,8BAAkBnE,GAAG,CAACqE,GAAJ,CAAQF,GAAR,GAAgB,EAAlC,GAAuCjE,IAAvC,IACA,MAAOF,CAAAA,GAAP,CACD,CAJW,CAIT,GAAIsE,CAAAA,GAAJ,EAJS,CAAZ,CAMA,MAAO3D,CAAAA,KAAK,CACTO,MADI,CACG,SAACa,CAAD,QAAOhC,CAAAA,GAAG,CAACwE,GAAJ,CAAQxC,CAAC,CAACnF,OAAF,CAAUC,IAAV,CAAemC,QAAf,EAAR,CAAP,EADH,EAEJe,GAFI,CAEA,SAACG,IAAD,CAAU,oCACb,GAAI9B,CAAAA,UAAU,wBAAG8B,IAAI,CAACtD,OAAL,CAAawB,UAAhB,gDAAG,sBAAyBY,QAAzB,EAAjB,CACA,gBAAOe,GAAG,CAACsE,GAAJ,CAAQnE,IAAI,CAACtD,OAAL,CAAaC,IAAb,CAAkBmC,QAAlB,EAAR,CAAP,mCAAO,SAAuCe,GAAvC,CAA2C,SAACQ,CAAD,CAAO,CACvD,MAAO,CACLnE,OAAO,CAAEmE,CADJ,CAELiE,YAAY,CAAEpG,UAAU,GAAKmC,CAAC,CAACpC,MAAF,CAASa,QAAT,EAFxB,CAGL3C,IAAI,CAAE6D,IAHD,CAAP,CAKD,CANM,CAAP,CAWD,CAfI,EAgBJ+B,IAhBI,EAAP,CAiBD,CAxByB,CAwBvB,CAACtB,KAAD,CAAQqD,YAAR,CAxBuB,CAA1B,CA0BA,MAAOC,CAAAA,UAAP,CACD,CA/BM,CAiCP;AACA,GAAMvF,CAAAA,QAAQ,CAAG,KAAjB,C,QAEekB,CAAAA,yB,wMAAf,kBACEvD,IADF,CAEEoC,UAFF,CAGExC,UAHF,CAIEC,MAJF,wTAMEnB,MAAM,CAAC,CACLuB,OAAO,CAAE,qBADJ,CAELC,WAAW,CAAE,wCAFR,CAGLC,IAAI,CAAE,MAHD,CAAD,CAAN,CANF,uBAYyBxB,CAAAA,KAAK,CAAC2B,SAAN,CAAgBV,UAAhB,CAA4BI,IAAI,CAACO,OAAL,CAAaC,IAAzC,CAZzB,QAYQC,QAZR,mBAaOA,QAAQ,CAACK,aAbhB,+BAcU,IAAIC,CAAAA,KAAJ,CAAU,4BAAV,CAdV,WAiBOf,IAAI,CAACO,OAAL,CAAawB,UAjBpB,+BAkBU,IAAIhB,CAAAA,KAAJ,CAAU,oBAAV,CAlBV,gCAqByBpC,CAAAA,KAAK,CAAC+B,YAAN,CACrBd,UADqB,CAErBI,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAFqB,CArBzB,SAqBQC,QArBR,wCAyByBjC,CAAAA,KAAK,CAAC+B,YAAN,CACrBd,UADqB,CAErBI,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAFqB,CAzBzB,SAyBQE,QAzBR,gBA8BQuH,QA9BR,CA8BmBxH,QAAQ,CAACa,IAAT,CAAcc,MAAd,CAAqB8F,QAArB,EA9BnB,CA+BQC,QA/BR,CA+BmBzH,QAAQ,CAACY,IAAT,CAAcc,MAAd,CAAqB8F,QAArB,EA/BnB,CAgCQE,KAhCR,CAiCI3H,QAAQ,CAACa,IAAT,CAAcjB,IAAd,CAAmBmC,QAAnB,KAAkCP,UAAU,CAAC,CAAD,CAAV,CAAcY,WAAhD,CACIZ,UAAU,CAAC,CAAD,CADd,CAEIA,UAAU,CAAC,CAAD,CAnClB,CAoCQoG,KApCR,CAoCgBD,KAAK,GAAKnG,UAAU,CAAC,CAAD,CAApB,CAA0BA,UAAU,CAAC,CAAD,CAApC,CAA0CA,UAAU,CAAC,CAAD,CApCpE,MAsCM,CAACmG,KAAK,CAACxI,OAAP,EAAkB,CAACyI,KAAK,CAACzI,OAtC/B,iCAuCU,IAAIgB,CAAAA,KAAJ,CAAU,uBAAV,CAvCV,SA0CQ0H,MA1CR,CA0CiBhI,QAAQ,CAACgI,MAAT,CAAgBJ,QAAhB,EA1CjB,CA2CQrH,SA3CR,CA2CoBP,QAAQ,CAACK,aA3C7B,CA6CE;AACA;AACA;AACM4H,OAhDR,CAgDkBH,KAAK,CAAChG,MAhDxB,CAiDQoG,OAjDR,CAiDkBH,KAAK,CAACjG,MAjDxB,CAmDQqG,SAnDR,CAmDoBC,IAAI,CAACC,GAAL,CACfJ,OAAO,EAAI,EAAIrG,QAAR,CAAP,CAA2BoG,MAA5B,CAAsCL,QADtB,CAEfO,OAAO,EAAI,EAAItG,QAAR,CAAP,CAA2BoG,MAA5B,CAAsCH,QAFtB,CAnDpB,CAuDQpH,YAvDR,CAuDiD,EAvDjD,CAwDQC,mBAxDR,CAwDwD,EAxDxD,CA0DQF,OA1DR,CA0D6B,EA1D7B,yBA4DkCrB,CAAAA,UAAU,CAACwB,iCAAX,CAC9B3C,aAAa,CAAC4C,IADgB,CA5DlC,SA4DQC,iBA5DR,gBA+DQyH,QA/DR,CA+DmBjG,iBAAiB,CAChC5B,YADgC,CAEhCC,mBAFgC,CAGhCoH,KAAK,CAACxI,OAH0B,CAIhCF,MAAM,CAAC2B,SAJyB,CAKhCkH,OAAO,CAAGpH,iBALsB,CAMhCL,OANgC,CA/DpC,CAuEQ+H,QAvER,CAuEmBlG,iBAAiB,CAChC5B,YADgC,CAEhCC,mBAFgC,CAGhCqH,KAAK,CAACzI,OAH0B,CAIhCF,MAAM,CAAC2B,SAJyB,CAKhCmH,OAAO,CAAGrH,iBALsB,CAMhCL,OANgC,CAvEpC,CAgFM8B,SAhFN,CAgFkBxB,yBAAyB,CACvC1B,MAAM,CAAC2B,SADgC,CAEvC3B,MAAM,CAAC2B,SAFgC,CAGvCN,YAHuC,CAIvC,EAJuC,CAKvCI,iBALuC,CAMvCtB,IAAI,CAACO,OAAL,CAAaC,IAN0B,CAOvCS,OAPuC,CAQvC,GAAIgI,CAAAA,GAAJ,CAAgB,CAACjJ,IAAI,CAACO,OAAL,CAAawB,UAAb,CAAwBY,QAAxB,EAAD,CAAhB,CARuC,CAhF3C,CA2FE;AACAzB,YAAY,CAACS,IAAb,CACEpD,KAAK,CAACqD,wBAAN,CACE5C,UAAU,GAAG6C,KADf,CAEEkH,QAFF,CAGE/H,SAHF,CAIEnB,MAAM,CAAC2B,SAJT,CAKE,EALF,CAMEkH,OANF,CADF,EAWAxH,YAAY,CAACS,IAAb,CACEpD,KAAK,CAACqD,wBAAN,CACE5C,UAAU,GAAG6C,KADf,CAEEmH,QAFF,CAGEhI,SAHF,CAIEnB,MAAM,CAAC2B,SAJT,CAKE,EALF,CAMEmH,OANF,CADF,EAWA;AACAzH,YAAY,CAACS,IAAb,CACErC,kBAAkB,CAChBU,IAAI,CAACO,OAAL,CAAaR,OADG,CAEhBiB,SAFgB,CAGhB+H,QAHgB,CAIhBC,QAJgB,CAKhBhJ,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CALgB,CAMhBX,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CANgB,CAOhBX,IAAI,CAACO,OAAL,CAAaC,IAPG,CAQhBuC,SARgB,CAShB/C,IAAI,CAACO,OAAL,CAAayB,OATG,CAUhBhD,UAAU,GAAG6C,KAVG,CAWhB+G,SAXgB,CAYhBF,OAZgB,CAahBC,OAbgB,CADpB,EAnHF,wBAqIiBzK,CAAAA,eAAe,CAC5B0B,UAD4B,CAE5BC,MAF4B,CAG5BqB,YAAY,CAACe,MAAb,CAAoBd,mBAApB,CAH4B,CAI5BF,OAJ4B,CArIhC,SAqIMiB,EArIN,gBA4IExD,MAAM,CAAC,CACLuB,OAAO,CAAE,6BADJ,CAELE,IAAI,CAAE,SAFD,CAGLD,WAAW,yBAAmBgC,EAAnB,CAHN,CAAD,CAAN,CA5IF,yD,4DAmJA,QAASX,CAAAA,yBAAT,CACE2H,KADF,CAEEC,KAFF,CAGEjI,YAHF,CAIEC,mBAJF,CAKEG,iBALF,CAMEd,IANF,CAMmB;AACjBS,OAPF,CAQEmI,QARF,CASa,CACX,GAAMC,CAAAA,aAAa,CAAG7I,IAAI,CAACmC,QAAL,EAAtB,CACA,GAAM5C,CAAAA,OAAO,CAAGnB,gBAAgB,CAC9B,SAAC+E,GAAD,QACEA,CAAAA,GAAG,CAAClC,IAAJ,CAASjB,IAAT,CAAcmC,QAAd,KAA6B0G,aAA7B,EACA1F,GAAG,CAAClC,IAAJ,CAAS0H,KAAT,CAAexG,QAAf,KAA8BwG,KAAK,CAACxG,QAAN,EAD9B,GAECyG,QAAQ,GAAKlG,SAAb,EAA0B,CAACkG,QAAQ,CAAClB,GAAT,CAAavE,GAAG,CAAC7B,MAAJ,CAAWa,QAAX,EAAb,CAF5B,CADF,EAD8B,CAAhC,CAMA,GAAM2G,CAAAA,YAAY,CAAGD,aAAa,GAAKlK,gBAAgB,CAACwD,QAAjB,EAAvC,CAEA,GAAII,CAAAA,SAAJ,CACA,GAAIhD,OAAO,EAAI,CAACuJ,YAAhB,CAA8B,CAC5BvG,SAAS,CAAGhD,OAAO,CAAC+B,MAApB,CACD,CAFD,IAEO,CACL;AACA,GAAMyH,CAAAA,YAAY,CAAGC,gBAAgB,CACnCtI,YADmC,CAEnCgI,KAFmC,CAGnC5H,iBAHmC,CAInCd,IAJmC,CAKnC2I,KALmC,CAMnC1K,aAAa,CAAC4C,IANqB,CAArC,CASA0B,SAAS,CAAGwG,YAAY,CAAC/H,SAAzB,CACAP,OAAO,CAACU,IAAR,CAAa4H,YAAb,EAEA,GAAID,YAAJ,CAAkB,CAChBnI,mBAAmB,CAACQ,IAApB,CACEpD,KAAK,CAACkL,6BAAN,CACEzK,UAAU,GAAG6C,KADf,CAEEkB,SAFF,CAGEmG,KAHF,CAIEA,KAJF,CAKE,EALF,CADF,EASD,CACF,CAED,MAAOnG,CAAAA,SAAP,CACD,CAED,QAAS2G,CAAAA,yBAAT,CACEC,mBADF,CAEEC,sBAFF,CAGEC,WAHF,CAIU,CACR,MACGD,CAAAA,sBAAsB,CAAGC,WAA1B,EAA0CF,mBAAmB,CAAGE,WAAhE,CADF,CAGD,CAED,QAASC,CAAAA,yBAAT,CACEH,mBADF,CAEEC,sBAFF,CAGEG,cAHF,CAImB,CACjB,GAAIA,cAAc,EAAIH,sBAAtB,CAA8C,CAC5C,MAAO,cAAP,CACD,CAED,MACGD,CAAAA,mBAAmB,CAAGI,cAAvB,EACCH,sBAAsB,CAAGG,cAD1B,CADF,CAID,CAED,UAAYC,CAAAA,aAAZ,C,UAAYA,a,EAAAA,a,CAAAA,a,iBAAAA,a,CAAAA,a,uCAAAA,a,CAAAA,a,gDAAAA,a,GAAAA,a,MAMZ,eAAsBC,CAAAA,wBAAtB,mFAuFA;uHAvFO,mBACLrK,UADK,CAELsK,WAFK,CAGL3H,MAHK,CAILvC,IAJK,CAKLmK,EALK,kTAOkBxL,CAAAA,KAAK,CAAC2B,SAAN,CAAgBV,UAAhB,CAA4BI,IAAI,CAACO,OAAL,CAAaC,IAAzC,CAPlB,QAOCC,QAPD,yCAQkB9B,CAAAA,KAAK,CAAC+B,YAAN,CACrBd,UADqB,CAErBI,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAFqB,CARlB,QAQCC,QARD,yCAYkBjC,CAAAA,KAAK,CAAC+B,YAAN,CACrBd,UADqB,CAErBI,IAAI,CAACO,OAAL,CAAaI,eAAb,CAA6B,CAA7B,CAFqB,CAZlB,QAYCE,QAZD,oBAgBAJ,QAAQ,CAACK,aAhBT,iCAiBG,IAAIC,CAAAA,KAAJ,CAAU,4BAAV,CAjBH,aAoBDN,QAAQ,CAACgI,MAAT,CAAgBhB,GAAhB,CAAoB,CAApB,CApBC,gGAwBe9I,CAAAA,KAAK,CAAC2B,SAAN,CAAgBV,UAAhB,CAA4BgB,QAAQ,CAACa,IAAT,CAAcjB,IAA1C,CAxBf,SAwBC+E,KAxBD,0CAyBe5G,CAAAA,KAAK,CAAC2B,SAAN,CAAgBV,UAAhB,CAA4BiB,QAAQ,CAACY,IAAT,CAAcjB,IAA1C,CAzBf,SAyBCgF,KAzBD,sBA2BD,CAACD,KAAD,EAAU,CAACC,KA3BV,wEA+BC4E,kBA/BD,CA+BsBxJ,QAAQ,CAACa,IAAT,CAAcjB,IAAd,CAAmBmC,QAAnB,KAAkCuH,WA/BxD,CAgCCG,YAhCD,CAgCgBxB,IAAI,CAACyB,GAAL,CACnB,EADmB,CAEnBF,kBAAkB,CAAG5E,KAAK,CAAC+E,QAAT,CAAoBhF,KAAK,CAACgF,QAFzB,CAhChB,CAoCCC,YApCD,CAoCgB3B,IAAI,CAACyB,GAAL,CACnB,EADmB,CAEnBF,kBAAkB,CAAG7E,KAAK,CAACgF,QAAT,CAAoB/E,KAAK,CAAC+E,QAFzB,CApChB,CAwCCE,iBAxCD,CAwCqBlI,MAAM,CAAGiI,YAxC9B,CA0CDE,iBA1CC,CA0CmB,CAACN,kBAAkB,CACvCxJ,QADuC,CAEvCC,QAFoB,EAGtBY,IAHsB,CAGjBc,MAHiB,CAGV8F,QAHU,EA1CnB,CA8CDsC,iBA9CC,CA8CmB,CAACP,kBAAkB,CACvCvJ,QADuC,CAEvCD,QAFoB,EAGtBa,IAHsB,CAGjBc,MAHiB,CAGV8F,QAHU,EA9CnB,eAoDG,CAAC8B,EApDJ,iCAqDEH,aAAa,CAACY,GArDhB,oBA2DEZ,aAAa,CAACa,iBA3DhB,oBAoEEb,aAAa,CAACc,cApEhB,qBAuDCC,iBAAiB,CACdJ,iBAAiB,CAAGD,iBAArB,CAA0CD,iBAD5C,CAvDD,6CA6DCM,iBAAiB,CAAGjB,yBAAyB,CAC3Ca,iBAD2C,CAE3CD,iBAF2C,CAG3CD,iBAH2C,CAA7C,CA7DD,6CAsECM,iBAAiB,CAAGrB,yBAAyB,CAC3CgB,iBAD2C,CAE3CC,iBAF2C,CAG3CF,iBAH2C,CAA7C,CAtED,kDA8ED,MAAOM,CAAAA,iBAAP,GAA6B,QA9E5B,+DA+EIA,iBA/EJ,eAiFDA,iBAAiB,GAAK7H,SAjFrB,+DAkFIA,SAlFJ,4CAoFE6H,iBAAiB,CAAGV,YApFtB,6D,mEAwFQ/G,CAAAA,oB,yLAAf,mBACEzD,MADF,CAEED,UAFF,CAGEwC,UAHF,CAIEiB,OAJF,4UAME3E,MAAM,CAAC,CACLuB,OAAO,CAAE,sBADJ,CAELC,WAAW,CAAE,wCAFR,CAGLC,IAAI,CAAE,MAHD,CAAD,CAAN,CANF,IAYMiC,UAAU,CAAC4I,IAAX,CAAgB,SAACC,CAAD,QAAO,CAACA,CAAC,CAAClL,OAAV,EAAhB,CAZN,2BAaIrB,MAAM,CAAC,CACLuB,OAAO,CAAE,wDADJ,CAELC,WAAW,CAAE,uBAFR,CAGLC,IAAI,CAAE,OAHD,CAAD,CAAN,CAbJ,0CAqBMe,YArBN,CAqB+C,EArB/C,CAsBMC,mBAtBN,CAsBsD,EAtBtD,CAwBQ+J,qBAxBR,CAwBgC,GAAInN,CAAAA,OAAJ,EAxBhC,CAyBE;AAzBF,cA0BEmD,YA1BF,eA2BIjD,aA3BJ,eA4BkB4B,MAAM,CAAC2B,SA5BzB,eA6BwB0J,qBAAqB,CAAC1J,SA7B9C,0BA8BsB5B,CAAAA,UAAU,CAACwB,iCAAX,CACd5C,UAAU,CAAC6C,IADG,CA9BtB,qDAiCa7C,UAAU,CAAC6C,IAjCxB,eAkCiBrC,UAAU,GAAG6C,KAlC9B,gBA4BMsJ,UA5BN,eA6BMC,gBA7BN,eA8BMC,QA9BN,eAiCMC,KAjCN,eAkCMC,SAlCN,4CA2BkBC,aA3BlB,iDA0Be7J,IA1Bf,mCAsCQ8J,gBAtCR,CAsC2B,GAAI1N,CAAAA,OAAJ,EAtC3B,0BAwCmCC,CAAAA,SAAS,CAAC0N,kBAAV,CAC/B,CAACD,gBAAgB,CAACjK,SAAjB,CAA2BmK,QAA3B,EAAD,CAD+B,CAE/B3M,UAAU,GAAGmD,IAFkB,CAxCnC,8GAwCSnB,SAxCT,2BAwCoB4K,KAxCpB,2BA6CE;AACA1K,YAAY,CAACS,IAAb,CACEpD,KAAK,CAACsN,yBAAN,CACE7M,UAAU,GAAG6C,KADf,CAEEqJ,qBAAqB,CAAC1J,SAFxB,CAGE9B,yBAHF,CAIE;AACAsB,SALF,CAME;AACA,IAPF,CADF,EAYA;AA1DF,yBA2DkCpB,CAAAA,UAAU,CAACwB,iCAAX,CAC9B3C,aAAa,CAAC4C,IADgB,CA3DlC,SA2DQC,iBA3DR,iBA8DQX,eA9DR,CA8DqC,EA9DrC,CA+DMM,OA/DN,CA+D2B,EA/D3B,CAiEEmB,UAAU,CAAC0J,OAAX,CAAmB,SAACxF,GAAD,CAAS,CAC1B,GAAI,CAACA,GAAG,CAACvG,OAAT,CAAkB,CAChB,OACD,CAED,GAAMgM,CAAAA,aAAa,CAAGzF,GAAG,CAACvG,OAAJ,CAAY0B,IAAZ,CAAiBjB,IAAvC,CACA;AACAG,eAAe,CAACgB,IAAhB,CACE6H,gBAAgB,CACdtI,YADc,CAEdrB,MAAM,CAAC2B,SAFO,CAGdF,iBAHc,CAIdyK,aAJc,CAKd/K,SALc,CAMdvC,aAAa,CAAC4C,IANA,CADlB,EAUD,CAjBD,EAmBA;AACM2K,gBArFR,CAqF2BxC,gBAAgB,CACvCtI,YADuC,CAEvCrB,MAAM,CAAC2B,SAFgC,CAGvCF,iBAHuC,CAIvC4J,qBAAqB,CAAC1J,SAJiB,CAKvC3B,MAAM,CAAC2B,SALgC,CAMvC/C,aAAa,CAAC4C,IANyB,CArF3C,CA8FE;AACA;AACMU,UAhGR,CAgGqByH,gBAAgB,CACjCtI,YADiC,CAEjCrB,MAAM,CAAC2B,SAF0B,CAGjCF,iBAHiC,CAIjC4J,qBAAqB,CAAC1J,SAJW,CAKjCtC,8BAA8B,EAAIW,MAAM,CAAC2B,SALR,CAMjC/C,aAAa,CAAC4C,IANmB,CAhGrC,CAyGE;AAzGF,yBA0GiBnD,CAAAA,eAAe,CAAC0B,UAAD,CAAaC,MAAb,CAAqBqB,YAArB,EAC5BgK,qBAD4B,CAE5Bc,gBAF4B,CAG5BjK,UAH4B,SAIzBpB,eAJyB,oBAKzBM,OALyB,GA1GhC,SA0GMiB,EA1GN,iBAkHExD,MAAM,CAAC,CACLuB,OAAO,CAAE,kBADJ,CAELC,WAAW,uBAAiBgC,EAAjB,CAFN,CAGL/B,IAAI,CAAE,SAHD,CAAD,CAAN,CAMAzB,MAAM,CAAC,CACLuB,OAAO,CAAE,qBADJ,CAELC,WAAW,CAAE,wCAFR,CAGLC,IAAI,CAAE,MAHD,CAAD,CAAN,CAMAc,OAAO,CAAG,EAAV,CACAC,YAAY,CAAG,EAAf,CACAC,mBAAmB,CAAG,EAAtB,CAhIF,cAkIED,YAlIF,gBAmIIjD,aAnIJ,gBAoIkB4B,MAAM,CAAC2B,SApIzB,gBAqIwBiK,gBAAgB,CAACjK,SArIzC,0BAsIsB5B,CAAAA,UAAU,CAACwB,iCAAX,CACd/B,eAAe,CAACgC,IADF,CAtItB,uDAyIahC,eAAe,CAACgC,IAzI7B,gBA0IiBrC,UAAU,GAAGmD,IA1I9B,iBAoIMgJ,UApIN,gBAqIMC,gBArIN,gBAsIMC,QAtIN,gBAyIMC,KAzIN,gBA0IMC,SA1IN,+CAmIkBC,aAnIlB,mDAkIe7J,IAlIf,oCA8IES,UAAU,CAAC0J,OAAX,CAAmB,SAACxF,GAAD,CAAMS,CAAN,CAAY,CAC7B,GAAI,CAACT,GAAG,CAACvG,OAAT,CAAkB,CAChB,OACD,CAED;AACA,GAAMkM,CAAAA,IAAI,CAAGnJ,iBAAiB,CAC5B5B,YAD4B,CAE5BC,mBAF4B,CAG5BmF,GAAG,CAACvG,OAHwB,CAI5BF,MAAM,CAAC2B,SAJqB,CAK5B8E,GAAG,CAAC/D,MAAJ,CAAajB,iBALe,CAM5BL,OAN4B,CAA9B,CASAC,YAAY,CAACS,IAAb,CACEpD,KAAK,CAAC2N,yBAAN,CACElN,UAAU,GAAG6C,KADf,CAEEoK,IAFF,CAGEtL,eAAe,CAACoG,CAAD,CAAf,CAAmBvF,SAHrB,CAIE3B,MAAM,CAAC2B,SAJT,CAKE,EALF,CAME8E,GAAG,CAAC/D,MANN,CADF,EAUD,CAzBD,EA2BArB,YAAY,CAACS,IAAb,CACEvC,yBAAyB,CACvBqM,gBADuB,CAEvBzK,SAFuB,CAGvBL,eAAe,CAAC,CAAD,CAAf,CAAmBa,SAHI,CAIvBb,eAAe,CAAC,CAAD,CAAf,CAAmBa,SAJI,CAKvB0J,qBAAqB,CAAC1J,SALC,CAMvBO,UAAU,CAACP,SANY,CAOvBwK,gBAAgB,CAACxK,SAPM,CAQvBxC,UAAU,GAAG6C,KARU,CASvB7C,UAAU,GAAGmD,IATU,CAUvByJ,KAVuB,CAWvBvI,OAAO,CAAC8I,SAXe,CAYvB9I,OAAO,CAAC+I,iBAZe,CAavB/I,OAAO,CAACgJ,mBAbe,CAcvBhJ,OAAO,CAACiJ,sBAde,CAevBjJ,OAAO,CAACkJ,wBAfe,CAgBvBlJ,OAAO,CAACmJ,yBAhBe,CAiBvBnJ,OAAO,CAACoJ,2BAjBe,CAD3B,EAsBA;AACA;AAhMF,yBAiMavO,CAAAA,eAAe,CACxB0B,UADwB,CAExBC,MAFwB,CAGxBqB,YAAY,CAACe,MAAb,CAAoBd,mBAApB,CAHwB,EAIvBsK,gBAJuB,4BAIFxK,OAJE,GAjM5B,SAiMEiB,EAjMF,iBAwMExD,MAAM,CAAC,CACLuB,OAAO,CAAE,6BADJ,CAELE,IAAI,CAAE,SAFD,CAGLD,WAAW,yBAAmBgC,EAAnB,CAHN,CAAD,CAAN,CAxMF,2D,uDA+MA,QAASY,CAAAA,iBAAT,CACE5B,YADF,CAEEC,mBAFF,CAGEuL,OAHF,CAIExD,KAJF,CAKE3G,MALF,CAMEtB,OANF,CAOE,CACA,GAAI,CAACyL,OAAO,CAACjL,IAAR,CAAakL,QAAlB,CAA4B,CAC1B,MAAOD,CAAAA,OAAO,CAAC5K,MAAf,CACD,CAED,GAAM/B,CAAAA,OAAO,CAAG,GAAIhC,CAAAA,OAAJ,EAAhB,CACAmD,YAAY,CAACS,IAAb,CACE1D,aAAa,CAACuN,aAAd,CAA4B,CAC1BL,UAAU,CAAEjC,KADc,CAE1BkC,gBAAgB,CAAErL,OAAO,CAACyB,SAFA,CAG1B6J,QAAQ,CAAE9I,MAHgB,CAI1B+I,KAAK,CAAE7M,aAAa,CAAC4C,IAJK,CAK1BkK,SAAS,CAAEvM,UAAU,GAAG6C,KALE,CAA5B,CADF,EAUAX,YAAY,CAACS,IAAb,CACEpD,KAAK,CAACqO,4BAAN,CACE5N,UAAU,GAAG6C,KADf,CAEE1C,gBAFF,CAGEY,OAAO,CAACyB,SAHV,CAIE0H,KAJF,CADF,EASA/H,mBAAmB,CAACQ,IAApB,CACEpD,KAAK,CAACkL,6BAAN,CACEzK,UAAU,GAAG6C,KADf,CAEE9B,OAAO,CAACyB,SAFV,CAGE0H,KAHF,CAIEA,KAJF,CAKE,EALF,CADF,EAUAjI,OAAO,CAACU,IAAR,CAAa5B,OAAb,EAEA,MAAOA,CAAAA,OAAO,CAACyB,SAAf,CACD,CAED,QAASgI,CAAAA,gBAAT,CACEtI,YADF,CAEEgI,KAFF,CAGE5H,iBAHF,CAIEd,IAJF,CAKE2I,KALF,CAMEmC,KANF,CAOE,CACA,GAAMvL,CAAAA,OAAO,CAAG,GAAIhC,CAAAA,OAAJ,EAAhB,CACAmD,YAAY,CAACS,IAAb,CACE1D,aAAa,CAACuN,aAAd,CAA4B,CAC1BL,UAAU,CAAEjC,KADc,CAE1BkC,gBAAgB,CAAErL,OAAO,CAACyB,SAFA,CAG1B6J,QAAQ,CAAE/J,iBAHgB,CAI1BgK,KAAK,CAALA,KAJ0B,CAK1BC,SAAS,CAAEvM,UAAU,GAAG6C,KALE,CAA5B,CADF,EAUAX,YAAY,CAACS,IAAb,CACEpD,KAAK,CAACqO,4BAAN,CACE5N,UAAU,GAAG6C,KADf,CAEErB,IAFF,CAGET,OAAO,CAACyB,SAHV,CAIE2H,KAJF,CADF,EASA,MAAOpJ,CAAAA,OAAP,CACD","sourcesContent":["import {\n  Account,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { sendTransaction, useConnection } from \"./connection\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Token, MintLayout, AccountLayout } from \"@solana/spl-token\";\nimport { notify } from \"./notifications\";\nimport {\n  cache,\n  getCachedAccount,\n  useUserAccounts,\n  useCachedPool,\n  getMultipleAccounts,\n} from \"./accounts\";\nimport {\n  programIds,\n  SWAP_HOST_FEE_ADDRESS,\n  SWAP_PROGRAM_OWNER_FEE_ADDRESS,\n  WRAPPED_SOL_MINT,\n} from \"./ids\";\nimport {\n  LiquidityComponent,\n  PoolInfo,\n  TokenAccount,\n  createInitSwapInstruction,\n  TokenSwapLayout,\n  depositInstruction,\n  withdrawInstruction,\n  TokenSwapLayoutLegacyV0,\n  swapInstruction,\n  PoolConfig,\n} from \"./../models\";\n\nconst LIQUIDITY_TOKEN_PRECISION = 8;\n\nexport const removeLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  liquidityAmount: number,\n  account: TokenAccount,\n  pool?: PoolInfo\n) => {\n  if (!pool) {\n    return;\n  }\n\n  notify({\n    message: \"Removing Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  // TODO get min amounts based on total supply and liquidity\n  const minAmount0 = 0;\n  const minAmount1 = 0;\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const signers: Account[] = [];\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  // TODO: check if one of to accounts needs to be native sol ... if yes unwrap it ...\n  const toAccounts: PublicKey[] = [\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountA.info.mint,\n      signers\n    ),\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountB.info.mint,\n      signers\n    ),\n  ];\n\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      account.pubkey,\n      authority,\n      wallet.publicKey,\n      [],\n      liquidityAmount\n    )\n  );\n\n  // withdraw\n  instructions.push(\n    withdrawInstruction(\n      pool.pubkeys.account,\n      authority,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      account.pubkey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      toAccounts[0],\n      toAccounts[1],\n      pool.pubkeys.program,\n      programIds().token,\n      liquidityAmount,\n      minAmount0,\n      minAmount1\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Liquidity Returned. Thank you for your support.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n};\n\nexport const swap = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  SLIPPAGE: number,\n  pool?: PoolInfo\n) => {\n  if (!pool || !components[0].account) {\n    notify({\n      type: \"error\",\n      message: `Pool doesn't exsist.`,\n      description: `Swap trade cancelled`,\n    });\n    return;\n  }\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amountIn = components[0].amount; // these two should include slippage\n  const minAmountOut = components[1].amount * (1 - SLIPPAGE);\n  const holdingA =\n    pool.pubkeys.holdingMints[0]?.toBase58() ===\n    components[0].account.info.mint.toBase58()\n      ? pool.pubkeys.holdingAccounts[0]\n      : pool.pubkeys.holdingAccounts[1];\n  const holdingB =\n    holdingA === pool.pubkeys.holdingAccounts[0]\n      ? pool.pubkeys.holdingAccounts[1]\n      : pool.pubkeys.holdingAccounts[0];\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority || !pool.pubkeys.feeAccount) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const fromAccount = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    components[0].account,\n    wallet.publicKey,\n    amountIn + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    cleanupInstructions,\n    accountRentExempt,\n    new PublicKey(components[1].mintAddress),\n    signers\n  );\n\n  // create approval for transfer transactions\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromAccount,\n      authority,\n      wallet.publicKey,\n      [],\n      amountIn\n    )\n  );\n\n  let hostFeeAccount = SWAP_HOST_FEE_ADDRESS\n    ? findOrCreateAccountByMint(\n        wallet.publicKey,\n        SWAP_HOST_FEE_ADDRESS,\n        instructions,\n        cleanupInstructions,\n        accountRentExempt,\n        pool.pubkeys.mint,\n        signers\n      )\n    : undefined;\n\n  // swap\n  instructions.push(\n    swapInstruction(\n      pool.pubkeys.account,\n      authority,\n      fromAccount,\n      holdingA,\n      holdingB,\n      toAccount,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      amountIn,\n      minAmountOut,\n      hostFeeAccount\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Trade executed.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n};\n\nexport const addLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  slippage: number,\n  pool?: PoolInfo,\n  options?: PoolConfig\n) => {\n  if (!pool) {\n    if (!options) {\n      throw new Error(\"Options are required to create new pool.\");\n    }\n\n    await _addLiquidityNewPool(wallet, connection, components, options);\n  } else {\n    await _addLiquidityExistingPool(pool, components, connection, wallet);\n  }\n};\n\nconst getHoldings = (connection: Connection, accounts: string[]) => {\n  return accounts.map((acc) =>\n    cache.queryAccount(connection, new PublicKey(acc))\n  );\n};\n\nconst toPoolInfo = (item: any, program: PublicKey) => {\n  const mint = new PublicKey(item.data.tokenPool);\n  return {\n    pubkeys: {\n      account: item.pubkey,\n      program: program,\n      mint,\n      holdingMints: [] as PublicKey[],\n      holdingAccounts: [item.data.tokenAccountA, item.data.tokenAccountB].map(\n        (a) => new PublicKey(a)\n      ),\n    },\n    legacy: false,\n    raw: item,\n  } as PoolInfo;\n};\n\nexport const usePools = () => {\n  const connection = useConnection();\n  const [pools, setPools] = useState<PoolInfo[]>([]);\n\n  // initial query\n  useEffect(() => {\n    setPools([]);\n\n    const queryPools = async (swapId: PublicKey, isLegacy = false) => {\n      let poolsArray: PoolInfo[] = [];\n      (await connection.getProgramAccounts(swapId))\n        .filter(\n          (item) =>\n            item.account.data.length === TokenSwapLayout.span ||\n            item.account.data.length === TokenSwapLayoutLegacyV0.span\n        )\n        .map((item) => {\n          let result = {\n            data: undefined as any,\n            account: item.account,\n            pubkey: item.pubkey,\n            init: async () => {},\n          };\n\n          // handling of legacy layout can be removed soon...\n          if (item.account.data.length === TokenSwapLayoutLegacyV0.span) {\n            result.data = TokenSwapLayoutLegacyV0.decode(item.account.data);\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            poolsArray.push(pool as PoolInfo);\n\n            result.init = async () => {\n              try {\n                // TODO: this is not great\n                // Ideally SwapLayout stores hash of all the mints to make finding of pool for a pair easier\n                const holdings = await Promise.all(\n                  getHoldings(connection, [\n                    result.data.tokenAccountA,\n                    result.data.tokenAccountB,\n                  ])\n                );\n\n                pool.pubkeys.holdingMints = [\n                  holdings[0].info.mint,\n                  holdings[1].info.mint,\n                ] as PublicKey[];\n              } catch (err) {\n                console.log(err);\n              }\n            };\n          } else {\n            result.data = TokenSwapLayout.decode(item.account.data);\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            pool.pubkeys.feeAccount = new PublicKey(result.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(result.data.mintA),\n              new PublicKey(result.data.mintB),\n            ] as PublicKey[];\n\n            poolsArray.push(pool as PoolInfo);\n          }\n\n          return result;\n        });\n\n      const toQuery = poolsArray\n        .map(\n          (p) =>\n            [\n              ...p.pubkeys.holdingAccounts.map((h) => h.toBase58()),\n              ...p.pubkeys.holdingMints.map((h) => h.toBase58()),\n              p.pubkeys.feeAccount?.toBase58(), // used to calculate volume aproximation\n              p.pubkeys.mint.toBase58(),\n            ].filter((p) => p) as string[]\n        )\n        .flat();\n\n      // This will pre-cache all accounts used by pools\n      // All those accounts are updated whenever there is a change\n      await getMultipleAccounts(connection, toQuery, \"single\").then(\n        ({ keys, array }) => {\n          return array.map((obj, index) => {\n            const pubKey = new PublicKey(keys[index]);\n            if (obj.data.length === AccountLayout.span) {\n              return cache.addAccount(pubKey, obj);\n            } else if (obj.data.length === MintLayout.span) {\n              return cache.addMint(pubKey, obj);\n            }\n\n            return obj;\n          }) as any[];\n        }\n      );\n\n      return poolsArray;\n    };\n\n    Promise.all([\n      queryPools(programIds().swap),\n      ...programIds().swap_legacy.map((leg) => queryPools(leg, true)),\n    ]).then((all) => {\n      setPools(all.flat());\n    });\n  }, [connection]);\n\n  useEffect(() => {\n    const subID = connection.onProgramAccountChange(\n      programIds().swap,\n      async (info) => {\n        const id = (info.accountId as unknown) as string;\n        if (info.accountInfo.data.length === TokenSwapLayout.span) {\n          const account = info.accountInfo;\n          const updated = {\n            data: TokenSwapLayout.decode(account.data),\n            account: account,\n            pubkey: new PublicKey(id),\n          };\n\n          const index =\n            pools &&\n            pools.findIndex((p) => p.pubkeys.account.toBase58() === id);\n          if (index && index >= 0 && pools) {\n            // TODO: check if account is empty?\n\n            const filtered = pools.filter((p, i) => i !== index);\n            setPools([...filtered, toPoolInfo(updated, programIds().swap)]);\n          } else {\n            let pool = toPoolInfo(updated, programIds().swap);\n\n            pool.pubkeys.feeAccount = new PublicKey(updated.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(updated.data.mintA),\n              new PublicKey(updated.data.mintB),\n            ] as PublicKey[];\n\n            setPools([...pools, pool]);\n          }\n        }\n      },\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeProgramAccountChangeListener(subID);\n    };\n  }, [connection, pools]);\n\n  return { pools };\n};\n\nexport const usePoolForBasket = (mints: (string | undefined)[]) => {\n  const connection = useConnection();\n  const { pools } = useCachedPool();\n  const [pool, setPool] = useState<PoolInfo>();\n  const sortedMints = useMemo(() => [...mints].sort(), [...mints]);\n  useEffect(() => {\n    (async () => {\n      // reset pool during query\n      setPool(undefined);\n\n      let matchingPool = pools\n        .filter((p) => !p.legacy)\n        .filter((p) =>\n          p.pubkeys.holdingMints\n            .map((a) => a.toBase58())\n            .sort()\n            .every((address, i) => address === sortedMints[i])\n        );\n\n      for (let i = 0; i < matchingPool.length; i++) {\n        const p = matchingPool[i];\n\n        const account = await cache.queryAccount(\n          connection,\n          p.pubkeys.holdingAccounts[0]\n        );\n\n        if (!account.info.amount.eqn(0)) {\n          setPool(p);\n          return;\n        }\n      }\n    })();\n  }, [connection, sortedMints, pools]);\n\n  return pool;\n};\n\nexport const useOwnedPools = () => {\n  const { pools } = useCachedPool();\n  const { userAccounts } = useUserAccounts();\n\n  const ownedPools = useMemo(() => {\n    const map = userAccounts.reduce((acc, item) => {\n      const key = item.info.mint.toBase58();\n      acc.set(key, [...(acc.get(key) || []), item]);\n      return acc;\n    }, new Map<string, TokenAccount[]>());\n\n    return pools\n      .filter((p) => map.has(p.pubkeys.mint.toBase58()))\n      .map((item) => {\n        let feeAccount = item.pubkeys.feeAccount?.toBase58();\n        return map.get(item.pubkeys.mint.toBase58())?.map((a) => {\n          return {\n            account: a as TokenAccount,\n            isFeeAccount: feeAccount === a.pubkey.toBase58(),\n            pool: item,\n          };\n        }) as {\n          account: TokenAccount;\n          isFeeAccount: boolean;\n          pool: PoolInfo;\n        }[];\n      })\n      .flat();\n  }, [pools, userAccounts]);\n\n  return ownedPools;\n};\n\n// Allow for this much price movement in the pool before adding liquidity to the pool aborts\nconst SLIPPAGE = 0.005;\n\nasync function _addLiquidityExistingPool(\n  pool: PoolInfo,\n  components: LiquidityComponent[],\n  connection: Connection,\n  wallet: any\n) {\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (!pool.pubkeys.feeAccount) {\n    throw new Error(\"Invald fee account\");\n  }\n\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n\n  const reserve0 = accountA.info.amount.toNumber();\n  const reserve1 = accountB.info.amount.toNumber();\n  const fromA =\n    accountA.info.mint.toBase58() === components[0].mintAddress\n      ? components[0]\n      : components[1];\n  const fromB = fromA === components[0] ? components[1] : components[0];\n\n  if (!fromA.account || !fromB.account) {\n    throw new Error(\"Missing account info.\");\n  }\n\n  const supply = poolMint.supply.toNumber();\n  const authority = poolMint.mintAuthority;\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amount0 = fromA.amount;\n  const amount1 = fromB.amount;\n\n  const liquidity = Math.min(\n    (amount0 * (1 - SLIPPAGE) * supply) / reserve0,\n    (amount1 * (1 - SLIPPAGE) * supply) / reserve1\n  );\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const fromKeyA = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromA.account,\n    wallet.publicKey,\n    amount0 + accountRentExempt,\n    signers\n  );\n  const fromKeyB = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromB.account,\n    wallet.publicKey,\n    amount1 + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    [],\n    accountRentExempt,\n    pool.pubkeys.mint,\n    signers,\n    new Set<string>([pool.pubkeys.feeAccount.toBase58()])\n  );\n\n  // create approval for transfer transactions\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromKeyA,\n      authority,\n      wallet.publicKey,\n      [],\n      amount0\n    )\n  );\n\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromKeyB,\n      authority,\n      wallet.publicKey,\n      [],\n      amount1\n    )\n  );\n\n  // depoist\n  instructions.push(\n    depositInstruction(\n      pool.pubkeys.account,\n      authority,\n      fromKeyA,\n      fromKeyB,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      pool.pubkeys.mint,\n      toAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      liquidity,\n      amount0,\n      amount1\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction findOrCreateAccountByMint(\n  payer: PublicKey,\n  owner: PublicKey,\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  accountRentExempt: number,\n  mint: PublicKey, // use to identify same type\n  signers: Account[],\n  excluded?: Set<string>\n): PublicKey {\n  const accountToFind = mint.toBase58();\n  const account = getCachedAccount(\n    (acc) =>\n      acc.info.mint.toBase58() === accountToFind &&\n      acc.info.owner.toBase58() === owner.toBase58() &&\n      (excluded === undefined || !excluded.has(acc.pubkey.toBase58()))\n  );\n  const isWrappedSol = accountToFind === WRAPPED_SOL_MINT.toBase58();\n\n  let toAccount: PublicKey;\n  if (account && !isWrappedSol) {\n    toAccount = account.pubkey;\n  } else {\n    // creating depositor pool account\n    const newToAccount = createSplAccount(\n      instructions,\n      payer,\n      accountRentExempt,\n      mint,\n      owner,\n      AccountLayout.span\n    );\n\n    toAccount = newToAccount.publicKey;\n    signers.push(newToAccount);\n\n    if (isWrappedSol) {\n      cleanupInstructions.push(\n        Token.createCloseAccountInstruction(\n          programIds().token,\n          toAccount,\n          payer,\n          payer,\n          []\n        )\n      );\n    }\n  }\n\n  return toAccount;\n}\n\nfunction estimateProceedsFromInput(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  inputAmount: number\n): number {\n  return (\n    (proceedsQuantityInPool * inputAmount) / (inputQuantityInPool + inputAmount)\n  );\n}\n\nfunction estimateInputFromProceeds(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  proceedsAmount: number\n): number | string {\n  if (proceedsAmount >= proceedsQuantityInPool) {\n    return \"Not possible\";\n  }\n\n  return (\n    (inputQuantityInPool * proceedsAmount) /\n    (proceedsQuantityInPool - proceedsAmount)\n  );\n}\n\nexport enum PoolOperation {\n  Add,\n  SwapGivenInput,\n  SwapGivenProceeds,\n}\n\nexport async function calculateDependentAmount(\n  connection: Connection,\n  independent: string,\n  amount: number,\n  pool: PoolInfo,\n  op: PoolOperation\n): Promise<number | string | undefined> {\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (poolMint.supply.eqn(0)) {\n    return;\n  }\n\n  const mintA = await cache.queryMint(connection, accountA.info.mint);\n  const mintB = await cache.queryMint(connection, accountB.info.mint);\n\n  if (!mintA || !mintB) {\n    return;\n  }\n\n  const isFirstIndependent = accountA.info.mint.toBase58() === independent;\n  const depPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintB.decimals : mintA.decimals\n  );\n  const indPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintA.decimals : mintB.decimals\n  );\n  const indAdjustedAmount = amount * indPrecision;\n\n  let indBasketQuantity = (isFirstIndependent\n    ? accountA\n    : accountB\n  ).info.amount.toNumber();\n  let depBasketQuantity = (isFirstIndependent\n    ? accountB\n    : accountA\n  ).info.amount.toNumber();\n\n  var depAdjustedAmount;\n  switch (+op) {\n    case PoolOperation.Add:\n      {\n        depAdjustedAmount =\n          (depBasketQuantity / indBasketQuantity) * indAdjustedAmount;\n      }\n      break;\n    case PoolOperation.SwapGivenProceeds:\n      {\n        depAdjustedAmount = estimateInputFromProceeds(\n          depBasketQuantity,\n          indBasketQuantity,\n          indAdjustedAmount\n        );\n      }\n      break;\n    case PoolOperation.SwapGivenInput:\n      {\n        depAdjustedAmount = estimateProceedsFromInput(\n          indBasketQuantity,\n          depBasketQuantity,\n          indAdjustedAmount\n        );\n      }\n      break;\n  }\n  if (typeof depAdjustedAmount === \"string\") {\n    return depAdjustedAmount;\n  }\n  if (depAdjustedAmount === undefined) {\n    return undefined;\n  }\n  return depAdjustedAmount / depPrecision;\n}\n\n// TODO: add ui to customize curve type\nasync function _addLiquidityNewPool(\n  wallet: any,\n  connection: Connection,\n  components: LiquidityComponent[],\n  options: PoolConfig\n) {\n  notify({\n    message: \"Creating new pool...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  if (components.some((c) => !c.account)) {\n    notify({\n      message: \"You need to have balance for all legs in the basket...\",\n      description: \"Please review inputs.\",\n      type: \"error\",\n    });\n    return;\n  }\n\n  let instructions: TransactionInstruction[] = [];\n  let cleanupInstructions: TransactionInstruction[] = [];\n\n  const liquidityTokenAccount = new Account();\n  // Create account for pool liquidity token\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: liquidityTokenAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      ),\n      space: MintLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  const tokenSwapAccount = new Account();\n\n  const [authority, nonce] = await PublicKey.findProgramAddress(\n    [tokenSwapAccount.publicKey.toBuffer()],\n    programIds().swap\n  );\n\n  // create mint for pool liquidity token\n  instructions.push(\n    Token.createInitMintInstruction(\n      programIds().token,\n      liquidityTokenAccount.publicKey,\n      LIQUIDITY_TOKEN_PRECISION,\n      // pass control of liquidity mint to swap program\n      authority,\n      // swap program can freeze liquidity token mint\n      null\n    )\n  );\n\n  // Create holding accounts for\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const holdingAccounts: Account[] = [];\n  let signers: Account[] = [];\n\n  components.forEach((leg) => {\n    if (!leg.account) {\n      return;\n    }\n\n    const mintPublicKey = leg.account.info.mint;\n    // component account to store tokens I of N in liquidity poll\n    holdingAccounts.push(\n      createSplAccount(\n        instructions,\n        wallet.publicKey,\n        accountRentExempt,\n        mintPublicKey,\n        authority,\n        AccountLayout.span\n      )\n    );\n  });\n\n  // creating depositor pool account\n  const depositorAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenAccount.publicKey,\n    wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // creating fee pool account its set from env variable or to creater of the pool\n  // creater of the pool is not allowed in some versions of token-swap program\n  const feeAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenAccount.publicKey,\n    SWAP_PROGRAM_OWNER_FEE_ADDRESS || wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // create all accounts in one transaction\n  let tx = await sendTransaction(connection, wallet, instructions, [\n    liquidityTokenAccount,\n    depositorAccount,\n    feeAccount,\n    ...holdingAccounts,\n    ...signers,\n  ]);\n\n  notify({\n    message: \"Accounts created\",\n    description: `Transaction ${tx}`,\n    type: \"success\",\n  });\n\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  signers = [];\n  instructions = [];\n  cleanupInstructions = [];\n\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: tokenSwapAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        TokenSwapLayout.span\n      ),\n      space: TokenSwapLayout.span,\n      programId: programIds().swap,\n    })\n  );\n\n  components.forEach((leg, i) => {\n    if (!leg.account) {\n      return;\n    }\n\n    // create temporary account for wrapped sol to perform transfer\n    const from = getWrappedAccount(\n      instructions,\n      cleanupInstructions,\n      leg.account,\n      wallet.publicKey,\n      leg.amount + accountRentExempt,\n      signers\n    );\n\n    instructions.push(\n      Token.createTransferInstruction(\n        programIds().token,\n        from,\n        holdingAccounts[i].publicKey,\n        wallet.publicKey,\n        [],\n        leg.amount\n      )\n    );\n  });\n\n  instructions.push(\n    createInitSwapInstruction(\n      tokenSwapAccount,\n      authority,\n      holdingAccounts[0].publicKey,\n      holdingAccounts[1].publicKey,\n      liquidityTokenAccount.publicKey,\n      feeAccount.publicKey,\n      depositorAccount.publicKey,\n      programIds().token,\n      programIds().swap,\n      nonce,\n      options.curveType,\n      options.tradeFeeNumerator,\n      options.tradeFeeDenominator,\n      options.ownerTradeFeeNumerator,\n      options.ownerTradeFeeDenominator,\n      options.ownerWithdrawFeeNumerator,\n      options.ownerWithdrawFeeDenominator\n    )\n  );\n\n  // All instructions didn't fit in single transaction\n  // initialize and provide inital liquidity to swap in 2nd (this prevents loss of funds)\n  tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    [tokenSwapAccount, ...signers]\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction getWrappedAccount(\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  toCheck: TokenAccount,\n  payer: PublicKey,\n  amount: number,\n  signers: Account[]\n) {\n  if (!toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: AccountLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      WRAPPED_SOL_MINT,\n      account.publicKey,\n      payer\n    )\n  );\n\n  cleanupInstructions.push(\n    Token.createCloseAccountInstruction(\n      programIds().token,\n      account.publicKey,\n      payer,\n      payer,\n      []\n    )\n  );\n\n  signers.push(account);\n\n  return account.publicKey;\n}\n\nfunction createSplAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  accountRentExempt: number,\n  mint: PublicKey,\n  owner: PublicKey,\n  space: number\n) {\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: accountRentExempt,\n      space,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      mint,\n      account.publicKey,\n      owner\n    )\n  );\n\n  return account;\n}\n"]},"metadata":{},"sourceType":"module"}