{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nexport const WRAPPED_SOL_MINT = new PublicKey(\"So11111111111111111111111111111111111111112\");\nlet TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nlet SWAP_PROGRAM_ID;\nlet SWAP_PROGRAM_LEGACY_IDS;\nexport const SWAP_HOST_FEE_ADDRESS = process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS ? new PublicKey(`${process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS}`) : undefined;\nexport const SWAP_PROGRAM_OWNER_FEE_ADDRESS = new PublicKey(\"HfoTxFR1Tm6kGmWgYWD6J7YHVy1UwqSULUGVLXkJqaKN\");\nconsole.debug(`Host address: ${SWAP_HOST_FEE_ADDRESS === null || SWAP_HOST_FEE_ADDRESS === void 0 ? void 0 : SWAP_HOST_FEE_ADDRESS.toBase58()}`);\nconsole.debug(`Owner address: ${SWAP_PROGRAM_OWNER_FEE_ADDRESS === null || SWAP_PROGRAM_OWNER_FEE_ADDRESS === void 0 ? void 0 : SWAP_PROGRAM_OWNER_FEE_ADDRESS.toBase58()}`); // legacy pools are used to show users contributions in those pools to allow for withdrawals of funds\n\nexport const PROGRAM_IDS = [{\n  name: \"mainnet-beta\",\n  swap: () => ({\n    current: new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\"),\n    legacy: []\n  })\n}, {\n  name: \"testnet\",\n  swap: () => ({\n    current: new PublicKey(\"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\"),\n    legacy: [new PublicKey(\"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\"), new PublicKey(\"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\")]\n  })\n}, {\n  name: \"devnet\",\n  swap: () => ({\n    current: new PublicKey(\"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\"),\n    legacy: [new PublicKey(\"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\"), new PublicKey(\"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\"), new PublicKey(\"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\")]\n  })\n}, {\n  name: \"localnet\",\n  swap: () => ({\n    current: new PublicKey(\"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\"),\n    legacy: []\n  })\n}];\nexport const setProgramIds = envName => {\n  let instance = PROGRAM_IDS.find(env => env.name === envName);\n\n  if (!instance) {\n    return;\n  }\n\n  let swap = instance.swap();\n  SWAP_PROGRAM_ID = swap.current;\n  SWAP_PROGRAM_LEGACY_IDS = swap.legacy;\n};\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    swap: SWAP_PROGRAM_ID,\n    swap_legacy: SWAP_PROGRAM_LEGACY_IDS\n  };\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/ids.tsx"],"names":["PublicKey","WRAPPED_SOL_MINT","TOKEN_PROGRAM_ID","SWAP_PROGRAM_ID","SWAP_PROGRAM_LEGACY_IDS","SWAP_HOST_FEE_ADDRESS","process","env","REACT_APP_SWAP_HOST_FEE_ADDRESS","undefined","SWAP_PROGRAM_OWNER_FEE_ADDRESS","console","debug","toBase58","PROGRAM_IDS","name","swap","current","legacy","setProgramIds","envName","instance","find","programIds","token","swap_legacy"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,IAAID,SAAJ,CAC9B,6CAD8B,CAAzB;AAGP,IAAIE,gBAAgB,GAAG,IAAIF,SAAJ,CACrB,6CADqB,CAAvB;AAIA,IAAIG,eAAJ;AACA,IAAIC,uBAAJ;AAEA,OAAO,MAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAR,CAAYC,+BAAZ,GACjC,IAAIR,SAAJ,CAAe,GAAEM,OAAO,CAACC,GAAR,CAAYC,+BAAgC,EAA7D,CADiC,GAEjCC,SAFG;AAGP,OAAO,MAAMC,8BAA8B,GAAG,IAAIV,SAAJ,CAC5C,8CAD4C,CAAvC;AAIPW,OAAO,CAACC,KAAR,CAAe,iBAAgBP,qBAAjB,aAAiBA,qBAAjB,uBAAiBA,qBAAqB,CAAEQ,QAAvB,EAAkC,EAAjE;AACAF,OAAO,CAACC,KAAR,CAAe,kBAAiBF,8BAAlB,aAAkBA,8BAAlB,uBAAkBA,8BAA8B,CAAEG,QAAhC,EAA2C,EAA3E,E,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,CACzB;AACEC,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,OAAO,EAAE,IAAIjB,SAAJ,CAAc,8CAAd,CADE;AAEXkB,IAAAA,MAAM,EAAE;AAFG,GAAP;AAFR,CADyB,EAQzB;AACEH,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,OAAO,EAAE,IAAIjB,SAAJ,CAAc,8CAAd,CADE;AAEXkB,IAAAA,MAAM,EAAE,CACN,IAAIlB,SAAJ,CAAc,8CAAd,CADM,EAEN,IAAIA,SAAJ,CAAc,8CAAd,CAFM;AAFG,GAAP;AAFR,CARyB,EAkBzB;AACEe,EAAAA,IAAI,EAAE,QADR;AAEEC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,OAAO,EAAE,IAAIjB,SAAJ,CAAc,8CAAd,CADE;AAEXkB,IAAAA,MAAM,EAAE,CACN,IAAIlB,SAAJ,CAAc,8CAAd,CADM,EAEN,IAAIA,SAAJ,CAAc,8CAAd,CAFM,EAGN,IAAIA,SAAJ,CAAc,8CAAd,CAHM;AAFG,GAAP;AAFR,CAlByB,EA6BzB;AACEe,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,OAAO,EAAE,IAAIjB,SAAJ,CAAc,8CAAd,CADE;AAEXkB,IAAAA,MAAM,EAAE;AAFG,GAAP;AAFR,CA7ByB,CAApB;AAsCP,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAqB;AAChD,MAAIC,QAAQ,GAAGP,WAAW,CAACQ,IAAZ,CAAkBf,GAAD,IAASA,GAAG,CAACQ,IAAJ,KAAaK,OAAvC,CAAf;;AACA,MAAI,CAACC,QAAL,EAAe;AACb;AACD;;AAED,MAAIL,IAAI,GAAGK,QAAQ,CAACL,IAAT,EAAX;AAEAb,EAAAA,eAAe,GAAGa,IAAI,CAACC,OAAvB;AACAb,EAAAA,uBAAuB,GAAGY,IAAI,CAACE,MAA/B;AACD,CAVM;AAYP,OAAO,MAAMK,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLC,IAAAA,KAAK,EAAEtB,gBADF;AAELc,IAAAA,IAAI,EAAEb,eAFD;AAGLsB,IAAAA,WAAW,EAAErB;AAHR,GAAP;AAKD,CANM","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nlet TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nlet SWAP_PROGRAM_ID: PublicKey;\nlet SWAP_PROGRAM_LEGACY_IDS: PublicKey[];\n\nexport const SWAP_HOST_FEE_ADDRESS = process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS\n  ? new PublicKey(`${process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS}`)\n  : undefined;\nexport const SWAP_PROGRAM_OWNER_FEE_ADDRESS = new PublicKey(\n  \"HfoTxFR1Tm6kGmWgYWD6J7YHVy1UwqSULUGVLXkJqaKN\"\n);\n\nconsole.debug(`Host address: ${SWAP_HOST_FEE_ADDRESS?.toBase58()}`);\nconsole.debug(`Owner address: ${SWAP_PROGRAM_OWNER_FEE_ADDRESS?.toBase58()}`);\n\n// legacy pools are used to show users contributions in those pools to allow for withdrawals of funds\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n    swap: () => ({\n      current: new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\"),\n      legacy: [],\n    }),\n  },\n  {\n    name: \"testnet\",\n    swap: () => ({\n      current: new PublicKey(\"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\"),\n      legacy: [\n        new PublicKey(\"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\"),\n        new PublicKey(\"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\"),\n      ],\n    }),\n  },\n  {\n    name: \"devnet\",\n    swap: () => ({\n      current: new PublicKey(\"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\"),\n      legacy: [\n        new PublicKey(\"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\"),\n        new PublicKey(\"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\"),\n        new PublicKey(\"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\"),\n      ],\n    }),\n  },\n  {\n    name: \"localnet\",\n    swap: () => ({\n      current: new PublicKey(\"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\"),\n      legacy: [],\n    }),\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n\n  let swap = instance.swap();\n\n  SWAP_PROGRAM_ID = swap.current;\n  SWAP_PROGRAM_LEGACY_IDS = swap.legacy;\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    swap: SWAP_PROGRAM_ID,\n    swap_legacy: SWAP_PROGRAM_LEGACY_IDS,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}