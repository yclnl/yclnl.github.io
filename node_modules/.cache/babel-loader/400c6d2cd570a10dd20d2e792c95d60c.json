{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/utils/currencyPair.tsx\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { calculateDependentAmount, usePoolForBasket, PoolOperation } from \"./pools\";\nimport { useMint, useAccountByMint } from \"./accounts\";\nimport { useConnection, useConnectionConfig } from \"./connection\";\nimport { convert } from \"./utils\";\nimport PopularTokens from \"../utils/token-list.json\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport bs58 from 'bs58';\nconst CurrencyPairContext = React.createContext(null);\nexport function CurrencyPairProvider({\n  children = null\n}) {\n  const connection = useConnection();\n  const {\n    env\n  } = useConnectionConfig();\n  const [amountA, setAmountA] = useState(\"\");\n  const [amountB, setAmountB] = useState(\"\");\n  const history = useHistory();\n  const location = useLocation();\n  const [mintAddressA, setMintAddressA] = useState(\"\");\n  const [mintAddressB, setMintAddressB] = useState(\"\");\n  const [lastTypedAccount, setLastTypedAccount] = useState(\"\");\n  const accountA = useAccountByMint(mintAddressA);\n  const accountB = useAccountByMint(mintAddressB);\n  const mintA = useMint(mintAddressA);\n  const mintB = useMint(mintAddressB);\n  const pool = usePoolForBasket([mintAddressA, mintAddressB]);\n  const [poolOperation, setPoolOperation] = useState(PoolOperation.Add); // updates browser history on token changes\n\n  useEffect(() => {\n    var _PopularTokens$env$fi, _PopularTokens$env$fi2;\n\n    // set history\n    const base = ((_PopularTokens$env$fi = PopularTokens[env].find(t => t.mintAddress === mintAddressA)) === null || _PopularTokens$env$fi === void 0 ? void 0 : _PopularTokens$env$fi.tokenSymbol) || mintAddressA;\n    const quote = ((_PopularTokens$env$fi2 = PopularTokens[env].find(t => t.mintAddress === mintAddressB)) === null || _PopularTokens$env$fi2 === void 0 ? void 0 : _PopularTokens$env$fi2.tokenSymbol) || mintAddressB;\n\n    if (base && quote && location.pathname.indexOf(\"info\") < 0) {\n      history.push({\n        search: `?pair=${base}-${quote}`\n      });\n    } else {\n      if (mintAddressA && mintAddressB) {\n        history.push({\n          search: ``\n        });\n      } else {\n        return;\n      }\n    }\n  }, [mintAddressA, mintAddressB]); // Updates tokens on location change\n\n  useEffect(() => {\n    var _PopularTokens$env$fi3, _PopularTokens$env$fi4;\n\n    if (!location.search && mintAddressA && mintAddressB) {\n      return;\n    }\n\n    let {\n      defaultBase,\n      defaultQuote\n    } = getDefaultTokens(env, location.search);\n\n    if (!defaultBase || !defaultQuote) {\n      return;\n    }\n\n    setMintAddressA(((_PopularTokens$env$fi3 = PopularTokens[env].find(t => t.tokenSymbol === defaultBase)) === null || _PopularTokens$env$fi3 === void 0 ? void 0 : _PopularTokens$env$fi3.mintAddress) || defaultBase || \"\");\n    setMintAddressB(((_PopularTokens$env$fi4 = PopularTokens[env].find(t => t.tokenSymbol === defaultQuote)) === null || _PopularTokens$env$fi4 === void 0 ? void 0 : _PopularTokens$env$fi4.mintAddress) || defaultQuote || \"\");\n  }, [location, location.search, setMintAddressA, setMintAddressB]);\n  const calculateDependent = useCallback(async () => {\n    if (pool && mintAddressA && mintAddressB) {\n      let setDependent;\n      let amount;\n      let independent;\n\n      if (lastTypedAccount === mintAddressA) {\n        independent = mintAddressA;\n        setDependent = setAmountB;\n        amount = parseFloat(amountA);\n      } else {\n        independent = mintAddressB;\n        setDependent = setAmountA;\n        amount = parseFloat(amountB);\n      }\n\n      const result = await calculateDependentAmount(connection, independent, amount, pool, poolOperation);\n\n      if (typeof result === \"string\") {\n        setDependent(result);\n      } else if (result !== undefined && Number.isFinite(result)) {\n        setDependent(result.toFixed(6));\n      } else {\n        setDependent(\"\");\n      }\n    }\n  }, [pool, mintAddressA, mintAddressB, setAmountA, setAmountB, amountA, amountB, connection, lastTypedAccount]);\n  useEffect(() => {\n    calculateDependent();\n  }, [amountB, amountA, lastTypedAccount, calculateDependent]);\n\n  const convertAmount = (amount, mint) => {\n    return parseFloat(amount) * Math.pow(10, (mint === null || mint === void 0 ? void 0 : mint.decimals) || 0);\n  };\n\n  return /*#__PURE__*/React.createElement(CurrencyPairContext.Provider, {\n    value: {\n      A: {\n        mintAddress: mintAddressA,\n        account: accountA,\n        mint: mintA,\n        amount: amountA,\n        setAmount: setAmountA,\n        setMint: setMintAddressA,\n        convertAmount: () => convertAmount(amountA, mintA),\n        sufficientBalance: () => accountA !== undefined && convert(accountA, mintA) >= parseFloat(amountA)\n      },\n      B: {\n        mintAddress: mintAddressB,\n        account: accountB,\n        mint: mintB,\n        amount: amountB,\n        setAmount: setAmountB,\n        setMint: setMintAddressB,\n        convertAmount: () => convertAmount(amountB, mintB),\n        sufficientBalance: () => accountB !== undefined && convert(accountB, mintB) >= parseFloat(amountB)\n      },\n      setLastTypedAccount,\n      setPoolOperation\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport const useCurrencyPairState = () => {\n  const context = useContext(CurrencyPairContext);\n  return context;\n};\n\nconst isValidAddress = address => {\n  const decoded = bs58.decode(address);\n  return decoded.length === 32;\n};\n\nfunction getDefaultTokens(env, search) {\n  let defaultBase = \"SOL\";\n  let defaultQuote = \"USDC\";\n  const nameToToken = PopularTokens[env].reduce((map, item) => {\n    map.set(item.tokenSymbol, item);\n    return map;\n  }, new Map());\n\n  if (search) {\n    const urlParams = new URLSearchParams(search);\n    const pair = urlParams.get(\"pair\");\n\n    if (pair) {\n      let items = pair.split(\"-\");\n\n      if (items.length > 1) {\n        if (nameToToken.has(items[0]) || isValidAddress(items[0])) {\n          defaultBase = items[0];\n        }\n\n        if (nameToToken.has(items[1]) || isValidAddress(items[1])) {\n          defaultQuote = items[1];\n        }\n      }\n    }\n  }\n\n  return {\n    defaultBase,\n    defaultQuote\n  };\n}","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/currencyPair.tsx"],"names":["React","useCallback","useContext","useEffect","useState","calculateDependentAmount","usePoolForBasket","PoolOperation","useMint","useAccountByMint","useConnection","useConnectionConfig","convert","PopularTokens","useHistory","useLocation","bs58","CurrencyPairContext","createContext","CurrencyPairProvider","children","connection","env","amountA","setAmountA","amountB","setAmountB","history","location","mintAddressA","setMintAddressA","mintAddressB","setMintAddressB","lastTypedAccount","setLastTypedAccount","accountA","accountB","mintA","mintB","pool","poolOperation","setPoolOperation","Add","base","find","t","mintAddress","tokenSymbol","quote","pathname","indexOf","push","search","defaultBase","defaultQuote","getDefaultTokens","calculateDependent","setDependent","amount","independent","parseFloat","result","undefined","Number","isFinite","toFixed","convertAmount","mint","Math","pow","decimals","A","account","setAmount","setMint","sufficientBalance","B","useCurrencyPairState","context","isValidAddress","address","decoded","decode","length","nameToToken","reduce","map","item","set","Map","urlParams","URLSearchParams","pair","get","items","split","has"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  calculateDependentAmount,\n  usePoolForBasket,\n  PoolOperation,\n} from \"./pools\";\nimport { useMint, useAccountByMint } from \"./accounts\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { ENV, useConnection, useConnectionConfig } from \"./connection\";\nimport { TokenAccount } from \"../models\";\nimport { convert } from \"./utils\";\nimport PopularTokens from \"../utils/token-list.json\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport bs58 from 'bs58';\n\nexport interface CurrencyContextState {\n  mintAddress: string;\n  account?: TokenAccount;\n  mint?: MintInfo;\n  amount: string;\n  setAmount: (val: string) => void;\n  setMint: (mintAddress: string) => void;\n  convertAmount: () => number;\n  sufficientBalance: () => boolean;\n}\n\nexport interface CurrencyPairContextState {\n  A: CurrencyContextState;\n  B: CurrencyContextState;\n  setLastTypedAccount: (mintAddress: string) => void;\n  setPoolOperation: (swapDirection: PoolOperation) => void;\n}\n\nconst CurrencyPairContext = React.createContext<CurrencyPairContextState | null>(\n  null\n);\n\nexport function CurrencyPairProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { env } = useConnectionConfig();\n  const [amountA, setAmountA] = useState(\"\");\n  const [amountB, setAmountB] = useState(\"\");\n  const history = useHistory();\n  const location = useLocation();\n  const [mintAddressA, setMintAddressA] = useState(\"\");\n  const [mintAddressB, setMintAddressB] = useState(\"\");\n  const [lastTypedAccount, setLastTypedAccount] = useState(\"\");\n  const accountA = useAccountByMint(mintAddressA);\n  const accountB = useAccountByMint(mintAddressB);\n  const mintA = useMint(mintAddressA);\n  const mintB = useMint(mintAddressB);\n  const pool = usePoolForBasket([mintAddressA, mintAddressB]);\n  const [poolOperation, setPoolOperation] = useState<PoolOperation>(\n    PoolOperation.Add\n  );\n\n  // updates browser history on token changes\n  useEffect(() => {\n    // set history\n    const base =\n      PopularTokens[env].find((t) => t.mintAddress === mintAddressA)\n        ?.tokenSymbol || mintAddressA;\n    const quote =\n      PopularTokens[env].find((t) => t.mintAddress === mintAddressB)\n        ?.tokenSymbol || mintAddressB;\n\n    if (base && quote && location.pathname.indexOf(\"info\") < 0) {\n      history.push({\n        search: `?pair=${base}-${quote}`,\n      });\n    } else {\n      if (mintAddressA && mintAddressB) {\n        history.push({\n          search: ``,\n        });\n      } else {\n        return;\n      }\n    }\n  }, [mintAddressA, mintAddressB]);\n\n  // Updates tokens on location change\n  useEffect(() => {\n    if (!location.search && mintAddressA && mintAddressB) {\n      return;\n    }\n\n    let { defaultBase, defaultQuote } = getDefaultTokens(env, location.search);\n    if (!defaultBase || !defaultQuote) {\n      return;\n    }\n    setMintAddressA(\n      PopularTokens[env].find((t) => t.tokenSymbol === defaultBase)\n        ?.mintAddress ||\n      defaultBase ||\n      \"\"\n    );\n    setMintAddressB(\n      PopularTokens[env].find((t) => t.tokenSymbol === defaultQuote)\n        ?.mintAddress ||\n      defaultQuote ||\n      \"\"\n    );\n  }, [location, location.search, setMintAddressA, setMintAddressB]);\n\n  const calculateDependent = useCallback(async () => {\n    if (pool && mintAddressA && mintAddressB) {\n      let setDependent;\n      let amount;\n      let independent;\n      if (lastTypedAccount === mintAddressA) {\n        independent = mintAddressA;\n        setDependent = setAmountB;\n        amount = parseFloat(amountA);\n      } else {\n        independent = mintAddressB;\n        setDependent = setAmountA;\n        amount = parseFloat(amountB);\n      }\n\n      const result = await calculateDependentAmount(\n        connection,\n        independent,\n        amount,\n        pool,\n        poolOperation\n      );\n      if (typeof result === \"string\") {\n        setDependent(result);\n      } else if (result !== undefined && Number.isFinite(result)) {\n        setDependent(result.toFixed(6));\n      } else {\n        setDependent(\"\");\n      }\n    }\n  }, [\n    pool,\n    mintAddressA,\n    mintAddressB,\n    setAmountA,\n    setAmountB,\n    amountA,\n    amountB,\n    connection,\n    lastTypedAccount,\n  ]);\n\n  useEffect(() => {\n    calculateDependent();\n  }, [amountB, amountA, lastTypedAccount, calculateDependent]);\n\n  const convertAmount = (amount: string, mint?: MintInfo) => {\n    return parseFloat(amount) * Math.pow(10, mint?.decimals || 0);\n  };\n\n  return (\n    <CurrencyPairContext.Provider\n      value={{\n        A: {\n          mintAddress: mintAddressA,\n          account: accountA,\n          mint: mintA,\n          amount: amountA,\n          setAmount: setAmountA,\n          setMint: setMintAddressA,\n          convertAmount: () => convertAmount(amountA, mintA),\n          sufficientBalance: () =>\n            accountA !== undefined &&\n            convert(accountA, mintA) >= parseFloat(amountA),\n        },\n        B: {\n          mintAddress: mintAddressB,\n          account: accountB,\n          mint: mintB,\n          amount: amountB,\n          setAmount: setAmountB,\n          setMint: setMintAddressB,\n          convertAmount: () => convertAmount(amountB, mintB),\n          sufficientBalance: () =>\n            accountB !== undefined &&\n            convert(accountB, mintB) >= parseFloat(amountB),\n        },\n        setLastTypedAccount,\n        setPoolOperation,\n      }}\n    >\n      {children}\n    </CurrencyPairContext.Provider>\n  );\n}\n\nexport const useCurrencyPairState = () => {\n  const context = useContext(CurrencyPairContext);\n  return context as CurrencyPairContextState;\n};\n\nconst isValidAddress = (address: string) => {\n  const decoded = bs58.decode(address);\n  return decoded.length === 32;\n};\n\nfunction getDefaultTokens(env: ENV, search: string) {\n  let defaultBase = \"SOL\";\n  let defaultQuote = \"USDC\";\n\n  const nameToToken = (PopularTokens[env] as any[]).reduce((map, item) => {\n    map.set(item.tokenSymbol, item);\n    return map;\n  }, new Map<string, any>());\n\n  if (search) {\n    const urlParams = new URLSearchParams(search);\n    const pair = urlParams.get(\"pair\");\n    if (pair) {\n      let items = pair.split(\"-\");\n\n      if (items.length > 1) {\n        if (nameToToken.has(items[0]) || isValidAddress(items[0])) {\n          defaultBase = items[0];\n        }\n\n        if (nameToToken.has(items[1]) || isValidAddress(items[1])) {\n          defaultQuote = items[1];\n        }\n      }\n    }\n  }\n  return { defaultBase, defaultQuote };\n}\n"]},"metadata":{},"sourceType":"module"}