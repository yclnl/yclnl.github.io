{"ast":null,"code":"import _regeneratorRuntime from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from\"antd\";import{removeLiquidity}from\"../../utils/pools\";import{useWallet}from\"../../utils/wallet\";import{useConnection}from\"../../utils/connection\";import{notify}from\"../../utils/notifications\";export var RemoveLiquidity=function RemoveLiquidity(props){var _props$instance=props.instance,account=_props$instance.account,pool=_props$instance.pool;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useWallet=useWallet(),wallet=_useWallet.wallet;var connection=useConnection();var onRemove=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var liquidityAmount;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setPendingTx(true);// TODO: calculate percentage based on user input\nliquidityAmount=account.info.amount.toNumber();_context.next=5;return removeLiquidity(connection,wallet,liquidityAmount,account,pool);case 5:_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);notify({description:\"Please try again and approve transactions from your wallet\",message:\"Removing liquidity cancelled.\",type:\"error\"});case 10:_context.prev=10;setPendingTx(false);// TODO: force refresh of pool accounts?\nreturn _context.finish(10);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,7,10,13]]);}));return function onRemove(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Button,{type:\"default\",onClick:onRemove,disabled:pendingTx},\"Remove\"));};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/pool/remove.tsx"],"names":["React","useState","Button","removeLiquidity","useWallet","useConnection","notify","RemoveLiquidity","props","instance","account","pool","pendingTx","setPendingTx","wallet","connection","onRemove","liquidityAmount","info","amount","toNumber","description","message","type"],"mappings":"mbAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,MAAT,KAAuB,MAAvB,CAEA,OAASC,eAAT,KAAgC,mBAAhC,CACA,OAASC,SAAT,KAA0B,oBAA1B,CACA,OAASC,aAAT,KAA8B,wBAA9B,CAEA,OAASC,MAAT,KAAuB,2BAAvB,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAEzB,qBACsBA,KAAK,CAACC,QAD5B,CACIC,OADJ,iBACIA,OADJ,CACaC,IADb,iBACaA,IADb,eAE8BV,QAAQ,CAAC,KAAD,CAFtC,wCAEGW,SAFH,eAEcC,YAFd,8BAGeT,SAAS,EAHxB,CAGIU,MAHJ,YAGIA,MAHJ,CAIJ,GAAMC,CAAAA,UAAU,CAAGV,aAAa,EAAhC,CAEA,GAAMW,CAAAA,QAAQ,0FAAG,uKAEbH,YAAY,CAAC,IAAD,CAAZ,CACA;AACII,eAJS,CAISP,OAAO,CAACQ,IAAR,CAAaC,MAAb,CAAoBC,QAApB,EAJT,uBAKPjB,CAAAA,eAAe,CAACY,UAAD,CAAaD,MAAb,CAAqBG,eAArB,CAAsCP,OAAtC,CAA+CC,IAA/C,CALR,uFAObL,MAAM,CAAC,CACLe,WAAW,CACT,4DAFG,CAGLC,OAAO,CAAE,+BAHJ,CAILC,IAAI,CAAE,OAJD,CAAD,CAAN,CAPa,yBAcbV,YAAY,CAAC,KAAD,CAAZ,CACA;AAfa,qGAAH,kBAARG,CAAAA,QAAQ,0CAAd,CAmBA,mBACE,qDACE,oBAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,CAAuB,OAAO,CAAEA,QAAhC,CAA0C,QAAQ,CAAEJ,SAApD,WADF,CADF,CAOD,CAlCM","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"antd\";\n\nimport { removeLiquidity } from \"../../utils/pools\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { useConnection } from \"../../utils/connection\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport { notify } from \"../../utils/notifications\";\n\nexport const RemoveLiquidity = (props: {\n  instance: { account: TokenAccount; pool: PoolInfo };\n}) => {\n  const { account, pool } = props.instance;\n  const [pendingTx, setPendingTx] = useState(false);\n  const { wallet } = useWallet();\n  const connection = useConnection();\n\n  const onRemove = async () => {\n    try {\n      setPendingTx(true);\n      // TODO: calculate percentage based on user input\n      let liquidityAmount = account.info.amount.toNumber();\n      await removeLiquidity(connection, wallet, liquidityAmount, account, pool);\n    } catch {\n      notify({\n        description:\n          \"Please try again and approve transactions from your wallet\",\n        message: \"Removing liquidity cancelled.\",\n        type: \"error\",\n      });\n    } finally {\n      setPendingTx(false);\n      // TODO: force refresh of pool accounts?\n    }\n  };\n\n  return (\n    <>\n      <Button type=\"default\" onClick={onRemove} disabled={pendingTx}>\n        Remove\n      </Button>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}