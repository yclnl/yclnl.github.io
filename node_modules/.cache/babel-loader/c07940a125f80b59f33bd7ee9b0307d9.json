{"ast":null,"code":"import { useCallback, useState } from \"react\";\nimport PopularTokens from \"./token-list.json\";\nconst AddressToToken = Object.keys(PopularTokens).reduce((map, key) => {\n  const tokens = PopularTokens[key];\n  const knownMints = tokens.reduce((map, item) => {\n    map.set(item.mintAddress, item);\n    return map;\n  }, new Map());\n  map.set(key, knownMints);\n  return map;\n}, new Map());\nexport function useLocalStorageState(key, defaultState) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n\n    return defaultState;\n  });\n  const setLocalStorageState = useCallback(newState => {\n    const changed = state !== newState;\n\n    if (!changed) {\n      return;\n    }\n\n    setState(newState);\n\n    if (newState === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, JSON.stringify(newState));\n    }\n  }, [state, key]);\n  return [state, setLocalStorageState];\n} // shorten the checksummed version of the input address to have 4 characters at start and end\n\nexport function shortenAddress(address, chars = 4) {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\nexport function getTokenName(env, mintAddress, shorten = true) {\n  var _AddressToToken$get, _AddressToToken$get$g;\n\n  const knownSymbol = (_AddressToToken$get = AddressToToken.get(env)) === null || _AddressToToken$get === void 0 ? void 0 : (_AddressToToken$get$g = _AddressToToken$get.get(mintAddress)) === null || _AddressToToken$get$g === void 0 ? void 0 : _AddressToToken$get$g.tokenSymbol;\n\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\nexport function getTokenIcon(env, mintAddress) {\n  var _AddressToToken$get2, _AddressToToken$get2$;\n\n  return (_AddressToToken$get2 = AddressToToken.get(env)) === null || _AddressToToken$get2 === void 0 ? void 0 : (_AddressToToken$get2$ = _AddressToToken$get2.get(mintAddress)) === null || _AddressToToken$get2$ === void 0 ? void 0 : _AddressToToken$get2$.icon;\n}\nexport function getPoolName(env, pool, shorten = true) {\n  const sorted = pool.pubkeys.holdingMints.map(a => a.toBase58()).sort();\n  return sorted.map(item => getTokenName(env, item, shorten)).join(\"/\");\n}\nexport function isKnownMint(env, mintAddress) {\n  var _AddressToToken$get3;\n\n  return !!((_AddressToToken$get3 = AddressToToken.get(env)) === null || _AddressToToken$get3 === void 0 ? void 0 : _AddressToToken$get3.get(mintAddress));\n}\nexport const STABLE_COINS = new Set([\"USDC\", \"wUSDC\", \"USDT\"]);\nexport function chunks(array, size) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\nexport function convert(account, mint, rate = 1.0) {\n  var _account$info$amount;\n\n  if (!account) {\n    return 0;\n  }\n\n  const precision = Math.pow(10, (mint === null || mint === void 0 ? void 0 : mint.decimals) || 0);\n  return ((_account$info$amount = account.info.amount) === null || _account$info$amount === void 0 ? void 0 : _account$info$amount.toNumber()) / precision * rate;\n}\nvar SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n\nconst abbreviateNumber = (number, precision) => {\n  let tier = Math.log10(number) / 3 | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nconst format = (val, precision, abbr) => abbr ? abbreviateNumber(val, precision) : val.toFixed(precision);\n\nexport function formatTokenAmount(account, mint, rate = 1.0, prefix = \"\", suffix = \"\", precision = 6, abbr = false) {\n  if (!account) {\n    return \"\";\n  }\n\n  return `${[prefix]}${format(convert(account, mint, rate), precision, abbr)}${suffix}`;\n}\nexport const formatUSD = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\nexport const formatPct = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/utils.ts"],"names":["useCallback","useState","PopularTokens","AddressToToken","Object","keys","reduce","map","key","tokens","knownMints","item","set","mintAddress","Map","useLocalStorageState","defaultState","state","setState","storedState","localStorage","getItem","JSON","parse","setLocalStorageState","newState","changed","removeItem","setItem","stringify","shortenAddress","address","chars","slice","getTokenName","env","shorten","knownSymbol","get","tokenSymbol","substring","getTokenIcon","icon","getPoolName","pool","sorted","pubkeys","holdingMints","a","toBase58","sort","join","isKnownMint","STABLE_COINS","Set","chunks","array","size","Array","apply","Math","ceil","length","_","index","convert","account","mint","rate","precision","pow","decimals","info","amount","toNumber","SI_SYMBOL","abbreviateNumber","number","tier","log10","scaled","suffix","scale","toFixed","format","val","abbr","formatTokenAmount","prefix","formatUSD","Intl","NumberFormat","style","currency","formatPct","minimumFractionDigits","maximumFractionDigits"],"mappings":"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","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { MintInfo } from \"@solana/spl-token\";\n\nimport PopularTokens from \"./token-list.json\";\nimport { ENV } from \"./connection\";\nimport { PoolInfo, TokenAccount } from \"./../models\";\n\nexport interface KnownToken {\n  tokenSymbol: string;\n  tokenName: string;\n  icon: string;\n  mintAddress: string;\n}\n\nconst AddressToToken = Object.keys(PopularTokens).reduce((map, key) => {\n  const tokens = PopularTokens[key as ENV] as KnownToken[];\n  const knownMints = tokens.reduce((map, item) => {\n    map.set(item.mintAddress, item);\n    return map;\n  }, new Map<string, KnownToken>());\n\n  map.set(key as ENV, knownMints);\n\n  return map;\n}, new Map<ENV, Map<string, KnownToken>>());\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    (newState) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newState));\n      }\n    },\n    [state, key]\n  );\n\n  return [state, setLocalStorageState];\n}\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  env: ENV,\n  mintAddress: string,\n  shorten = true\n): string {\n  const knownSymbol = AddressToToken.get(env)?.get(mintAddress)?.tokenSymbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenIcon(\n  env: ENV,\n  mintAddress: string\n): string | undefined {\n  return AddressToToken.get(env)?.get(mintAddress)?.icon;\n}\n\nexport function getPoolName(env: ENV, pool: PoolInfo, shorten = true) {\n  const sorted = pool.pubkeys.holdingMints.map((a) => a.toBase58()).sort();\n  return sorted.map((item) => getTokenName(env, item, shorten)).join(\"/\");\n}\n\nexport function isKnownMint(env: ENV, mintAddress: string) {\n  return !!AddressToToken.get(env)?.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set([\"USDC\", \"wUSDC\", \"USDT\"]);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function convert(\n  account?: TokenAccount,\n  mint?: MintInfo,\n  rate: number = 1.0\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return (account.info.amount?.toNumber() / precision) * rate;\n}\n\nvar SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nconst format = (val: number, precision: number, abbr: boolean) =>\n  abbr ? abbreviateNumber(val, precision) : val.toFixed(precision);\n\nexport function formatTokenAmount(\n  account?: TokenAccount,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = \"\",\n  suffix = \"\",\n  precision = 6,\n  abbr = false\n): string {\n  if (!account) {\n    return \"\";\n  }\n\n  return `${[prefix]}${format(\n    convert(account, mint, rate),\n    precision,\n    abbr\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\nexport const formatPct = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n"]},"metadata":{},"sourceType":"module"}