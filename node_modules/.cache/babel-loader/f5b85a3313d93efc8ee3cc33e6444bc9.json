{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/components/currencyInput/index.tsx\";\nimport React from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport { getPoolName, getTokenName, isKnownMint } from \"../../utils/utils\";\nimport { useUserAccounts, useMint, useCachedPool } from \"../../utils/accounts\";\nimport \"./styles.less\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { PoolIcon, TokenIcon } from \"../tokenIcon\";\nimport PopularTokens from \"../../utils/token-list.json\";\nconst {\n  Option\n} = Select;\nexport const CurrencyInput = props => {\n  const {\n    userAccounts\n  } = useUserAccounts();\n  const {\n    pools\n  } = useCachedPool();\n  const mint = useMint(props.mint);\n  const {\n    env\n  } = useConnectionConfig();\n  const tokens = PopularTokens[env];\n  const renderPopularTokens = tokens.map(item => {\n    return /*#__PURE__*/React.createElement(Option, {\n      key: item.mintAddress,\n      value: item.mintAddress,\n      name: item.tokenSymbol,\n      title: item.mintAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      key: item.mintAddress,\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TokenIcon, {\n      mintAddress: item.mintAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }), item.tokenSymbol));\n  }); // TODO: expand nested pool names ...?\n  // group accounts by mint and use one with biggest balance\n\n  const grouppedUserAccounts = userAccounts.sort((a, b) => {\n    return b.info.amount.toNumber() - a.info.amount.toNumber();\n  }).reduce((map, acc) => {\n    const mint = acc.info.mint.toBase58();\n\n    if (isKnownMint(env, mint)) {\n      return map;\n    }\n\n    const pool = pools.find(p => p && p.pubkeys.mint.toBase58() === mint);\n    map.set(mint, (map.get(mint) || []).concat([{\n      account: acc,\n      pool\n    }]));\n    return map;\n  }, new Map());\n  const additionalAccounts = [...grouppedUserAccounts.keys()];\n\n  if (tokens.findIndex(t => t.mintAddress === props.mint) < 0 && props.mint && !grouppedUserAccounts.has(props === null || props === void 0 ? void 0 : props.mint)) {\n    additionalAccounts.push(props.mint);\n  }\n\n  const renderAdditionalTokens = additionalAccounts.map(mint => {\n    let pool;\n    const list = grouppedUserAccounts.get(mint);\n\n    if (list && list.length > 0) {\n      // TODO: group multple accounts of same time and select one with max amount\n      const account = list[0];\n      pool = account.pool;\n    }\n\n    let name;\n    let icon;\n\n    if (pool) {\n      name = getPoolName(env, pool);\n      const sorted = pool.pubkeys.holdingMints.map(a => a.toBase58()).sort();\n      icon = /*#__PURE__*/React.createElement(PoolIcon, {\n        mintA: sorted[0],\n        mintB: sorted[1],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 16\n        }\n      });\n    } else {\n      name = getTokenName(env, mint);\n      icon = /*#__PURE__*/React.createElement(TokenIcon, {\n        mintAddress: mint,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 16\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Option, {\n      key: mint,\n      value: mint,\n      name: name,\n      title: mint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      key: mint,\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, icon, name));\n  });\n\n  const userUiBalance = () => {\n    const currentAccount = userAccounts === null || userAccounts === void 0 ? void 0 : userAccounts.find(a => a.info.mint.toBase58() === props.mint);\n\n    if (currentAccount && mint) {\n      return currentAccount.info.amount.toNumber() / Math.pow(10, mint.decimals);\n    }\n\n    return 0;\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"ccy-input\",\n    style: {\n      borderRadius: 20\n    },\n    bodyStyle: {\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ccy-input-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ccy-input-header-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ccy-input-header-right\",\n    onClick: e => props.onInputChange && props.onInputChange(userUiBalance()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Balance: \", userUiBalance().toFixed(6))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ccy-input-header\",\n    style: {\n      padding: \"0px 10px 5px 7px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NumericInput, {\n    value: props.amount,\n    onChange: val => {\n      if (props.onInputChange) {\n        props.onInputChange(val);\n      }\n    },\n    style: {\n      fontSize: 20,\n      boxShadow: \"none\",\n      borderColor: \"transparent\",\n      outline: \"transpaernt\"\n    },\n    placeholder: \"0.00\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ccy-input-header-right\",\n    style: {\n      display: \"felx\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    size: \"large\",\n    showSearch: true,\n    style: {\n      minWidth: 120\n    },\n    placeholder: \"CCY\",\n    value: props.mint,\n    onChange: item => {\n      if (props.onMintChange) {\n        props.onMintChange(item);\n      }\n    },\n    filterOption: (input, option) => {\n      var _option$name;\n\n      return (option === null || option === void 0 ? void 0 : (_option$name = option.name) === null || _option$name === void 0 ? void 0 : _option$name.toLowerCase().indexOf(input.toLowerCase())) >= 0;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, [...renderPopularTokens, ...renderAdditionalTokens]))));\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/currencyInput/index.tsx"],"names":["React","Card","Select","NumericInput","getPoolName","getTokenName","isKnownMint","useUserAccounts","useMint","useCachedPool","useConnectionConfig","PoolIcon","TokenIcon","PopularTokens","Option","CurrencyInput","props","userAccounts","pools","mint","env","tokens","renderPopularTokens","map","item","mintAddress","tokenSymbol","display","alignItems","grouppedUserAccounts","sort","a","b","info","amount","toNumber","reduce","acc","toBase58","pool","find","p","pubkeys","set","get","concat","account","Map","additionalAccounts","keys","findIndex","t","has","push","renderAdditionalTokens","list","length","name","icon","sorted","holdingMints","userUiBalance","currentAccount","Math","pow","decimals","borderRadius","padding","title","e","onInputChange","toFixed","val","fontSize","boxShadow","borderColor","outline","minWidth","onMintChange","input","option","toLowerCase","indexOf"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport {\n  getPoolName,\n  getTokenName,\n  isKnownMint,\n  KnownToken,\n} from \"../../utils/utils\";\nimport { useUserAccounts, useMint, useCachedPool } from \"../../utils/accounts\";\nimport \"./styles.less\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { PoolIcon, TokenIcon } from \"../tokenIcon\";\nimport PopularTokens from \"../../utils/token-list.json\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\n\nconst { Option } = Select;\n\nexport const CurrencyInput = (props: {\n  mint?: string;\n  amount?: string;\n  title?: string;\n  onInputChange?: (val: number) => void;\n  onMintChange?: (account: string) => void;\n}) => {\n  const { userAccounts } = useUserAccounts();\n  const { pools } = useCachedPool();\n  const mint = useMint(props.mint);\n\n  const { env } = useConnectionConfig();\n\n  const tokens = PopularTokens[env] as KnownToken[];\n\n  const renderPopularTokens = tokens.map((item) => {\n    return (\n      <Option\n        key={item.mintAddress}\n        value={item.mintAddress}\n        name={item.tokenSymbol}\n        title={item.mintAddress}\n      >\n        <div\n          key={item.mintAddress}\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <TokenIcon mintAddress={item.mintAddress} />\n          {item.tokenSymbol}\n        </div>\n      </Option>\n    );\n  });\n\n  // TODO: expand nested pool names ...?\n\n  // group accounts by mint and use one with biggest balance\n  const grouppedUserAccounts = userAccounts\n    .sort((a, b) => {\n      return b.info.amount.toNumber() - a.info.amount.toNumber();\n    })\n    .reduce((map, acc) => {\n      const mint = acc.info.mint.toBase58();\n      if (isKnownMint(env, mint)) {\n        return map;\n      }\n\n      const pool = pools.find((p) => p && p.pubkeys.mint.toBase58() === mint);\n\n      map.set(mint, (map.get(mint) || []).concat([{ account: acc, pool }]));\n\n      return map;\n    }, new Map<string, { account: TokenAccount; pool: PoolInfo | undefined }[]>());\n\n  const additionalAccounts = [...grouppedUserAccounts.keys()];\n  if (tokens.findIndex((t) => t.mintAddress === props.mint) < 0 && props.mint && !grouppedUserAccounts.has(props?.mint)) {\n    additionalAccounts.push(props.mint);\n  }\n\n  const renderAdditionalTokens = additionalAccounts.map(\n    (mint) => {\n      let pool: PoolInfo | undefined;\n      const list = grouppedUserAccounts.get(mint);\n      if (list && list.length > 0) {\n        // TODO: group multple accounts of same time and select one with max amount\n        const account = list[0];\n        pool = account.pool;\n      }\n\n      let name: string;\n      let icon: JSX.Element;\n      if (pool) {\n        name = getPoolName(env, pool);\n\n        const sorted = pool.pubkeys.holdingMints\n          .map((a: PublicKey) => a.toBase58())\n          .sort();\n        icon = <PoolIcon mintA={sorted[0]} mintB={sorted[1]} />;\n      } else {\n        name = getTokenName(env, mint);\n        icon = <TokenIcon mintAddress={mint} />;\n      }\n\n      return (\n        <Option\n          key={mint}\n          value={mint}\n          name={name}\n          title={mint}\n        >\n          <div key={mint} style={{ display: \"flex\", alignItems: \"center\" }}>\n            {icon}\n            {name}\n          </div>\n        </Option>\n      );\n    }\n  );\n\n  const userUiBalance = () => {\n    const currentAccount = userAccounts?.find(\n      (a) => a.info.mint.toBase58() === props.mint\n    );\n    if (currentAccount && mint) {\n      return (\n        currentAccount.info.amount.toNumber() / Math.pow(10, mint.decimals)\n      );\n    }\n\n    return 0;\n  };\n\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"ccy-input-header\">\n        <div className=\"ccy-input-header-left\">{props.title}</div>\n\n        <div\n          className=\"ccy-input-header-right\"\n          onClick={(e) =>\n            props.onInputChange && props.onInputChange(userUiBalance())\n          }\n        >\n          Balance: {userUiBalance().toFixed(6)}\n        </div>\n      </div>\n      <div className=\"ccy-input-header\" style={{ padding: \"0px 10px 5px 7px\" }}>\n        <NumericInput\n          value={props.amount}\n          onChange={(val: any) => {\n            if (props.onInputChange) {\n              props.onInputChange(val);\n            }\n          }}\n          style={{\n            fontSize: 20,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          placeholder=\"0.00\"\n        />\n\n        <div className=\"ccy-input-header-right\" style={{ display: \"felx\" }}>\n          <Select\n            size=\"large\"\n            showSearch\n            style={{ minWidth: 120 }}\n            placeholder=\"CCY\"\n            value={props.mint}\n            onChange={(item) => {\n              if (props.onMintChange) {\n                props.onMintChange(item);\n              }\n            }}\n            filterOption={(input, option) =>\n              option?.name?.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {[...renderPopularTokens, ...renderAdditionalTokens]}\n          </Select>\n        </div>\n      </div>\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}