{"ast":null,"code":"import _regeneratorRuntime from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,Spin}from\"antd\";import React,{useState}from\"react\";import{useConnection,useConnectionConfig,useSlippageConfig}from\"../../utils/connection\";import{useWallet}from\"../../utils/wallet\";import{CurrencyInput}from\"../currencyInput\";import{LoadingOutlined}from\"@ant-design/icons\";import{swap,usePoolForBasket,PoolOperation}from\"../../utils/pools\";import{notify}from\"../../utils/notifications\";import{useCurrencyPairState}from\"../../utils/currencyPair\";import{generateActionLabel,POOL_NOT_AVAILABLE,SWAP_LABEL}from\"../labels\";import\"./trade.less\";import{getTokenName}from\"../../utils/utils\";import{PoolAddress}from\"../pool/address\";var antIcon=/*#__PURE__*/React.createElement(LoadingOutlined,{style:{fontSize:24},spin:true});// TODO:\n// Compute price breakdown with/without fee\n// Show slippage\n// Show fee information\nexport var TradeEntry=function TradeEntry(){var _useWallet=useWallet(),wallet=_useWallet.wallet,connected=_useWallet.connected;var connection=useConnection();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useCurrencyPairState=useCurrencyPairState(),A=_useCurrencyPairState.A,B=_useCurrencyPairState.B,setLastTypedAccount=_useCurrencyPairState.setLastTypedAccount,setPoolOperation=_useCurrencyPairState.setPoolOperation;var pool=usePoolForBasket([A===null||A===void 0?void 0:A.mintAddress,B===null||B===void 0?void 0:B.mintAddress]);var _useSlippageConfig=useSlippageConfig(),slippage=_useSlippageConfig.slippage;var _useConnectionConfig=useConnectionConfig(),env=_useConnectionConfig.env;var swapAccounts=function swapAccounts(){var tempMint=A.mintAddress;var tempAmount=A.amount;A.setMint(B.mintAddress);A.setAmount(B.amount);B.setMint(tempMint);B.setAmount(tempAmount);// @ts-ignore\nsetPoolOperation(function(op){switch(+op){case PoolOperation.SwapGivenInput:return PoolOperation.SwapGivenProceeds;case PoolOperation.SwapGivenProceeds:return PoolOperation.SwapGivenInput;case PoolOperation.Add:return PoolOperation.SwapGivenInput;}});};var handleSwap=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var components;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(A.account&&B.mintAddress)){_context.next=14;break;}_context.prev=1;setPendingTx(true);components=[{account:A.account,mintAddress:A.mintAddress,amount:A.convertAmount()},{mintAddress:B.mintAddress,amount:B.convertAmount()}];_context.next=6;return swap(connection,wallet,components,slippage,pool);case 6:_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);notify({description:\"Please try again and approve transactions from your wallet\",message:\"Swap trade cancelled.\",type:\"error\"});case 11:_context.prev=11;setPendingTx(false);return _context.finish(11);case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,8,11,14]]);}));return function handleSwap(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"input-card\"},/*#__PURE__*/React.createElement(CurrencyInput,{title:\"Input\",onInputChange:function onInputChange(val){setPoolOperation(PoolOperation.SwapGivenInput);if(A.amount!==val){setLastTypedAccount(A.mintAddress);}A.setAmount(val);},amount:A.amount,mint:A.mintAddress,onMintChange:function onMintChange(item){A.setMint(item);}}),/*#__PURE__*/React.createElement(Button,{type:\"primary\",className:\"swap-button\",onClick:swapAccounts},\"\\u21C5\"),/*#__PURE__*/React.createElement(CurrencyInput,{title:\"To (Estimate)\",onInputChange:function onInputChange(val){setPoolOperation(PoolOperation.SwapGivenProceeds);if(B.amount!==val){setLastTypedAccount(B.mintAddress);}B.setAmount(val);},amount:B.amount,mint:B.mintAddress,onMintChange:function onMintChange(item){B.setMint(item);}}),/*#__PURE__*/React.createElement(PoolAddress,{pool:pool,showLabel:true})),/*#__PURE__*/React.createElement(Button,{className:\"trade-button\",type:\"primary\",size:\"large\",onClick:connected?handleSwap:wallet.connect,style:{width:\"100%\"},disabled:connected&&(pendingTx||!A.account||!B.mintAddress||A.account===B.account||!A.sufficientBalance()||!pool)},generateActionLabel(!pool?POOL_NOT_AVAILABLE(getTokenName(env,A.mintAddress),getTokenName(env,B.mintAddress)):SWAP_LABEL,connected,env,A,B,true),pendingTx&&/*#__PURE__*/React.createElement(Spin,{indicator:antIcon,className:\"trade-spinner\"})));};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/trade/index.tsx"],"names":["Button","Spin","React","useState","useConnection","useConnectionConfig","useSlippageConfig","useWallet","CurrencyInput","LoadingOutlined","swap","usePoolForBasket","PoolOperation","notify","useCurrencyPairState","generateActionLabel","POOL_NOT_AVAILABLE","SWAP_LABEL","getTokenName","PoolAddress","antIcon","fontSize","TradeEntry","wallet","connected","connection","pendingTx","setPendingTx","A","B","setLastTypedAccount","setPoolOperation","pool","mintAddress","slippage","env","swapAccounts","tempMint","tempAmount","amount","setMint","setAmount","op","SwapGivenInput","SwapGivenProceeds","Add","handleSwap","account","components","convertAmount","description","message","type","val","item","connect","width","sufficientBalance"],"mappings":"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","sourcesContent":["import { Button, Spin } from \"antd\";\nimport React, { useState } from \"react\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { swap, usePoolForBasket, PoolOperation } from \"../../utils/pools\";\nimport { notify } from \"../../utils/notifications\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport { generateActionLabel, POOL_NOT_AVAILABLE, SWAP_LABEL } from \"../labels\";\nimport \"./trade.less\";\nimport { getTokenName } from \"../../utils/utils\";\nimport { PoolAddress } from \"../pool/address\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\n// TODO:\n// Compute price breakdown with/without fee\n// Show slippage\n// Show fee information\n\nexport const TradeEntry = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { env } = useConnectionConfig();\n\n  const swapAccounts = () => {\n    const tempMint = A.mintAddress;\n    const tempAmount = A.amount;\n    A.setMint(B.mintAddress);\n    A.setAmount(B.amount);\n    B.setMint(tempMint);\n    B.setAmount(tempAmount);\n    // @ts-ignore\n    setPoolOperation((op: PoolOperation) => {\n      switch (+op) {\n        case PoolOperation.SwapGivenInput:\n          return PoolOperation.SwapGivenProceeds;\n        case PoolOperation.SwapGivenProceeds:\n          return PoolOperation.SwapGivenInput;\n        case PoolOperation.Add:\n          return PoolOperation.SwapGivenInput;\n      }\n    });\n  };\n\n  const handleSwap = async () => {\n    if (A.account && B.mintAddress) {\n      try {\n        setPendingTx(true);\n\n        const components = [\n          {\n            account: A.account,\n            mintAddress: A.mintAddress,\n            amount: A.convertAmount(),\n          },\n          {\n            mintAddress: B.mintAddress,\n            amount: B.convertAmount(),\n          },\n        ];\n\n        await swap(connection, wallet, components, slippage, pool);\n      } catch {\n        notify({\n          description:\n            \"Please try again and approve transactions from your wallet\",\n          message: \"Swap trade cancelled.\",\n          type: \"error\",\n        });\n      } finally {\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"input-card\">\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenInput);\n            if (A.amount !== val) {\n              setLastTypedAccount(A.mintAddress);\n            }\n\n            A.setAmount(val);\n          }}\n          amount={A.amount}\n          mint={A.mintAddress}\n          onMintChange={(item) => {\n            A.setMint(item);\n          }}\n        />\n        <Button type=\"primary\" className=\"swap-button\" onClick={swapAccounts}>\n          ⇅\n        </Button>\n        <CurrencyInput\n          title=\"To (Estimate)\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenProceeds);\n            if (B.amount !== val) {\n              setLastTypedAccount(B.mintAddress);\n            }\n\n            B.setAmount(val);\n          }}\n          amount={B.amount}\n          mint={B.mintAddress}\n          onMintChange={(item) => {\n            B.setMint(item);\n          }}\n        />\n        <PoolAddress pool={pool} showLabel={true} />\n      </div>\n      <Button\n        className=\"trade-button\"\n        type=\"primary\"\n        size=\"large\"\n        onClick={connected ? handleSwap : wallet.connect}\n        style={{ width: \"100%\" }}\n        disabled={\n          connected &&\n          (pendingTx ||\n            !A.account ||\n            !B.mintAddress ||\n            A.account === B.account ||\n            !A.sufficientBalance() ||\n            !pool)\n        }\n      >\n        {generateActionLabel(\n          !pool\n            ? POOL_NOT_AVAILABLE(\n                getTokenName(env, A.mintAddress),\n                getTokenName(env, B.mintAddress)\n              )\n            : SWAP_LABEL,\n          connected,\n          env,\n          A,\n          B,\n          true\n        )}\n        {pendingTx && <Spin indicator={antIcon} className=\"trade-spinner\" />}\n      </Button>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}