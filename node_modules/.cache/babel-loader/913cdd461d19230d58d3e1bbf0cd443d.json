{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nclass Wallet extends EventEmitter {\n  constructor(providerUrl, network) {\n    var _this;\n\n    super();\n    _this = this;\n\n    this._handleMessage = e => {\n      if (e.origin === this._providerUrl.origin && e.source === this._popup) {\n        if (e.data.method === 'connected') {\n          const newPublicKey = new PublicKey(e.data.params.publicKey);\n\n          if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n            this._handleDisconnect();\n\n            this._publicKey = newPublicKey;\n            this._autoApprove = !!e.data.params.autoApprove;\n            this.emit('connect', this._publicKey);\n          }\n        } else if (e.data.method === 'disconnected') {\n          this._handleDisconnect();\n        } else if (e.data.result || e.data.error) {\n          if (this._responsePromises.has(e.data.id)) {\n            const [resolve, reject] = this._responsePromises.get(e.data.id);\n\n            if (e.data.result) {\n              resolve(e.data.result);\n            } else {\n              reject(new Error(e.data.error));\n            }\n          }\n        }\n      }\n    };\n\n    this._handleDisconnect = () => {\n      if (this._publicKey) {\n        this._publicKey = null;\n        this.emit('disconnect');\n      }\n\n      this._responsePromises.forEach(([resolve, reject], id) => {\n        this._responsePromises.delete(id);\n\n        reject('Wallet disconnected');\n      });\n    };\n\n    this._sendRequest = async function (method, params) {\n      if (!_this.connected) {\n        throw new Error('Wallet not connected');\n      }\n\n      const requestId = _this._nextRequestId;\n      ++_this._nextRequestId;\n      return new Promise((resolve, reject) => {\n        _this._responsePromises.set(requestId, [resolve, reject]);\n\n        _this._popup.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params\n        }, _this._providerUrl.origin);\n\n        if (!_this.autoApprove) {\n          _this._popup.focus();\n        }\n      });\n    };\n\n    this.connect = () => {\n      if (this._popup) {\n        this._popup.close();\n      }\n\n      if (!this._handlerAdded) {\n        this._handlerAdded = true;\n        window.addEventListener('message', this._handleMessage);\n        window.addEventListener('beforeunload', this.disconnect);\n      }\n\n      window.name = 'parent';\n      this._popup = window.open(this._providerUrl.toString(), '_blank', 'location,resizable,width=460,height=675');\n      return new Promise(resolve => {\n        this.once('connect', resolve);\n      });\n    };\n\n    this.disconnect = () => {\n      if (this._popup) {\n        this._popup.close();\n      }\n\n      this._handleDisconnect();\n    };\n\n    this.signTransaction = async function (transaction) {\n      const response = await _this._sendRequest('signTransaction', {\n        message: bs58.encode(transaction.serializeMessage())\n      });\n      const signature = bs58.decode(response.signature);\n      const publicKey = new PublicKey(response.publicKey);\n      transaction.addSignature(publicKey, signature);\n      return transaction;\n    };\n\n    this._providerUrl = new URL(providerUrl);\n    this._providerUrl.hash = new URLSearchParams({\n      origin: window.location.origin,\n      network\n    }).toString();\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n}\n\nexport default Wallet;","map":{"version":3,"sources":["../src/index.js"],"names":["constructor","origin","window","network","e","newPublicKey","resolve","reject","requestId","jsonrpc","id","params","response","message","bs58","transaction","signature","publicKey"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\nexport default class Wallet extends EventEmitter {\n  constructor(providerUrl, network) {\n    super();\n    this._providerUrl = new URL(providerUrl);\n    this._providerUrl.hash = new URLSearchParams({\n      origin: window.location.origin,\n      network,\n    }).toString();\n    this._publicKey = null;\n    this._autoApprove = false;\n    this._popup = null;\n    this._handlerAdded = false;\n    this._nextRequestId = 1;\n    this._responsePromises = new Map();\n  }\n\n  _handleMessage = (e) => {\n    if (e.origin === this._providerUrl.origin && e.source === this._popup) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          this._handleDisconnect();\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this._handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        if (this._responsePromises.has(e.data.id)) {\n          const [resolve, reject] = this._responsePromises.get(e.data.id);\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  _handleDisconnect = () => {\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([resolve, reject], id) => {\n      this._responsePromises.delete(id);\n      reject('Wallet disconnected');\n    });\n  };\n\n  _sendRequest = async (method, params) => {\n    if (!this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      this._popup.postMessage(\n        {\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params,\n        },\n        this._providerUrl.origin,\n      );\n      if (!this.autoApprove) {\n        this._popup.focus();\n      }\n    });\n  };\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return this._autoApprove;\n  }\n\n  connect = () => {\n    if (this._popup) {\n      this._popup.close();\n    }\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this._handleMessage);\n      window.addEventListener('beforeunload', this.disconnect);\n    }\n    window.name = 'parent';\n    this._popup = window.open(\n      this._providerUrl.toString(),\n      '_blank',\n      'location,resizable,width=460,height=675',\n    );\n    return new Promise((resolve) => {\n      this.once('connect', resolve);\n    });\n  };\n\n  disconnect = () => {\n    if (this._popup) {\n      this._popup.close();\n    }\n    this._handleDisconnect();\n  };\n\n  signTransaction = async (transaction) => {\n    const response = await this._sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    });\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}