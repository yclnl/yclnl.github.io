{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/components/slippage/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { useSlippageConfig } from \"./../../utils/connection\";\nimport { NumericInput } from \"./../numericInput\";\nexport const Slippage = () => {\n  const {\n    slippage,\n    setSlippage\n  } = useSlippageConfig();\n  const slippagePct = slippage * 100;\n  const [value, setValue] = useState(slippagePct.toString());\n  useEffect(() => {\n    setValue(slippagePct.toString());\n  }, [slippage, slippagePct]);\n\n  const isSelected = val => {\n    return val === slippagePct ? \"primary\" : \"default\";\n  };\n\n  const itemStyle = {\n    margin: 5\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, [0.1, 0.5, 1.0].map(item => {\n    return /*#__PURE__*/React.createElement(Button, {\n      key: item.toString(),\n      style: itemStyle,\n      type: isSelected(item),\n      onClick: () => setSlippage(item / 100.0),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, item, \"%\");\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"3px 10px 3px 3px\",\n      border: \"1px solid #434343\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NumericInput, {\n    className: \"slippage-input\",\n    size: \"small\",\n    placeholder: value,\n    value: value,\n    style: {\n      width: 50,\n      fontSize: 14,\n      boxShadow: \"none\",\n      borderColor: \"transparent\",\n      outline: \"transpaernt\"\n    },\n    onChange: x => {\n      setValue(x);\n      const newValue = parseFloat(x) / 100.0;\n\n      if (Number.isFinite(newValue)) {\n        setSlippage(newValue);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), \"%\"));\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/slippage/index.tsx"],"names":["React","useEffect","useState","Button","useSlippageConfig","NumericInput","Slippage","slippage","setSlippage","slippagePct","value","setValue","toString","isSelected","val","itemStyle","margin","display","flexDirection","alignItems","map","item","padding","border","width","fontSize","boxShadow","borderColor","outline","x","newValue","parseFloat","Number","isFinite"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BJ,iBAAiB,EAAnD;AACA,QAAMK,WAAW,GAAGF,QAAQ,GAAG,GAA/B;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACO,WAAW,CAACG,QAAZ,EAAD,CAAlC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAACF,WAAW,CAACG,QAAZ,EAAD,CAAR;AACD,GAFQ,EAEN,CAACL,QAAD,EAAWE,WAAX,CAFM,CAAT;;AAIA,QAAMI,UAAU,GAAIC,GAAD,IAAiB;AAClC,WAAOA,GAAG,KAAKL,WAAR,GAAsB,SAAtB,GAAkC,SAAzC;AACD,GAFD;;AAIA,QAAMM,SAA8B,GAAG;AACrCC,IAAAA,MAAM,EAAE;AAD6B,GAAvC;AAIA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE,KAAlC;AAAyCC,MAAAA,UAAU,EAAE;AAArD,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgBC,GAAhB,CAAqBC,IAAD,IAAU;AAC7B,wBACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACT,QAAL,EADP;AAEE,MAAA,KAAK,EAAEG,SAFT;AAGE,MAAA,IAAI,EAAEF,UAAU,CAACQ,IAAD,CAHlB;AAIE,MAAA,OAAO,EAAE,MAAMb,WAAW,CAACa,IAAI,GAAG,KAAR,CAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGA,IANH,MADF;AAUD,GAXA,CAHH,eAeE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,kBAAX;AAA+BC,MAAAA,MAAM,EAAE;AAAvC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,WAAW,EAAEb,KAHf;AAIE,IAAA,KAAK,EAAEA,KAJT;AAKE,IAAA,KAAK,EAAE;AACLc,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,QAAQ,EAAE,EAFL;AAGLC,MAAAA,SAAS,EAAE,MAHN;AAILC,MAAAA,WAAW,EAAE,aAJR;AAKLC,MAAAA,OAAO,EAAE;AALJ,KALT;AAYE,IAAA,QAAQ,EAAGC,CAAD,IAAY;AACpBlB,MAAAA,QAAQ,CAACkB,CAAD,CAAR;AACA,YAAMC,QAAQ,GAAGC,UAAU,CAACF,CAAD,CAAV,GAAgB,KAAjC;;AACA,UAAIG,MAAM,CAACC,QAAP,CAAgBH,QAAhB,CAAJ,EAA+B;AAC7BtB,QAAAA,WAAW,CAACsB,QAAD,CAAX;AACD;AACF,KAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,MAfF,CADF;AAyCD,CA1DM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { useSlippageConfig } from \"./../../utils/connection\";\nimport { NumericInput } from \"./../numericInput\";\n\nexport const Slippage = () => {\n  const { slippage, setSlippage } = useSlippageConfig();\n  const slippagePct = slippage * 100;\n  const [value, setValue] = useState(slippagePct.toString());\n\n  useEffect(() => {\n    setValue(slippagePct.toString());\n  }, [slippage, slippagePct]);\n\n  const isSelected = (val: number) => {\n    return val === slippagePct ? \"primary\" : \"default\";\n  };\n\n  const itemStyle: React.CSSProperties = {\n    margin: 5,\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      {[0.1, 0.5, 1.0].map((item) => {\n        return (\n          <Button\n            key={item.toString()}\n            style={itemStyle}\n            type={isSelected(item)}\n            onClick={() => setSlippage(item / 100.0)}\n          >\n            {item}%\n          </Button>\n        );\n      })}\n      <div style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}>\n        <NumericInput\n          className=\"slippage-input\"\n          size=\"small\"\n          placeholder={value}\n          value={value}\n          style={{\n            width: 50,\n            fontSize: 14,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          onChange={(x: any) => {\n            setValue(x);\n            const newValue = parseFloat(x) / 100.0;\n            if (Number.isFinite(newValue)) {\n              setSlippage(newValue);\n            }\n          }}\n        />\n        %\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}