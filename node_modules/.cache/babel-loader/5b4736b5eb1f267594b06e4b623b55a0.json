{"ast":null,"code":"import _slicedToArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useMemo,useState}from\"react\";import Wallet from\"@project-serum/sol-wallet-adapter\";import{notify}from\"./notifications\";import{useConnectionConfig}from\"./connection\";import{useLocalStorageState}from\"./utils\";export var WALLET_PROVIDERS=[{name:\"sollet.io\",url:\"https://www.sollet.io\"},{name:\"solflare.com\",url:\"https://solflare.com/access-wallet\"}];var WalletContext=React.createContext(null);export function WalletProvider(_ref){var _WALLET_PROVIDERS$fin,_WALLET_PROVIDERS$fin2;var _ref$children=_ref.children,children=_ref$children===void 0?null:_ref$children;var _useConnectionConfig=useConnectionConfig(),endpoint=_useConnectionConfig.endpoint;var _useLocalStorageState=useLocalStorageState(\"walletProvider\",\"https://www.sollet.io\"),_useLocalStorageState2=_slicedToArray(_useLocalStorageState,2),providerUrl=_useLocalStorageState2[0],setProviderUrl=_useLocalStorageState2[1];var wallet=useMemo(function(){return new Wallet(providerUrl,endpoint);},[providerUrl,endpoint]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),connected=_useState2[0],setConnected=_useState2[1];useEffect(function(){console.log(\"trying to connect\");wallet.on(\"connect\",function(){console.log(\"connected\");setConnected(true);var walletPublicKey=wallet.publicKey.toBase58();var keyToDisplay=walletPublicKey.length>20?\"\".concat(walletPublicKey.substring(0,7),\".....\").concat(walletPublicKey.substring(walletPublicKey.length-7,walletPublicKey.length)):walletPublicKey;notify({message:\"Wallet update\",description:\"Connected to wallet \"+keyToDisplay});});wallet.on(\"disconnect\",function(){setConnected(false);notify({message:\"Wallet update\",description:\"Disconnected from wallet\"});});return function(){wallet.disconnect();setConnected(false);};},[wallet]);return/*#__PURE__*/React.createElement(WalletContext.Provider,{value:{wallet:wallet,connected:connected,providerUrl:providerUrl,setProviderUrl:setProviderUrl,providerName:(_WALLET_PROVIDERS$fin=(_WALLET_PROVIDERS$fin2=WALLET_PROVIDERS.find(function(_ref2){var url=_ref2.url;return url===providerUrl;}))===null||_WALLET_PROVIDERS$fin2===void 0?void 0:_WALLET_PROVIDERS$fin2.name)!==null&&_WALLET_PROVIDERS$fin!==void 0?_WALLET_PROVIDERS$fin:providerUrl}},children);}export function useWallet(){var context=useContext(WalletContext);return{connected:context.connected,wallet:context.wallet,providerUrl:context.providerUrl,setProvider:context.setProviderUrl,providerName:context.providerName};}","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/wallet.tsx"],"names":["React","useContext","useEffect","useMemo","useState","Wallet","notify","useConnectionConfig","useLocalStorageState","WALLET_PROVIDERS","name","url","WalletContext","createContext","WalletProvider","children","endpoint","providerUrl","setProviderUrl","wallet","connected","setConnected","console","log","on","walletPublicKey","publicKey","toBase58","keyToDisplay","length","substring","message","description","disconnect","providerName","find","useWallet","context","setProvider"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { notify } from \"./notifications\";\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./utils\";\n\nexport const WALLET_PROVIDERS = [\n  { name: \"sollet.io\", url: \"https://www.sollet.io\" },\n  { name: \"solflare.com\", url: \"https://solflare.com/access-wallet\" },\n];\n\nconst WalletContext = React.createContext<any>(null);\n\nexport function WalletProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\n    \"walletProvider\",\n    \"https://www.sollet.io\"\n  );\n  const wallet = useMemo(() => new Wallet(providerUrl, endpoint), [\n    providerUrl,\n    endpoint,\n  ]);\n\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    console.log(\"trying to connect\");\n    wallet.on(\"connect\", () => {\n      console.log(\"connected\");\n      setConnected(true);\n      let walletPublicKey = wallet.publicKey.toBase58();\n      let keyToDisplay =\n        walletPublicKey.length > 20\n          ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\n              walletPublicKey.length - 7,\n              walletPublicKey.length\n            )}`\n          : walletPublicKey;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    });\n    wallet.on(\"disconnect\", () => {\n      setConnected(false);\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    });\n    return () => {\n      wallet.disconnect();\n      setConnected(false);\n    };\n  }, [wallet]);\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        providerUrl,\n        setProviderUrl,\n        providerName:\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\n          providerUrl,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  return {\n    connected: context.connected,\n    wallet: context.wallet,\n    providerUrl: context.providerUrl,\n    setProvider: context.setProviderUrl,\n    providerName: context.providerName,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}