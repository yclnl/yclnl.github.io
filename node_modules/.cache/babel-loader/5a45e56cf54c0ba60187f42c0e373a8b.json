{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/utils/wallet.tsx\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { notify } from \"./notifications\";\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./utils\";\nexport const WALLET_PROVIDERS = [{\n  name: \"sollet.io\",\n  url: \"https://www.sollet.io\"\n}, {\n  name: \"solflare.com\",\n  url: \"https://solflare.com/access-wallet\"\n}];\nconst WalletContext = React.createContext(null);\nexport function WalletProvider({\n  children = null\n}) {\n  var _WALLET_PROVIDERS$fin, _WALLET_PROVIDERS$fin2;\n\n  const {\n    endpoint\n  } = useConnectionConfig();\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\"walletProvider\", \"https://www.sollet.io\");\n  const wallet = useMemo(() => new Wallet(providerUrl, endpoint), [providerUrl, endpoint]);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    console.log(\"trying to connect\");\n    wallet.on(\"connect\", () => {\n      console.log(\"connected\");\n      setConnected(true);\n      let walletPublicKey = wallet.publicKey.toBase58();\n      let keyToDisplay = walletPublicKey.length > 20 ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(walletPublicKey.length - 7, walletPublicKey.length)}` : walletPublicKey;\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay\n      });\n    });\n    wallet.on(\"disconnect\", () => {\n      setConnected(false);\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\"\n      });\n    });\n    return () => {\n      wallet.disconnect();\n      setConnected(false);\n    };\n  }, [wallet]);\n  return /*#__PURE__*/React.createElement(WalletContext.Provider, {\n    value: {\n      wallet,\n      connected,\n      providerUrl,\n      setProviderUrl,\n      providerName: (_WALLET_PROVIDERS$fin = (_WALLET_PROVIDERS$fin2 = WALLET_PROVIDERS.find(({\n        url\n      }) => url === providerUrl)) === null || _WALLET_PROVIDERS$fin2 === void 0 ? void 0 : _WALLET_PROVIDERS$fin2.name) !== null && _WALLET_PROVIDERS$fin !== void 0 ? _WALLET_PROVIDERS$fin : providerUrl\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  return {\n    connected: context.connected,\n    wallet: context.wallet,\n    providerUrl: context.providerUrl,\n    setProvider: context.setProviderUrl,\n    providerName: context.providerName\n  };\n}","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/wallet.tsx"],"names":["React","useContext","useEffect","useMemo","useState","Wallet","notify","useConnectionConfig","useLocalStorageState","WALLET_PROVIDERS","name","url","WalletContext","createContext","WalletProvider","children","endpoint","providerUrl","setProviderUrl","wallet","connected","setConnected","console","log","on","walletPublicKey","publicKey","toBase58","keyToDisplay","length","substring","message","description","disconnect","providerName","find","useWallet","context","setProvider"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,mBAAT,QAAoC,cAApC;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAC9B;AAAEC,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CAD8B,EAE9B;AAAED,EAAAA,IAAI,EAAE,cAAR;AAAwBC,EAAAA,GAAG,EAAE;AAA7B,CAF8B,CAAzB;AAKP,MAAMC,aAAa,GAAGZ,KAAK,CAACa,aAAN,CAAyB,IAAzB,CAAtB;AAEA,OAAO,SAASC,cAAT,CAAwB;AAAEC,EAAAA,QAAQ,GAAG;AAAb,CAAxB,EAAoD;AAAA;;AACzD,QAAM;AAAEC,IAAAA;AAAF,MAAeT,mBAAmB,EAAxC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCV,oBAAoB,CACxD,gBADwD,EAExD,uBAFwD,CAA1D;AAIA,QAAMW,MAAM,GAAGhB,OAAO,CAAC,MAAM,IAAIE,MAAJ,CAAWY,WAAX,EAAwBD,QAAxB,CAAP,EAA0C,CAC9DC,WAD8D,EAE9DD,QAF8D,CAA1C,CAAtB;AAKA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAJ,IAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBF,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAII,eAAe,GAAGN,MAAM,CAACO,SAAP,CAAiBC,QAAjB,EAAtB;AACA,UAAIC,YAAY,GACdH,eAAe,CAACI,MAAhB,GAAyB,EAAzB,GACK,GAAEJ,eAAe,CAACK,SAAhB,CAA0B,CAA1B,EAA6B,CAA7B,CAAgC,QAAOL,eAAe,CAACK,SAAhB,CACxCL,eAAe,CAACI,MAAhB,GAAyB,CADe,EAExCJ,eAAe,CAACI,MAFwB,CAGxC,EAJN,GAKIJ,eANN;AAQAnB,MAAAA,MAAM,CAAC;AACLyB,QAAAA,OAAO,EAAE,eADJ;AAELC,QAAAA,WAAW,EAAE,yBAAyBJ;AAFjC,OAAD,CAAN;AAID,KAhBD;AAiBAT,IAAAA,MAAM,CAACK,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAf,MAAAA,MAAM,CAAC;AACLyB,QAAAA,OAAO,EAAE,eADJ;AAELC,QAAAA,WAAW,EAAE;AAFR,OAAD,CAAN;AAID,KAND;AAOA,WAAO,MAAM;AACXb,MAAAA,MAAM,CAACc,UAAP;AACAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAHD;AAID,GA9BQ,EA8BN,CAACF,MAAD,CA9BM,CAAT;AA+BA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,MADK;AAELC,MAAAA,SAFK;AAGLH,MAAAA,WAHK;AAILC,MAAAA,cAJK;AAKLgB,MAAAA,YAAY,qDACVzB,gBAAgB,CAAC0B,IAAjB,CAAsB,CAAC;AAAExB,QAAAA;AAAF,OAAD,KAAaA,GAAG,KAAKM,WAA3C,CADU,2DACV,uBAAyDP,IAD/C,yEAEVO;AAPG,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGF,QAXH,CADF;AAeD;AAED,OAAO,SAASqB,SAAT,GAAqB;AAC1B,QAAMC,OAAO,GAAGpC,UAAU,CAACW,aAAD,CAA1B;AACA,SAAO;AACLQ,IAAAA,SAAS,EAAEiB,OAAO,CAACjB,SADd;AAELD,IAAAA,MAAM,EAAEkB,OAAO,CAAClB,MAFX;AAGLF,IAAAA,WAAW,EAAEoB,OAAO,CAACpB,WAHhB;AAILqB,IAAAA,WAAW,EAAED,OAAO,CAACnB,cAJhB;AAKLgB,IAAAA,YAAY,EAAEG,OAAO,CAACH;AALjB,GAAP;AAOD","sourcesContent":["import React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { notify } from \"./notifications\";\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./utils\";\n\nexport const WALLET_PROVIDERS = [\n  { name: \"sollet.io\", url: \"https://www.sollet.io\" },\n  { name: \"solflare.com\", url: \"https://solflare.com/access-wallet\" },\n];\n\nconst WalletContext = React.createContext<any>(null);\n\nexport function WalletProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\n    \"walletProvider\",\n    \"https://www.sollet.io\"\n  );\n  const wallet = useMemo(() => new Wallet(providerUrl, endpoint), [\n    providerUrl,\n    endpoint,\n  ]);\n\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    console.log(\"trying to connect\");\n    wallet.on(\"connect\", () => {\n      console.log(\"connected\");\n      setConnected(true);\n      let walletPublicKey = wallet.publicKey.toBase58();\n      let keyToDisplay =\n        walletPublicKey.length > 20\n          ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\n              walletPublicKey.length - 7,\n              walletPublicKey.length\n            )}`\n          : walletPublicKey;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    });\n    wallet.on(\"disconnect\", () => {\n      setConnected(false);\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    });\n    return () => {\n      wallet.disconnect();\n      setConnected(false);\n    };\n  }, [wallet]);\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        providerUrl,\n        setProviderUrl,\n        providerName:\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\n          providerUrl,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  return {\n    connected: context.connected,\n    wallet: context.wallet,\n    providerUrl: context.providerUrl,\n    setProvider: context.setProviderUrl,\n    providerName: context.providerName,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}