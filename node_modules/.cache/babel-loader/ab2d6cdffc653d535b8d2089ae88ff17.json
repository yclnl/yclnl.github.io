{"ast":null,"code":"import _toConsumableArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useLocalStorageState}from\"./utils\";import{Account,clusterApiUrl,Connection,Transaction}from\"@solana/web3.js\";import React,{useContext,useEffect,useMemo}from\"react\";import{setProgramIds}from\"./ids\";import{notify}from\"./notifications\";import{ExplorerLink}from\"../components/explorerLink\";export var ENDPOINTS=[{name:\"mainnet-beta\",endpoint:\"https://solana-api.projectserum.com/\"},{name:\"testnet\",endpoint:clusterApiUrl(\"testnet\")},{name:\"devnet\",endpoint:clusterApiUrl(\"devnet\")},{name:\"localnet\",endpoint:\"http://127.0.0.1:8899\"}];var DEFAULT=ENDPOINTS[0].endpoint;var DEFAULT_SLIPPAGE=0.25;var ConnectionContext=React.createContext({endpoint:DEFAULT,setEndpoint:function setEndpoint(){},slippage:DEFAULT_SLIPPAGE,setSlippage:function setSlippage(val){},connection:new Connection(DEFAULT,\"recent\"),sendConnection:new Connection(DEFAULT,\"recent\"),env:ENDPOINTS[0].name});export function ConnectionProvider(_ref){var _ENDPOINTS$find;var _ref$children=_ref.children,children=_ref$children===void 0?undefined:_ref$children;var _useLocalStorageState=useLocalStorageState(\"connectionEndpts\",ENDPOINTS[0].endpoint),_useLocalStorageState2=_slicedToArray(_useLocalStorageState,2),endpoint=_useLocalStorageState2[0],setEndpoint=_useLocalStorageState2[1];var _useLocalStorageState3=useLocalStorageState(\"slippage\",DEFAULT_SLIPPAGE.toString()),_useLocalStorageState4=_slicedToArray(_useLocalStorageState3,2),slippage=_useLocalStorageState4[0],_setSlippage=_useLocalStorageState4[1];var connection=useMemo(function(){return new Connection(endpoint,\"recent\");},[endpoint]);var sendConnection=useMemo(function(){return new Connection(endpoint,\"recent\");},[endpoint]);var env=((_ENDPOINTS$find=ENDPOINTS.find(function(end){return end.endpoint===endpoint;}))===null||_ENDPOINTS$find===void 0?void 0:_ENDPOINTS$find.name)||ENDPOINTS[0].name;setProgramIds(env);// The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n// is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n// This is a hack to prevent the list from every getting empty\nuseEffect(function(){var id=connection.onAccountChange(new Account().publicKey,function(){});return function(){connection.removeAccountChangeListener(id);};},[connection]);useEffect(function(){var id=connection.onSlotChange(function(){return null;});return function(){connection.removeSlotChangeListener(id);};},[connection]);useEffect(function(){var id=sendConnection.onAccountChange(new Account().publicKey,function(){});return function(){sendConnection.removeAccountChangeListener(id);};},[sendConnection]);useEffect(function(){var id=sendConnection.onSlotChange(function(){return null;});return function(){sendConnection.removeSlotChangeListener(id);};},[sendConnection]);return/*#__PURE__*/React.createElement(ConnectionContext.Provider,{value:{endpoint:endpoint,setEndpoint:setEndpoint,slippage:parseFloat(slippage),setSlippage:function setSlippage(val){return _setSlippage(val.toString());},connection:connection,sendConnection:sendConnection,env:env}},children);}export function useConnection(){return useContext(ConnectionContext).connection;}export function useSendConnection(){var _useContext;return(_useContext=useContext(ConnectionContext))===null||_useContext===void 0?void 0:_useContext.sendConnection;}export function useConnectionConfig(){var context=useContext(ConnectionContext);return{endpoint:context.endpoint,setEndpoint:context.setEndpoint,env:context.env};}export function useSlippageConfig(){var _useContext2=useContext(ConnectionContext),slippage=_useContext2.slippage,setSlippage=_useContext2.setSlippage;return{slippage:slippage,setSlippage:setSlippage};}var getErrorForTransaction=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,txid){var tx,errors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return connection.confirmTransaction(txid,\"max\");case 2:_context.next=4;return connection.getParsedConfirmedTransaction(txid);case 4:tx=_context.sent;errors=[];if((tx===null||tx===void 0?void 0:tx.meta)&&tx.meta.logMessages){tx.meta.logMessages.forEach(function(log){var regex=/Error: (.*)/gm;var m;while((m=regex.exec(log))!==null){// This is necessary to avoid infinite loops with zero-width matches\nif(m.index===regex.lastIndex){regex.lastIndex++;}if(m.length>1){errors.push(m[1]);}}});}return _context.abrupt(\"return\",errors);case 8:case\"end\":return _context.stop();}}},_callee);}));return function getErrorForTransaction(_x,_x2){return _ref2.apply(this,arguments);};}();export var sendTransaction=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,wallet,instructions,signers){var _transaction;var awaitConfirmation,transaction,_transaction2,rawTransaction,options,txid,status,errors,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:awaitConfirmation=_args2.length>4&&_args2[4]!==undefined?_args2[4]:true;transaction=new Transaction();instructions.forEach(function(instruction){return transaction.add(instruction);});_context2.next=5;return connection.getRecentBlockhash(\"max\");case 5:transaction.recentBlockhash=_context2.sent.blockhash;(_transaction=transaction).setSigners.apply(_transaction,[// fee payied by the wallet owner\nwallet.publicKey].concat(_toConsumableArray(signers.map(function(s){return s.publicKey;}))));if(signers.length>0){(_transaction2=transaction).partialSign.apply(_transaction2,_toConsumableArray(signers));}_context2.next=10;return wallet.signTransaction(transaction);case 10:transaction=_context2.sent;rawTransaction=transaction.serialize();options={skipPreflight:true,commitment:\"singleGossip\"};_context2.next=15;return connection.sendRawTransaction(rawTransaction,options);case 15:txid=_context2.sent;if(!awaitConfirmation){_context2.next=26;break;}_context2.next=19;return connection.confirmTransaction(txid,options&&options.commitment);case 19:status=_context2.sent.value;if(!(status===null||status===void 0?void 0:status.err)){_context2.next=26;break;}_context2.next=23;return getErrorForTransaction(connection,txid);case 23:errors=_context2.sent;notify({message:\"Transaction failed...\",description:/*#__PURE__*/React.createElement(React.Fragment,null,errors.map(function(err){return/*#__PURE__*/React.createElement(\"div\",null,err);}),/*#__PURE__*/React.createElement(ExplorerLink,{address:txid,type:\"transaction\"})),type:\"error\"});throw new Error(\"Raw transaction \".concat(txid,\" failed (\").concat(JSON.stringify(status),\")\"));case 26:return _context2.abrupt(\"return\",txid);case 27:case\"end\":return _context2.stop();}}},_callee2);}));return function sendTransaction(_x3,_x4,_x5,_x6){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/utils/connection.tsx"],"names":["useLocalStorageState","Account","clusterApiUrl","Connection","Transaction","React","useContext","useEffect","useMemo","setProgramIds","notify","ExplorerLink","ENDPOINTS","name","endpoint","DEFAULT","DEFAULT_SLIPPAGE","ConnectionContext","createContext","setEndpoint","slippage","setSlippage","val","connection","sendConnection","env","ConnectionProvider","children","undefined","toString","find","end","id","onAccountChange","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","parseFloat","useConnection","useSendConnection","useConnectionConfig","context","useSlippageConfig","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","regex","m","exec","index","lastIndex","length","push","sendTransaction","wallet","instructions","signers","awaitConfirmation","transaction","instruction","add","getRecentBlockhash","recentBlockhash","blockhash","setSigners","map","s","partialSign","signTransaction","rawTransaction","serialize","options","skipPreflight","commitment","sendRawTransaction","status","value","err","message","description","type","Error","JSON","stringify"],"mappings":"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","sourcesContent":["import { useLocalStorageState } from \"./utils\";\nimport {\n  Account,\n  clusterApiUrl,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { setProgramIds } from \"./ids\";\nimport { notify } from \"./notifications\";\nimport { ExplorerLink } from \"../components/explorerLink\";\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://solana-api.projectserum.com/\",\n  },\n  { name: \"testnet\" as ENV, endpoint: clusterApiUrl(\"testnet\") },\n  { name: \"devnet\" as ENV, endpoint: clusterApiUrl(\"devnet\") },\n  { name: \"localnet\" as ENV, endpoint: \"http://127.0.0.1:8899\" },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\nconst DEFAULT_SLIPPAGE = 0.25;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  slippage: number;\n  setSlippage: (val: number) => void;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  slippage: DEFAULT_SLIPPAGE,\n  setSlippage: (val: number) => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpts\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const [slippage, setSlippage] = useLocalStorageState(\n    \"slippage\",\n    DEFAULT_SLIPPAGE.toString()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        slippage: parseFloat(slippage),\n        setSlippage: (val) => setSlippage(val.toString()),\n        connection,\n        sendConnection,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n  };\n}\n\nexport function useSlippageConfig() {\n  const { slippage, setSlippage } = useContext(ConnectionContext);\n  return { slippage, setSlippage };\n}\n\nconst getErrorForTransaction = async (connection: Connection, txid: string) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Account[],\n  awaitConfirmation = true\n) => {\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  transaction.setSigners(\n    // fee payied by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey)\n  );\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment: \"singleGossip\",\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n\n  if (awaitConfirmation) {\n    const status = (\n      await connection.confirmTransaction(\n        txid,\n        options && (options.commitment as any)\n      )\n    ).value;\n\n    if (status?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(\n        `Raw transaction ${txid} failed (${JSON.stringify(status)})`\n      );\n    }\n  }\n\n  return txid;\n};\n"]},"metadata":{},"sourceType":"module"}