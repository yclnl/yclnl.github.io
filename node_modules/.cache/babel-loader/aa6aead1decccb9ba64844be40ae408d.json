{"ast":null,"code":"import _slicedToArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/home/yclnl/yclnl.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useCallback,useContext,useEffect,useState}from\"react\";import{POOLS_WITH_AIRDROP}from\"./../models/airdrops\";import{MINT_TO_MARKET}from\"./../models/marketOverrides\";import{convert,getPoolName,getTokenName,STABLE_COINS}from\"./../utils/utils\";import{useConnectionConfig}from\"./../utils/connection\";import{cache,getMultipleAccounts,MintParser,useCachedPool}from\"./../utils/accounts\";import{Market,MARKETS,Orderbook,TOKEN_MINTS}from\"@project-serum/serum\";import{Connection,PublicKey}from\"@solana/web3.js\";import{useMemo}from\"react\";import{EventEmitter}from\"./../utils/eventEmitter\";var INITAL_LIQUIDITY_DATE=new Date(\"2020-10-27\");var REFRESH_INTERVAL=30000;var MarketsContext=React.createContext(null);var marketEmitter=new EventEmitter();export function MarketProvider(_ref){var _ref$children=_ref.children,children=_ref$children===void 0?null:_ref$children;var _useConnectionConfig=useConnectionConfig(),endpoint=_useConnectionConfig.endpoint;var _useCachedPool=useCachedPool(),pools=_useCachedPool.pools;var accountsToObserve=useMemo(function(){return new Map();},[]);var connection=useMemo(function(){return new Connection(endpoint,\"recent\");},[endpoint]);var marketByMint=useMemo(function(){return _toConsumableArray(new Set(pools.map(function(p){return p.pubkeys.holdingMints;}).flat()).values()).reduce(function(acc,key){var mintAddress=key.toBase58();var SERUM_TOKEN=TOKEN_MINTS.find(function(a){return a.address.toBase58()===mintAddress;});var marketAddress=MINT_TO_MARKET[mintAddress];var marketName=\"\".concat(SERUM_TOKEN===null||SERUM_TOKEN===void 0?void 0:SERUM_TOKEN.name,\"/USDC\");var marketInfo=MARKETS.find(function(m){return m.name===marketName||m.address.toBase58()===marketAddress;});if(marketInfo){acc.set(mintAddress,{marketInfo:marketInfo});}return acc;},new Map());},[pools]);useEffect(function(){var timer=0;var updateData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return refreshAccounts(connection,_toConsumableArray(accountsToObserve.keys()));case 2:// TODO: only raise mints that changed\nmarketEmitter.raiseMarketUpdated(new Set(_toConsumableArray(marketByMint.keys())));timer=window.setTimeout(function(){return updateData();},REFRESH_INTERVAL);case 4:case\"end\":return _context.stop();}}},_callee);}));return function updateData(){return _ref2.apply(this,arguments);};}();var initalQuery=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var reverseSerumMarketCache,allMarkets,toQuery;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:reverseSerumMarketCache=new Map();_toConsumableArray(marketByMint.keys()).forEach(function(mint){var m=marketByMint.get(mint);if(m){reverseSerumMarketCache.set(m.marketInfo.address.toBase58(),mint);}});allMarkets=_toConsumableArray(marketByMint.values()).map(function(m){return m.marketInfo.address.toBase58();});_context2.next=5;return getMultipleAccounts(connection,// only query for markets that are not in cahce\nallMarkets.filter(function(a){return cache.get(a)===undefined;}),\"single\").then(function(_ref4){var keys=_ref4.keys,array=_ref4.array;allMarkets.forEach(function(){});return array.map(function(item,index){var marketAddress=keys[index];var mintAddress=reverseSerumMarketCache.get(marketAddress);if(mintAddress){var market=marketByMint.get(mintAddress);if(market){var programId=market.marketInfo.programId;var id=market.marketInfo.address;cache.add(id,item,function(id,acc){var decoded=Market.getLayout(programId).decode(acc.data);var details={pubkey:id,account:_objectSpread({},acc),info:decoded};cache.registerParser(details.info.baseMint,MintParser);cache.registerParser(details.info.quoteMint,MintParser);cache.registerParser(details.info.bids,OrderBookParser);cache.registerParser(details.info.asks,OrderBookParser);return details;});}}return item;});});case 5:toQuery=new Set();allMarkets.forEach(function(m){var market=cache.get(m);if(!market){return;}var decoded=market;if(!cache.get(decoded.info.baseMint)){toQuery.add(decoded.info.baseMint.toBase58());}if(!cache.get(decoded.info.baseMint)){toQuery.add(decoded.info.quoteMint.toBase58());}toQuery.add(decoded.info.bids.toBase58());toQuery.add(decoded.info.asks.toBase58());// TODO: only update when someone listnes to it\n});_context2.next=9;return refreshAccounts(connection,_toConsumableArray(toQuery.keys()));case 9:marketEmitter.raiseMarketUpdated(new Set(_toConsumableArray(marketByMint.keys())));// start update loop\nupdateData();case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function initalQuery(){return _ref3.apply(this,arguments);};}();initalQuery();return function(){window.clearTimeout(timer);};},[pools,marketByMint]);var midPriceInUSD=useCallback(function(mintAddress){var _marketByMint$get;return getMidPrice((_marketByMint$get=marketByMint.get(mintAddress))===null||_marketByMint$get===void 0?void 0:_marketByMint$get.marketInfo.address.toBase58(),mintAddress);},[marketByMint]);var subscribeToMarket=useCallback(function(mintAddress){var info=marketByMint.get(mintAddress);var market=cache.get((info===null||info===void 0?void 0:info.marketInfo.address.toBase58())||\"\");if(!market){return function(){};}var bid=market.info.bids.toBase58();var ask=market.info.asks.toBase58();accountsToObserve.set(bid,(accountsToObserve.get(bid)||0)+1);accountsToObserve.set(ask,(accountsToObserve.get(ask)||0)+1);// TODO: add event queue to query for last trade\nreturn function(){accountsToObserve.set(bid,(accountsToObserve.get(bid)||0)-1);accountsToObserve.set(ask,(accountsToObserve.get(ask)||0)-1);// cleanup\n_toConsumableArray(accountsToObserve.keys()).forEach(function(key){if((accountsToObserve.get(key)||0)<=0){accountsToObserve.delete(key);}});};},[marketByMint]);return/*#__PURE__*/React.createElement(MarketsContext.Provider,{value:{midPriceInUSD:midPriceInUSD,marketEmitter:marketEmitter,accountsToObserve:accountsToObserve,marketByMint:marketByMint,subscribeToMarket:subscribeToMarket}},children);}export var useMarkets=function useMarkets(){var context=useContext(MarketsContext);return context;};export var useMidPriceInUSD=function useMidPriceInUSD(mint){var _ref5=useContext(MarketsContext),midPriceInUSD=_ref5.midPriceInUSD,subscribeToMarket=_ref5.subscribeToMarket,marketEmitter=_ref5.marketEmitter;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),price=_useState2[0],setPrice=_useState2[1];useEffect(function(){var subscription=subscribeToMarket(mint);var update=function update(){if(midPriceInUSD){setPrice(midPriceInUSD(mint));}};update();var dispose=marketEmitter.onMarket(update);return function(){subscription();dispose();};},[midPriceInUSD,mint]);return{price:price,isBase:price===1.0};};export var useEnrichedPools=function useEnrichedPools(pools){var context=useContext(MarketsContext);var _useConnectionConfig2=useConnectionConfig(),env=_useConnectionConfig2.env;var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),enriched=_useState4[0],setEnriched=_useState4[1];var marketsByMint=context===null||context===void 0?void 0:context.marketByMint;useEffect(function(){var mints=_toConsumableArray(new Set(_toConsumableArray(marketsByMint===null||marketsByMint===void 0?void 0:marketsByMint.keys())).keys());var subscriptions=mints.map(function(m){return context===null||context===void 0?void 0:context.subscribeToMarket(m);});var update=function update(){setEnriched(createEnrichedPools(pools,marketsByMint,env));};var dispose=context===null||context===void 0?void 0:context.marketEmitter.onMarket(update);update();return function(){dispose&&dispose();subscriptions.forEach(function(dispose){return dispose&&dispose();});};},[env,pools,marketsByMint]);return enriched;};// TODO:\n// 1. useEnrichedPools\n//      combines market and pools and user info\n// 2. ADD useMidPrice with event to refresh price\n// that could subscribe to multiple markets and trigger refresh of those markets only when there is active subscription\nfunction createEnrichedPools(pools,marketByMint,env){var TODAY=new Date();if(!marketByMint){return[];}var result=pools.filter(function(p){return p.pubkeys.holdingMints&&p.pubkeys.holdingMints.length>1;}).map(function(p,index){var _p$pubkeys$holdingMin,_marketByMint$get2,_marketByMint$get3;var mints=(p.pubkeys.holdingMints||[]).map(function(a){return a.toBase58();}).sort();var indexA=mints[0]===((_p$pubkeys$holdingMin=p.pubkeys.holdingMints[0])===null||_p$pubkeys$holdingMin===void 0?void 0:_p$pubkeys$holdingMin.toBase58())?0:1;var indexB=indexA===0?1:0;var accountA=cache.getAccount(p.pubkeys.holdingAccounts[indexA]);var mintA=cache.getMint(mints[0]);var accountB=cache.getAccount(p.pubkeys.holdingAccounts[indexB]);var mintB=cache.getMint(mints[1]);var baseReserveUSD=getMidPrice(((_marketByMint$get2=marketByMint.get(mints[0]))===null||_marketByMint$get2===void 0?void 0:_marketByMint$get2.marketInfo.address.toBase58())||\"\",mints[0])*convert(accountA,mintA);var quoteReserveUSD=getMidPrice(((_marketByMint$get3=marketByMint.get(mints[1]))===null||_marketByMint$get3===void 0?void 0:_marketByMint$get3.marketInfo.address.toBase58())||\"\",mints[1])*convert(accountB,mintB);var poolMint=cache.getMint(p.pubkeys.mint);if(poolMint===null||poolMint===void 0?void 0:poolMint.supply.eqn(0)){return;}var airdropYield=calculateAirdropYield(p,marketByMint,baseReserveUSD,quoteReserveUSD);var volume=0;var fees=0;var apy=airdropYield;if(p.pubkeys.feeAccount){var feeAccount=cache.getAccount(p.pubkeys.feeAccount);if(poolMint&&feeAccount&&feeAccount.info.mint.toBase58()===p.pubkeys.mint.toBase58()){var feeBalance=feeAccount===null||feeAccount===void 0?void 0:feeAccount.info.amount.toNumber();var supply=poolMint===null||poolMint===void 0?void 0:poolMint.supply.toNumber();var ownedPct=feeBalance/supply;var poolOwnerFees=ownedPct*baseReserveUSD+ownedPct*quoteReserveUSD;volume=poolOwnerFees/0.0004;fees=volume*0.003;if(fees!==0){var baseVolume=ownedPct*baseReserveUSD/0.0004;var quoteVolume=ownedPct*quoteReserveUSD/0.0004;// Aproximation not true for all pools we need to fine a better way\nvar daysSinceInception=Math.floor((TODAY.getTime()-INITAL_LIQUIDITY_DATE.getTime())/(24*3600*1000));var apy0=parseFloat(baseVolume/daysSinceInception*0.003*356)/baseReserveUSD;var apy1=parseFloat(quoteVolume/daysSinceInception*0.003*356)/quoteReserveUSD;apy=apy+Math.max(apy0,apy1);}}}var lpMint=cache.getMint(p.pubkeys.mint);var name=getPoolName(env,p);var link=\"#/?pair=\".concat(getPoolName(env,p,false).replace(\"/\",\"-\"));return{key:p.pubkeys.account.toBase58(),id:index,name:name,names:mints.map(function(m){return getTokenName(env,m);}),address:p.pubkeys.mint.toBase58(),link:link,mints:mints,liquidityA:convert(accountA,mintA),liquidityAinUsd:baseReserveUSD,liquidityB:convert(accountB,mintB),liquidityBinUsd:quoteReserveUSD,supply:lpMint&&((lpMint===null||lpMint===void 0?void 0:lpMint.supply.toNumber())/Math.pow(10,(lpMint===null||lpMint===void 0?void 0:lpMint.decimals)||0)).toFixed(9),fees:fees,liquidity:baseReserveUSD+quoteReserveUSD,volume:volume,apy:Number.isFinite(apy)?apy:0,raw:p};}).filter(function(p){return p!==undefined;});return result;}function calculateAirdropYield(p,marketByMint,baseReserveUSD,quoteReserveUSD){var airdropYield=0;var poolWithAirdrop=POOLS_WITH_AIRDROP.find(function(drop){return drop.pool.equals(p.pubkeys.mint);});if(poolWithAirdrop){airdropYield=poolWithAirdrop.airdrops.reduce(function(acc,item){var _marketByMint$get4;var market=(_marketByMint$get4=marketByMint.get(item.mint.toBase58()))===null||_marketByMint$get4===void 0?void 0:_marketByMint$get4.marketInfo.address;if(market){var midPrice=getMidPrice(market===null||market===void 0?void 0:market.toBase58(),item.mint.toBase58());acc=acc+// airdrop yield\nitem.amount*midPrice/(baseReserveUSD+quoteReserveUSD)*(365/30);}return acc;},0);}return airdropYield;}var OrderBookParser=function OrderBookParser(id,acc){var decoded=Orderbook.LAYOUT.decode(acc.data);var details={pubkey:id,account:_objectSpread({},acc),info:decoded};return details;};var getMidPrice=function getMidPrice(marketAddress,mintAddress){var _cache$get,_cache$get2,_cache$get3,_cache$get4;var SERUM_TOKEN=TOKEN_MINTS.find(function(a){return a.address.toBase58()===mintAddress;});if(STABLE_COINS.has((SERUM_TOKEN===null||SERUM_TOKEN===void 0?void 0:SERUM_TOKEN.name)||\"\")){return 1.0;}if(!marketAddress){return 0.0;}var marketInfo=cache.get(marketAddress);if(!marketInfo){return 0.0;}var decodedMarket=marketInfo.info;var baseMintDecimals=((_cache$get=cache.get(decodedMarket.baseMint))===null||_cache$get===void 0?void 0:_cache$get.info.decimals)||0;var quoteMintDecimals=((_cache$get2=cache.get(decodedMarket.quoteMint))===null||_cache$get2===void 0?void 0:_cache$get2.info.decimals)||0;var market=new Market(decodedMarket,baseMintDecimals,quoteMintDecimals,undefined,decodedMarket.programId);var bids=(_cache$get3=cache.get(decodedMarket.bids))===null||_cache$get3===void 0?void 0:_cache$get3.info;var asks=(_cache$get4=cache.get(decodedMarket.asks))===null||_cache$get4===void 0?void 0:_cache$get4.info;if(bids&&asks){var bidsBook=new Orderbook(market,bids.accountFlags,bids.slab);var asksBook=new Orderbook(market,asks.accountFlags,asks.slab);var bestBid=bidsBook.getL2(1);var bestAsk=asksBook.getL2(1);if(bestBid.length>0&&bestAsk.length>0){return(bestBid[0][0]+bestAsk[0][0])/2.0;}}return 0;};var refreshAccounts=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,keys){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(keys.length===0)){_context3.next=2;break;}return _context3.abrupt(\"return\",[]);case 2:return _context3.abrupt(\"return\",getMultipleAccounts(connection,keys,\"single\").then(function(_ref7){var keys=_ref7.keys,array=_ref7.array;return array.map(function(item,index){var address=keys[index];return cache.add(new PublicKey(address),item);});}));case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function refreshAccounts(_x,_x2){return _ref6.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/context/market.tsx"],"names":["React","useCallback","useContext","useEffect","useState","POOLS_WITH_AIRDROP","MINT_TO_MARKET","convert","getPoolName","getTokenName","STABLE_COINS","useConnectionConfig","cache","getMultipleAccounts","MintParser","useCachedPool","Market","MARKETS","Orderbook","TOKEN_MINTS","Connection","PublicKey","useMemo","EventEmitter","INITAL_LIQUIDITY_DATE","Date","REFRESH_INTERVAL","MarketsContext","createContext","marketEmitter","MarketProvider","children","endpoint","pools","accountsToObserve","Map","connection","marketByMint","Set","map","p","pubkeys","holdingMints","flat","values","reduce","acc","key","mintAddress","toBase58","SERUM_TOKEN","find","a","address","marketAddress","marketName","name","marketInfo","m","set","timer","updateData","refreshAccounts","keys","raiseMarketUpdated","window","setTimeout","initalQuery","reverseSerumMarketCache","forEach","mint","get","allMarkets","filter","undefined","then","array","item","index","market","programId","id","add","decoded","getLayout","decode","data","details","pubkey","account","info","registerParser","baseMint","quoteMint","bids","OrderBookParser","asks","toQuery","clearTimeout","midPriceInUSD","getMidPrice","subscribeToMarket","bid","ask","delete","useMarkets","context","useMidPriceInUSD","price","setPrice","subscription","update","dispose","onMarket","isBase","useEnrichedPools","env","enriched","setEnriched","marketsByMint","mints","subscriptions","createEnrichedPools","TODAY","result","length","sort","indexA","indexB","accountA","getAccount","holdingAccounts","mintA","getMint","accountB","mintB","baseReserveUSD","quoteReserveUSD","poolMint","supply","eqn","airdropYield","calculateAirdropYield","volume","fees","apy","feeAccount","feeBalance","amount","toNumber","ownedPct","poolOwnerFees","baseVolume","quoteVolume","daysSinceInception","Math","floor","getTime","apy0","parseFloat","apy1","max","lpMint","link","replace","names","liquidityA","liquidityAinUsd","liquidityB","liquidityBinUsd","pow","decimals","toFixed","liquidity","Number","isFinite","raw","poolWithAirdrop","drop","pool","equals","airdrops","midPrice","LAYOUT","has","decodedMarket","baseMintDecimals","quoteMintDecimals","bidsBook","accountFlags","slab","asksBook","bestBid","getL2","bestAsk"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { POOLS_WITH_AIRDROP } from \"./../models/airdrops\";\nimport { MINT_TO_MARKET } from \"./../models/marketOverrides\";\nimport {\n  convert,\n  getPoolName,\n  getTokenName,\n  STABLE_COINS,\n} from \"./../utils/utils\";\nimport { ENV, useConnectionConfig } from \"./../utils/connection\";\nimport {\n  cache,\n  getMultipleAccounts,\n  MintParser,\n  ParsedAccountBase,\n  useCachedPool,\n} from \"./../utils/accounts\";\nimport { Market, MARKETS, Orderbook, TOKEN_MINTS } from \"@project-serum/serum\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\nimport { PoolInfo } from \"../models\";\nimport { EventEmitter } from \"./../utils/eventEmitter\";\n\nexport interface MarketsContextState {\n  midPriceInUSD: (mint: string) => number;\n  marketEmitter: EventEmitter;\n  accountsToObserve: Map<string, number>;\n  marketByMint: Map<string, SerumMarket>;\n\n  subscribeToMarket: (mint: string) => () => void;\n}\n\nconst INITAL_LIQUIDITY_DATE = new Date(\"2020-10-27\");\nconst REFRESH_INTERVAL = 30_000;\n\nconst MarketsContext = React.createContext<MarketsContextState | null>(null);\n\nconst marketEmitter = new EventEmitter();\n\nexport function MarketProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const { pools } = useCachedPool();\n  const accountsToObserve = useMemo(() => new Map<string, number>(), []);\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const marketByMint = useMemo(() => {\n    return [\n      ...new Set(pools.map((p) => p.pubkeys.holdingMints).flat()).values(),\n    ].reduce((acc, key) => {\n      const mintAddress = key.toBase58();\n\n      const SERUM_TOKEN = TOKEN_MINTS.find(\n        (a) => a.address.toBase58() === mintAddress\n      );\n\n      const marketAddress = MINT_TO_MARKET[mintAddress];\n      const marketName = `${SERUM_TOKEN?.name}/USDC`;\n      const marketInfo = MARKETS.find(\n        (m) => m.name === marketName || m.address.toBase58() === marketAddress\n      );\n\n      if (marketInfo) {\n        acc.set(mintAddress, {\n          marketInfo,\n        });\n      }\n\n      return acc;\n    }, new Map<string, SerumMarket>()) as Map<string, SerumMarket>;\n  }, [pools]);\n\n  useEffect(() => {\n    let timer = 0;\n\n    const updateData = async () => {\n      await refreshAccounts(connection, [...accountsToObserve.keys()]);\n\n      // TODO: only raise mints that changed\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      timer = window.setTimeout(() => updateData(), REFRESH_INTERVAL);\n    };\n\n    const initalQuery = async () => {\n      const reverseSerumMarketCache = new Map<string, string>();\n      [...marketByMint.keys()].forEach((mint) => {\n        const m = marketByMint.get(mint);\n        if (m) {\n          reverseSerumMarketCache.set(m.marketInfo.address.toBase58(), mint);\n        }\n      });\n\n      const allMarkets = [...marketByMint.values()].map((m) => {\n        return m.marketInfo.address.toBase58();\n      });\n\n      await getMultipleAccounts(\n        connection,\n        // only query for markets that are not in cahce\n        allMarkets.filter((a) => cache.get(a) === undefined),\n        \"single\"\n      ).then(({ keys, array }) => {\n        allMarkets.forEach(() => { });\n\n        return array.map((item, index) => {\n          const marketAddress = keys[index];\n          const mintAddress = reverseSerumMarketCache.get(marketAddress);\n          if (mintAddress) {\n            const market = marketByMint.get(mintAddress);\n\n            if (market) {\n              const programId = market.marketInfo.programId;\n              const id = market.marketInfo.address;\n              cache.add(id, item, (id, acc) => {\n                const decoded = Market.getLayout(programId).decode(acc.data);\n\n                const details = {\n                  pubkey: id,\n                  account: {\n                    ...acc,\n                  },\n                  info: decoded,\n                } as ParsedAccountBase;\n\n                cache.registerParser(details.info.baseMint, MintParser);\n                cache.registerParser(details.info.quoteMint, MintParser);\n                cache.registerParser(details.info.bids, OrderBookParser);\n                cache.registerParser(details.info.asks, OrderBookParser);\n\n                return details;\n              });\n            }\n          }\n\n          return item;\n        });\n      });\n\n      const toQuery = new Set<string>();\n      allMarkets.forEach((m) => {\n        const market = cache.get(m);\n        if (!market) {\n          return;\n        }\n\n        const decoded = market;\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.baseMint.toBase58());\n        }\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.quoteMint.toBase58());\n        }\n\n        toQuery.add(decoded.info.bids.toBase58());\n        toQuery.add(decoded.info.asks.toBase58());\n\n        // TODO: only update when someone listnes to it\n      });\n\n      await refreshAccounts(connection, [...toQuery.keys()]);\n\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      // start update loop\n      updateData();\n    };\n\n    initalQuery();\n\n    return () => {\n      window.clearTimeout(timer);\n    };\n  }, [pools, marketByMint]);\n\n  const midPriceInUSD = useCallback(\n    (mintAddress: string) => {\n      return getMidPrice(\n        marketByMint.get(mintAddress)?.marketInfo.address.toBase58(),\n        mintAddress\n      );\n    },\n    [marketByMint]\n  );\n\n  const subscribeToMarket = useCallback(\n    (mintAddress: string) => {\n      const info = marketByMint.get(mintAddress);\n      const market = cache.get(info?.marketInfo.address.toBase58() || \"\");\n      if (!market) {\n        return () => { };\n      }\n\n      const bid = market.info.bids.toBase58();\n      const ask = market.info.asks.toBase58();\n      accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) + 1);\n      accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) + 1);\n\n      // TODO: add event queue to query for last trade\n\n      return () => {\n        accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) - 1);\n        accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) - 1);\n\n        // cleanup\n        [...accountsToObserve.keys()].forEach((key) => {\n          if ((accountsToObserve.get(key) || 0) <= 0) {\n            accountsToObserve.delete(key);\n          }\n        });\n      };\n    },\n    [marketByMint]\n  );\n\n  return (\n    <MarketsContext.Provider\n      value={{\n        midPriceInUSD,\n        marketEmitter,\n        accountsToObserve,\n        marketByMint,\n        subscribeToMarket,\n      }}\n    >\n      {children}\n    </MarketsContext.Provider>\n  );\n}\n\nexport const useMarkets = () => {\n  const context = useContext(MarketsContext);\n  return context as MarketsContextState;\n};\n\nexport const useMidPriceInUSD = (mint: string) => {\n  const { midPriceInUSD, subscribeToMarket, marketEmitter } = useContext(\n    MarketsContext\n  ) as MarketsContextState;\n  const [price, setPrice] = useState<number>(0);\n\n  useEffect(() => {\n    let subscription = subscribeToMarket(mint);\n    const update = () => {\n      if (midPriceInUSD) {\n        setPrice(midPriceInUSD(mint));\n      }\n    };\n\n    update();\n    const dispose = marketEmitter.onMarket(update);\n\n    return () => {\n      subscription();\n      dispose();\n    };\n  }, [midPriceInUSD, mint]);\n\n  return { price, isBase: price === 1.0 };\n};\n\nexport const useEnrichedPools = (pools: PoolInfo[]) => {\n  const context = useContext(MarketsContext);\n  const { env } = useConnectionConfig();\n  const [enriched, setEnriched] = useState<any[]>([]);\n\n  const marketsByMint = context?.marketByMint;\n\n  useEffect(() => {\n    const mints = [...new Set([...marketsByMint?.keys()]).keys()];\n\n    const subscriptions = mints.map((m) => context?.subscribeToMarket(m));\n\n    const update = () => {\n      setEnriched(createEnrichedPools(pools, marketsByMint, env));\n    };\n\n    const dispose = context?.marketEmitter.onMarket(update);\n\n    update();\n\n    return () => {\n      dispose && dispose();\n      subscriptions.forEach((dispose) => dispose && dispose());\n    };\n  }, [env, pools, marketsByMint]);\n\n  return enriched;\n};\n\n// TODO:\n// 1. useEnrichedPools\n//      combines market and pools and user info\n// 2. ADD useMidPrice with event to refresh price\n// that could subscribe to multiple markets and trigger refresh of those markets only when there is active subscription\n\nfunction createEnrichedPools(\n  pools: PoolInfo[],\n  marketByMint: Map<string, SerumMarket> | undefined,\n  env: ENV\n) {\n  const TODAY = new Date();\n\n  if (!marketByMint) {\n    return [];\n  }\n\n  const result = pools\n    .filter((p) => p.pubkeys.holdingMints && p.pubkeys.holdingMints.length > 1)\n    .map((p, index) => {\n      const mints = (p.pubkeys.holdingMints || [])\n        .map((a) => a.toBase58())\n        .sort();\n      const indexA = mints[0] === p.pubkeys.holdingMints[0]?.toBase58() ? 0 : 1;\n      const indexB = indexA === 0 ? 1 : 0;\n      const accountA = cache.getAccount(p.pubkeys.holdingAccounts[indexA]);\n      const mintA = cache.getMint(mints[0]);\n      const accountB = cache.getAccount(p.pubkeys.holdingAccounts[indexB]);\n      const mintB = cache.getMint(mints[1]);\n\n      const baseReserveUSD =\n        getMidPrice(\n          marketByMint.get(mints[0])?.marketInfo.address.toBase58() || \"\",\n          mints[0]\n        ) * convert(accountA, mintA);\n      const quoteReserveUSD =\n        getMidPrice(\n          marketByMint.get(mints[1])?.marketInfo.address.toBase58() || \"\",\n          mints[1]\n        ) * convert(accountB, mintB);\n\n      const poolMint = cache.getMint(p.pubkeys.mint);\n      if (poolMint?.supply.eqn(0)) {\n        return;\n      }\n\n      let airdropYield = calculateAirdropYield(\n        p,\n        marketByMint,\n        baseReserveUSD,\n        quoteReserveUSD\n      );\n\n      let volume = 0;\n      let fees = 0;\n      let apy = airdropYield;\n      if (p.pubkeys.feeAccount) {\n        const feeAccount = cache.getAccount(p.pubkeys.feeAccount);\n\n        if (\n          poolMint &&\n          feeAccount &&\n          feeAccount.info.mint.toBase58() === p.pubkeys.mint.toBase58()\n        ) {\n          const feeBalance = feeAccount?.info.amount.toNumber();\n          const supply = poolMint?.supply.toNumber();\n\n          const ownedPct = feeBalance / supply;\n\n          const poolOwnerFees =\n            ownedPct * baseReserveUSD + ownedPct * quoteReserveUSD;\n          volume = poolOwnerFees / 0.0004;\n          fees = volume * 0.003;\n\n          if (fees !== 0) {\n            const baseVolume = (ownedPct * baseReserveUSD) / 0.0004;\n            const quoteVolume = (ownedPct * quoteReserveUSD) / 0.0004;\n\n            // Aproximation not true for all pools we need to fine a better way\n            const daysSinceInception = Math.floor(\n              (TODAY.getTime() - INITAL_LIQUIDITY_DATE.getTime()) /\n              (24 * 3600 * 1000)\n            );\n            const apy0 =\n              parseFloat(\n                ((baseVolume / daysSinceInception) * 0.003 * 356) as any\n              ) / baseReserveUSD;\n            const apy1 =\n              parseFloat(\n                ((quoteVolume / daysSinceInception) * 0.003 * 356) as any\n              ) / quoteReserveUSD;\n\n            apy = apy + Math.max(apy0, apy1);\n          }\n        }\n      }\n\n      const lpMint = cache.getMint(p.pubkeys.mint);\n\n      const name = getPoolName(env, p);\n      const link = `#/?pair=${getPoolName(env, p, false).replace(\"/\", \"-\")}`;\n\n      return {\n        key: p.pubkeys.account.toBase58(),\n        id: index,\n        name,\n        names: mints.map((m) => getTokenName(env, m)),\n        address: p.pubkeys.mint.toBase58(),\n        link,\n        mints,\n        liquidityA: convert(accountA, mintA),\n        liquidityAinUsd: baseReserveUSD,\n        liquidityB: convert(accountB, mintB),\n        liquidityBinUsd: quoteReserveUSD,\n        supply:\n          lpMint &&\n          (\n            lpMint?.supply.toNumber() / Math.pow(10, lpMint?.decimals || 0)\n          ).toFixed(9),\n        fees,\n        liquidity: baseReserveUSD + quoteReserveUSD,\n        volume,\n        apy: Number.isFinite(apy) ? apy : 0,\n        raw: p,\n      };\n    })\n    .filter((p) => p !== undefined);\n  return result;\n}\n\nfunction calculateAirdropYield(\n  p: PoolInfo,\n  marketByMint: Map<string, SerumMarket>,\n  baseReserveUSD: number,\n  quoteReserveUSD: number\n) {\n  let airdropYield = 0;\n  let poolWithAirdrop = POOLS_WITH_AIRDROP.find((drop) =>\n    drop.pool.equals(p.pubkeys.mint)\n  );\n  if (poolWithAirdrop) {\n    airdropYield = poolWithAirdrop.airdrops.reduce((acc, item) => {\n      const market = marketByMint.get(item.mint.toBase58())?.marketInfo.address;\n      if (market) {\n        const midPrice = getMidPrice(market?.toBase58(), item.mint.toBase58());\n\n        acc =\n          acc +\n          // airdrop yield\n          ((item.amount * midPrice) / (baseReserveUSD + quoteReserveUSD)) *\n          (365 / 30);\n      }\n\n      return acc;\n    }, 0);\n  }\n  return airdropYield;\n}\n\nconst OrderBookParser = (id: PublicKey, acc: AccountInfo<Buffer>) => {\n  const decoded = Orderbook.LAYOUT.decode(acc.data);\n\n  const details = {\n    pubkey: id,\n    account: {\n      ...acc,\n    },\n    info: decoded,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nconst getMidPrice = (marketAddress?: string, mintAddress?: string) => {\n  const SERUM_TOKEN = TOKEN_MINTS.find(\n    (a) => a.address.toBase58() === mintAddress\n  );\n\n  if (STABLE_COINS.has(SERUM_TOKEN?.name || \"\")) {\n    return 1.0;\n  }\n\n  if (!marketAddress) {\n    return 0.0;\n  }\n\n  const marketInfo = cache.get(marketAddress);\n  if (!marketInfo) {\n    return 0.0;\n  }\n\n  const decodedMarket = marketInfo.info;\n\n  const baseMintDecimals =\n    cache.get(decodedMarket.baseMint)?.info.decimals || 0;\n  const quoteMintDecimals =\n    cache.get(decodedMarket.quoteMint)?.info.decimals || 0;\n\n  const market = new Market(\n    decodedMarket,\n    baseMintDecimals,\n    quoteMintDecimals,\n    undefined,\n    decodedMarket.programId\n  );\n\n  const bids = cache.get(decodedMarket.bids)?.info;\n  const asks = cache.get(decodedMarket.asks)?.info;\n\n  if (bids && asks) {\n    const bidsBook = new Orderbook(market, bids.accountFlags, bids.slab);\n    const asksBook = new Orderbook(market, asks.accountFlags, asks.slab);\n\n    const bestBid = bidsBook.getL2(1);\n    const bestAsk = asksBook.getL2(1);\n\n    if (bestBid.length > 0 && bestAsk.length > 0) {\n      return (bestBid[0][0] + bestAsk[0][0]) / 2.0;\n    }\n  }\n\n  return 0;\n};\n\nconst refreshAccounts = async (connection: Connection, keys: string[]) => {\n  if (keys.length === 0) {\n    return [];\n  }\n\n  return getMultipleAccounts(connection, keys, \"single\").then(\n    ({ keys, array }) => {\n      return array.map((item, index) => {\n        const address = keys[index];\n        return cache.add(new PublicKey(address), item);\n      });\n    }\n  );\n};\n\ninterface SerumMarket {\n  marketInfo: {\n    address: PublicKey;\n    name: string;\n    programId: PublicKey;\n    deprecated: boolean;\n  };\n\n  // 1st query\n  marketAccount?: AccountInfo<Buffer>;\n\n  // 2nd query\n  mintBase?: AccountInfo<Buffer>;\n  mintQuote?: AccountInfo<Buffer>;\n  bidAccount?: AccountInfo<Buffer>;\n  askAccount?: AccountInfo<Buffer>;\n  eventQueue?: AccountInfo<Buffer>;\n\n  midPrice?: (mint?: PublicKey) => number;\n}\n"]},"metadata":{},"sourceType":"module"}