{"ast":null,"code":"var _jsxFileName = \"/home/yclnl/yclnl.github.io/src/components/trade/index.tsx\";\nimport { Button, Spin } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useConnection, useConnectionConfig, useSlippageConfig } from \"../../utils/connection\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { swap, usePoolForBasket, PoolOperation } from \"../../utils/pools\";\nimport { notify } from \"../../utils/notifications\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport { generateActionLabel, POOL_NOT_AVAILABLE, SWAP_LABEL } from \"../labels\";\nimport \"./trade.less\";\nimport { getTokenName } from \"../../utils/utils\";\nimport { PoolAddress } from \"../pool/address\";\nconst antIcon = /*#__PURE__*/React.createElement(LoadingOutlined, {\n  style: {\n    fontSize: 24\n  },\n  spin: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 17\n  }\n}); // TODO:\n// Compute price breakdown with/without fee\n// Show slippage\n// Show fee information\n\nexport const TradeEntry = () => {\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A === null || A === void 0 ? void 0 : A.mintAddress, B === null || B === void 0 ? void 0 : B.mintAddress]);\n  const {\n    slippage\n  } = useSlippageConfig();\n  const {\n    env\n  } = useConnectionConfig();\n\n  const swapAccounts = () => {\n    const tempMint = A.mintAddress;\n    const tempAmount = A.amount;\n    A.setMint(B.mintAddress);\n    A.setAmount(B.amount);\n    B.setMint(tempMint);\n    B.setAmount(tempAmount); // @ts-ignore\n\n    setPoolOperation(op => {\n      switch (+op) {\n        case PoolOperation.SwapGivenInput:\n          return PoolOperation.SwapGivenProceeds;\n\n        case PoolOperation.SwapGivenProceeds:\n          return PoolOperation.SwapGivenInput;\n\n        case PoolOperation.Add:\n          return PoolOperation.SwapGivenInput;\n      }\n    });\n  };\n\n  const handleSwap = async () => {\n    if (A.account && B.mintAddress) {\n      try {\n        setPendingTx(true);\n        const components = [{\n          account: A.account,\n          mintAddress: A.mintAddress,\n          amount: A.convertAmount()\n        }, {\n          mintAddress: B.mintAddress,\n          amount: B.convertAmount()\n        }];\n        await swap(connection, wallet, components, slippage, pool);\n      } catch {\n        notify({\n          description: \"Please try again and approve transactions from your wallet\",\n          message: \"Swap trade cancelled.\",\n          type: \"error\"\n        });\n      } finally {\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyInput, {\n    title: \"Input\",\n    onInputChange: val => {\n      setPoolOperation(PoolOperation.SwapGivenInput);\n\n      if (A.amount !== val) {\n        setLastTypedAccount(A.mintAddress);\n      }\n\n      A.setAmount(val);\n    },\n    amount: A.amount,\n    mint: A.mintAddress,\n    onMintChange: item => {\n      A.setMint(item);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    className: \"swap-button\",\n    onClick: swapAccounts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"\\u21C5\"), /*#__PURE__*/React.createElement(CurrencyInput, {\n    title: \"To (Estimate)\",\n    onInputChange: val => {\n      setPoolOperation(PoolOperation.SwapGivenProceeds);\n\n      if (B.amount !== val) {\n        setLastTypedAccount(B.mintAddress);\n      }\n\n      B.setAmount(val);\n    },\n    amount: B.amount,\n    mint: B.mintAddress,\n    onMintChange: item => {\n      B.setMint(item);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PoolAddress, {\n    pool: pool,\n    showLabel: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"trade-button\",\n    type: \"primary\",\n    size: \"large\",\n    onClick: connected ? handleSwap : wallet.connect,\n    style: {\n      width: \"100%\"\n    },\n    disabled: connected && (pendingTx || !A.account || !B.mintAddress || A.account === B.account || !A.sufficientBalance() || !pool),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, generateActionLabel(!pool ? POOL_NOT_AVAILABLE(getTokenName(env, A.mintAddress), getTokenName(env, B.mintAddress)) : SWAP_LABEL, connected, env, A, B, true), pendingTx && /*#__PURE__*/React.createElement(Spin, {\n    indicator: antIcon,\n    className: \"trade-spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 23\n    }\n  })));\n};","map":{"version":3,"sources":["/home/yclnl/yclnl.github.io/src/components/trade/index.tsx"],"names":["Button","Spin","React","useState","useConnection","useConnectionConfig","useSlippageConfig","useWallet","CurrencyInput","LoadingOutlined","swap","usePoolForBasket","PoolOperation","notify","useCurrencyPairState","generateActionLabel","POOL_NOT_AVAILABLE","SWAP_LABEL","getTokenName","PoolAddress","antIcon","fontSize","TradeEntry","wallet","connected","connection","pendingTx","setPendingTx","A","B","setLastTypedAccount","setPoolOperation","pool","mintAddress","slippage","env","swapAccounts","tempMint","tempAmount","amount","setMint","setAmount","op","SwapGivenInput","SwapGivenProceeds","Add","handleSwap","account","components","convertAmount","description","message","type","val","item","connect","width","sufficientBalance"],"mappings":"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","sourcesContent":["import { Button, Spin } from \"antd\";\nimport React, { useState } from \"react\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { swap, usePoolForBasket, PoolOperation } from \"../../utils/pools\";\nimport { notify } from \"../../utils/notifications\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport { generateActionLabel, POOL_NOT_AVAILABLE, SWAP_LABEL } from \"../labels\";\nimport \"./trade.less\";\nimport { getTokenName } from \"../../utils/utils\";\nimport { PoolAddress } from \"../pool/address\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\n// TODO:\n// Compute price breakdown with/without fee\n// Show slippage\n// Show fee information\n\nexport const TradeEntry = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { env } = useConnectionConfig();\n\n  const swapAccounts = () => {\n    const tempMint = A.mintAddress;\n    const tempAmount = A.amount;\n    A.setMint(B.mintAddress);\n    A.setAmount(B.amount);\n    B.setMint(tempMint);\n    B.setAmount(tempAmount);\n    // @ts-ignore\n    setPoolOperation((op: PoolOperation) => {\n      switch (+op) {\n        case PoolOperation.SwapGivenInput:\n          return PoolOperation.SwapGivenProceeds;\n        case PoolOperation.SwapGivenProceeds:\n          return PoolOperation.SwapGivenInput;\n        case PoolOperation.Add:\n          return PoolOperation.SwapGivenInput;\n      }\n    });\n  };\n\n  const handleSwap = async () => {\n    if (A.account && B.mintAddress) {\n      try {\n        setPendingTx(true);\n\n        const components = [\n          {\n            account: A.account,\n            mintAddress: A.mintAddress,\n            amount: A.convertAmount(),\n          },\n          {\n            mintAddress: B.mintAddress,\n            amount: B.convertAmount(),\n          },\n        ];\n\n        await swap(connection, wallet, components, slippage, pool);\n      } catch {\n        notify({\n          description:\n            \"Please try again and approve transactions from your wallet\",\n          message: \"Swap trade cancelled.\",\n          type: \"error\",\n        });\n      } finally {\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"input-card\">\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenInput);\n            if (A.amount !== val) {\n              setLastTypedAccount(A.mintAddress);\n            }\n\n            A.setAmount(val);\n          }}\n          amount={A.amount}\n          mint={A.mintAddress}\n          onMintChange={(item) => {\n            A.setMint(item);\n          }}\n        />\n        <Button type=\"primary\" className=\"swap-button\" onClick={swapAccounts}>\n          ⇅\n        </Button>\n        <CurrencyInput\n          title=\"To (Estimate)\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenProceeds);\n            if (B.amount !== val) {\n              setLastTypedAccount(B.mintAddress);\n            }\n\n            B.setAmount(val);\n          }}\n          amount={B.amount}\n          mint={B.mintAddress}\n          onMintChange={(item) => {\n            B.setMint(item);\n          }}\n        />\n        <PoolAddress pool={pool} showLabel={true} />\n      </div>\n      <Button\n        className=\"trade-button\"\n        type=\"primary\"\n        size=\"large\"\n        onClick={connected ? handleSwap : wallet.connect}\n        style={{ width: \"100%\" }}\n        disabled={\n          connected &&\n          (pendingTx ||\n            !A.account ||\n            !B.mintAddress ||\n            A.account === B.account ||\n            !A.sufficientBalance() ||\n            !pool)\n        }\n      >\n        {generateActionLabel(\n          !pool\n            ? POOL_NOT_AVAILABLE(\n                getTokenName(env, A.mintAddress),\n                getTokenName(env, B.mintAddress)\n              )\n            : SWAP_LABEL,\n          connected,\n          env,\n          A,\n          B,\n          true\n        )}\n        {pendingTx && <Spin indicator={antIcon} className=\"trade-spinner\" />}\n      </Button>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}